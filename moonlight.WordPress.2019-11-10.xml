<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.2.4" created="2019-11-10 14:45" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Moonlight</title>
	<link>http://yx.telstudy.xyz</link>
	<description>blog</description>
	<pubDate>Sun, 10 Nov 2019 14:45:19 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://yx.telstudy.xyz</wp:base_site_url>
	<wp:base_blog_url>http://yx.telstudy.xyz</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[cmmmmmm]]></wp:author_login><wp:author_email><![CDATA[22494749@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[月光不染是非]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>46</wp:term_id>
		<wp:category_nicename><![CDATA[java]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[java]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[js%e6%95%99%e7%a8%8b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[javascript]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>53</wp:term_id>
		<wp:category_nicename><![CDATA[kmp]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[KMP]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[stl]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%af%bb%e4%b9%a6%e7%ac%94%e8%ae%b0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[书评]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>54</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%88%86%e6%b2%bb]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[分治]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8a%a8%e8%a7%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[动态规划]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8d%9a%e5%bc%88]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[博弈]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%93%88%e5%b8%8c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[哈希]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[bfs%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[广搜]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e5%ad%a6]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[数学]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e8%ae%ba]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[数论]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%97%a5%e5%b8%b8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[日常]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[更新]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>45</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[李超线段树]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>18</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a8%a1%e6%8b%9f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[模拟]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a8%a1%e6%9d%bf%e6%95%b4%e7%90%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[模板]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>52</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%af%94%e8%b5%9b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[比赛]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[深搜]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%94%9f%e6%b4%bb]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[生活]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%b4%a0%e6%95%b0%e7%ad%9b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[素数筛]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[解题报告]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[贪心]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>51</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%93%be%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[链表]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>56</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%a1%ba%e5%ba%8f%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[顺序表]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[高精]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[acm-poj]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:category_parent>
		<wp:cat_name><![CDATA[acm-poj]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>55</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%bf%ab%e9%80%9f%e5%b9%82]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e8%ae%ba]]></wp:category_parent>
		<wp:cat_name><![CDATA[快速幂]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[2019icpc%e7%bd%91%e7%bb%9c%e8%b5%9b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[2019icpc网络赛]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[acm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[acm]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[bilibili%e6%b2%89%e8%bf%b7%e8%80%85]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bilibili沉迷者]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[csgo]]></wp:tag_slug>
		<wp:tag_name><![CDATA[csgo]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[hdu]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hdu]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[hello-world]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hello world]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>47</wp:term_id>
		<wp:tag_slug><![CDATA[java]]></wp:tag_slug>
		<wp:tag_name><![CDATA[java]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[oi]]></wp:tag_slug>
		<wp:tag_name><![CDATA[oi]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[poj]]></wp:tag_slug>
		<wp:tag_name><![CDATA[poj]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[stl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[stl]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%85%a5%e9%97%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[入门]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%89%aa%e6%9e%9d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[剪枝]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%96%9c%e6%ac%a2%e7%9d%a1%e8%a7%89]]></wp:tag_slug>
		<wp:tag_name><![CDATA[喜欢睡觉]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%ad%a6%e7%94%9f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[学生]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%87%92]]></wp:tag_slug>
		<wp:tag_name><![CDATA[懒]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%8e%92%e5%ba%8f]]></wp:tag_slug>
		<wp:tag_name><![CDATA[排序]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%9e%9a%e4%b8%be]]></wp:tag_slug>
		<wp:tag_name><![CDATA[枚举]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%ac%a7%e7%9a%87]]></wp:tag_slug>
		<wp:tag_name><![CDATA[欧皇]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>37</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%a0%81%e5%86%9c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[码农]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>42</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[算法]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:tag_slug>
		<wp:tag_name><![CDATA[贪心]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>50</wp:term_id>
		<wp:tag_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:tag_slug>
		<wp:tag_name><![CDATA[链表]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[2019icpc%e7%bd%91%e7%bb%9c%e8%b5%9b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[2019icpc网络赛]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[acm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[acm]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bilibili%e6%b2%89%e8%bf%b7%e8%80%85]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bilibili沉迷者]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[csgo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[csgo]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hdu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hdu]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hello-world]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hello world]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[java]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[java]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[js%e6%95%99%e7%a8%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[javascript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kmp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[KMP]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[oi]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[oi]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[poj]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[poj]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stl]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stl]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%af%bb%e4%b9%a6%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[书评]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%85%a5%e9%97%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[入门]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%88%86%e6%b2%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分治]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%89%aa%e6%9e%9d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[剪枝]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8a%a8%e8%a7%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[动态规划]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%9a%e5%bc%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[博弈]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%93%88%e5%b8%8c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[哈希]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%96%9c%e6%ac%a2%e7%9d%a1%e8%a7%89]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[喜欢睡觉]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ad%a6%e7%94%9f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[学生]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bfs%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[广搜]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%87%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[懒]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e5%ad%a6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数学]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e8%ae%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数论]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%97%a5%e5%b8%b8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[日常]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[更新]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[李超线段树]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9e%9a%e4%b8%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[枚举]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a8%a1%e6%8b%9f]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[模拟]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a8%a1%e6%9d%bf%e6%95%b4%e7%90%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[模板]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%ac%a7%e7%9a%87]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[欧皇]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%af%94%e8%b5%9b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[比赛]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[深搜]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%94%9f%e6%b4%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[生活]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%a0%81%e5%86%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[码农]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%b4%a0%e6%95%b0%e7%ad%9b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[素数筛]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%8f%9c%e5%8d%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[菜单]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[解题报告]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[贪心]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[贪心]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[链表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[链表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a1%ba%e5%ba%8f%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[顺序表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[高精]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[acm-poj]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:term_parent>
		<wp:term_name><![CDATA[acm-poj]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bf%ab%e9%80%9f%e5%b9%82]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e8%ae%ba]]></wp:term_parent>
		<wp:term_name><![CDATA[快速幂]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>2</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e8%8f%9c%e5%8d%95]]></wp:term_slug><wp:term_name><![CDATA[菜单]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.2.4</generator>

<image>
	<url>http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview-32x32.jpg</url>
	<title>Moonlight</title>
	<link>http://yx.telstudy.xyz</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>timg</title>
		<link>http://yx.telstudy.xyz/timg/</link>
		<pubDate>Mon, 10 Dec 2018 15:34:42 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/timg.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:34:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:34:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/timg.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/timg.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:16:"2018/12/timg.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"timg-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"timg-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"timg-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:17:"timg-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:16:"timg-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:16:"timg-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:16:"timg-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_0913</title>
		<link>http://yx.telstudy.xyz/img_0913/</link>
		<pubDate>Mon, 10 Dec 2018 15:42:05 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/IMG_0913.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:42:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:42:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_0913]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/IMG_0913.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/IMG_0913.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:866;s:6:"height";i:797;s:4:"file";s:20:"2018/12/IMG_0913.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_0913-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_0913-300x276.jpg";s:5:"width";i:300;s:6:"height";i:276;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"IMG_0913-768x707.jpg";s:5:"width";i:768;s:6:"height";i:707;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:20:"IMG_0913-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:20:"IMG_0913-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:20:"IMG_0913-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-IMG_0913.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-img_0913-jpg/</link>
		<pubDate>Mon, 10 Dec 2018 15:42:13 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_0913.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_0913.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:42:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:42:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-img_0913-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-IMG_0913.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-IMG_0913.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:28:"2018/12/cropped-IMG_0913.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"cropped-IMG_0913-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:28:"cropped-IMG_0913-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:28:"cropped-IMG_0913-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:28:"cropped-IMG_0913-512x376.jpg";s:5:"width";i:512;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:28:"cropped-IMG_0913-512x386.jpg";s:5:"width";i:512;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:28:"cropped-IMG_0913-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:28:"cropped-IMG_0913-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:28:"cropped-IMG_0913-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:26:"cropped-IMG_0913-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-IMG_0913-1.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-img_0913-1-jpg/</link>
		<pubDate>Mon, 10 Dec 2018 15:42:40 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_0913-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_0913-1.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:42:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:42:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-img_0913-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-IMG_0913-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-IMG_0913-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:866;s:6:"height";i:346;s:4:"file";s:30:"2018/12/cropped-IMG_0913-1.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-300x120.jpg";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-768x307.jpg";s:5:"width";i:768;s:6:"height";i:307;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-770x346.jpg";s:5:"width";i:770;s:6:"height";i:346;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:30:"cropped-IMG_0913-1-570x346.jpg";s:5:"width";i:570;s:6:"height";i:346;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1155</title>
		<link>http://yx.telstudy.xyz/img_1155/</link>
		<pubDate>Mon, 10 Dec 2018 15:44:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/IMG_1155.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:44:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:44:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_1155]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/IMG_1155.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/IMG_1155.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:1279;s:4:"file";s:20:"2018/12/IMG_1155.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_1155-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_1155-169x300.jpg";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_1155-576x1024.jpg";s:5:"width";i:576;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:20:"IMG_1155-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:20:"IMG_1155-720x376.jpg";s:5:"width";i:720;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:20:"IMG_1155-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1155</title>
		<link>http://yx.telstudy.xyz/img_1155-2/</link>
		<pubDate>Mon, 10 Dec 2018 15:45:10 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/IMG_1155-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:45:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:45:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_1155-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/IMG_1155-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/IMG_1155-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:22:"2018/12/IMG_1155-1.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"IMG_1155-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"IMG_1155-1-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:22:"IMG_1155-1-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"IMG_1155-1-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:22:"IMG_1155-1-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:22:"IMG_1155-1-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:22:"IMG_1155-1-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-IMG_1155-1.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-img_1155-1-jpg/</link>
		<pubDate>Mon, 10 Dec 2018 15:45:26 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_1155-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-IMG_1155-1.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:45:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:45:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-img_1155-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-IMG_1155-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-IMG_1155-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:30:"2018/12/cropped-IMG_1155-1.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:31:"cropped-IMG_1155-1-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:30:"cropped-IMG_1155-1-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20181211114238</title>
		<link>http://yx.telstudy.xyz/qq%e5%9b%be%e7%89%8720181211114238/</link>
		<pubDate>Tue, 11 Dec 2018 03:43:18 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/QQ图片20181211114238.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2018-12-11 03:43:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-11 03:43:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720181211114238]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/QQ图片20181211114238.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/QQ图片20181211114238.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1728;s:6:"height";i:1728;s:4:"file";s:34:"2018/12/QQ图片20181211114238.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20181211114238-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20181211114238-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20181211114238-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"QQ图片20181211114238-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:34:"QQ图片20181211114238-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:34:"QQ图片20181211114238-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20181211114238-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-QQ图片20181211114238.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-qq%e5%9b%be%e7%89%8720181211114238-jpg/</link>
		<pubDate>Tue, 11 Dec 2018 03:44:28 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-QQ图片20181211114238.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-QQ图片20181211114238.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2018-12-11 03:44:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-11 03:44:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-qq%e5%9b%be%e7%89%8720181211114238-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-QQ图片20181211114238.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-QQ图片20181211114238.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1728;s:6:"height";i:691;s:4:"file";s:42:"2018/12/cropped-QQ图片20181211114238.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-300x120.jpg";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-768x307.jpg";s:5:"width";i:768;s:6:"height";i:307;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:43:"cropped-QQ图片20181211114238-1024x409.jpg";s:5:"width";i:1024;s:6:"height";i:409;s:9:"mime-type";s:10:"image/jpeg";}s:18:"panoply-blog-image";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-360x202.jpg";s:5:"width";i:360;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}s:21:"panoply-blog-standard";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-770x376.jpg";s:5:"width";i:770;s:6:"height";i:376;s:9:"mime-type";s:10:"image/jpeg";}s:22:"panoply-post-thumbnail";a:4:{s:4:"file";s:42:"cropped-QQ图片20181211114238-570x386.jpg";s:5:"width";i:570;s:6:"height";i:386;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Lemon（Cover：米津玄師）</title>
		<link>http://yx.telstudy.xyz/lemon%ef%bc%88cover%ef%bc%9a%e7%b1%b3%e6%b4%a5%e7%8e%84%e5%b8%ab%ef%bc%89/</link>
		<pubDate>Fri, 14 Dec 2018 11:03:22 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/Akie秋绘-Lemon（Cover：米津玄師）.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《Lemon（Cover：米津玄師）》，来自Akie秋绘的Lemon。 曲目1。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 11:03:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 11:03:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lemon%ef%bc%88cover%ef%bc%9a%e7%b1%b3%e6%b4%a5%e7%8e%84%e5%b8%ab%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-Lemon（Cover：米津玄師）.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/Akie秋绘-Lemon（Cover：米津玄師）.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:21:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320050.6697844008;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.22679327507398014;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:6667533;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:165;s:16:"length_formatted";s:4:"2:45";s:16:"encoder_settings";s:13:"Lavf57.71.100";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/cDgDiEUNIWmTZto4Ljras+Kv/M4aSgY0QazkEiAOfFujxVU6f8VxWb6OhYo7jypsIZ3WlydCB2756UcHzXOIYmp2/oSevKADBtCugcLp/1I17QWk/7UP89k2qyPj/URtk1fcofXrcX0HO4wu+/Mf9+llOb6wsjXuTrF/t+4ZPPFFIWSlyiDVpg2nAq8tORrNsE8A9HHPu5LHyMxq5tMv99/EO8NqVDM5X1se6XLWIEl8sGRRQWIdJyp+5I2t9Z3fpTBiFW4OK7w2wGnC2AR+CHN8O8se8XeN/SfEIaKFT99Bn3W9xDYTODVb4r2Ic1mgSMiob7uKA+Z0FwSTg4oUmM8mOgb2VVIrZgPlYYUx6CCc7YHbypoCt4pEuj8XKsmx89xA+wnbA3Fbu9QftVItYbCY0Vv3jd9w4EcnNxoejVe7eTFe8FPrOhVif2dfEO0iqtbSSsi2TNuxIqhWNl9vJAL/9bZc5MlsafPuPrZY9x3jvhULt1E/PNmo5vEn+RxHw==";s:5:"album";s:5:"Lemon";s:5:"title";s:31:"Lemon（Cover：米津玄師）";s:6:"artist";s:10:"Akie秋绘";s:12:"track_number";s:1:"1";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/30/</link>
		<pubDate>Fri, 14 Dec 2018 11:03:22 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/30/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 11:03:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 11:03:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[30]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-Lemon（Cover：米津玄師）-mp3-image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/Akie秋绘-Lemon（Cover：米津玄師）-mp3-image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cover_hash]]></wp:meta_key>
		<wp:meta_value><![CDATA[7087bb6a4c75c3685131002f5f66f209]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:64:"2018/12/Akie秋绘-Lemon（Cover：米津玄師）-mp3-image.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:64:"Akie秋绘-Lemon（Cover：米津玄師）-mp3-image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:64:"Akie秋绘-Lemon（Cover：米津玄師）-mp3-image-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Lemon（Cover：米津玄師）</title>
		<link>http://yx.telstudy.xyz/lemon%ef%bc%88cover%ef%bc%9a%e7%b1%b3%e6%b4%a5%e7%8e%84%e5%b8%ab%ef%bc%89-2/</link>
		<pubDate>Fri, 14 Dec 2018 11:08:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/Akie秋绘-Lemon（Cover：米津玄師）-1.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《Lemon（Cover：米津玄師）》，来自Akie秋绘的Lemon。 曲目1。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 11:08:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 11:08:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lemon%ef%bc%88cover%ef%bc%9a%e7%b1%b3%e6%b4%a5%e7%8e%84%e5%b8%ab%ef%bc%89-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-Lemon（Cover：米津玄師）-1.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/Akie秋绘-Lemon（Cover：米津玄師）-1.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:21:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320050.6697844008;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.22679327507398014;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:6667533;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:165;s:16:"length_formatted";s:4:"2:45";s:16:"encoder_settings";s:13:"Lavf57.71.100";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/cDgDiEUNIWmTZto4Ljras+Kv/M4aSgY0QazkEiAOfFujxVU6f8VxWb6OhYo7jypsIZ3WlydCB2756UcHzXOIYmp2/oSevKADBtCugcLp/1I17QWk/7UP89k2qyPj/URtk1fcofXrcX0HO4wu+/Mf9+llOb6wsjXuTrF/t+4ZPPFFIWSlyiDVpg2nAq8tORrNsE8A9HHPu5LHyMxq5tMv99/EO8NqVDM5X1se6XLWIEl8sGRRQWIdJyp+5I2t9Z3fpTBiFW4OK7w2wGnC2AR+CHN8O8se8XeN/SfEIaKFT99Bn3W9xDYTODVb4r2Ic1mgSMiob7uKA+Z0FwSTg4oUmM8mOgb2VVIrZgPlYYUx6CCc7YHbypoCt4pEuj8XKsmx89xA+wnbA3Fbu9QftVItYbCY0Vv3jd9w4EcnNxoejVe7eTFe8FPrOhVif2dfEO0iqtbSSsi2TNuxIqhWNl9vJAL/9bZc5MlsafPuPrZY9x3jvhULt1E/PNmo5vEn+RxHw==";s:5:"album";s:5:"Lemon";s:5:"title";s:31:"Lemon（Cover：米津玄師）";s:6:"artist";s:10:"Akie秋绘";s:12:"track_number";s:1:"1";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>九张机（Cover 叶炫清）</title>
		<link>http://yx.telstudy.xyz/%e4%b9%9d%e5%bc%a0%e6%9c%ba%ef%bc%88cover-%e5%8f%b6%e7%82%ab%e6%b8%85%ef%bc%89/</link>
		<pubDate>Fri, 14 Dec 2018 11:16:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/玄觞-九张机（Cover-叶炫清）.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《九张机（Cover 叶炫清）》，来自玄觞的九张机。 曲目1。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 11:16:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 11:16:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b9%9d%e5%bc%a0%e6%9c%ba%ef%bc%88cover-%e5%8f%b6%e7%82%ab%e6%b8%85%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/玄觞-九张机（Cover-叶炫清）.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/玄觞-九张机（Cover-叶炫清）.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[33]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:21:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320037.8973431384;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.22678422430777948;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:9192040;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:220;s:16:"length_formatted";s:4:"3:40";s:16:"encoder_settings";s:13:"Lavf57.71.100";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/ZWCNkfV2Qr1SVqtj8d6gMpfBFz+ru559r692sC73FFcEcVYMjnr2RsGsdxfFR4NarGBlHlS/APX72S3SQZPml/yL2jX1iTIwGMwx+vk5cbX4VjqT7KV+0J50cbwyz7GoyKNzG9HMfFlQz3oVfzeM5CG5H7/GhasrXcM09f5hVp51Q+MIFI5sfWPn3EkoO3DMHcE1KtsgbU1w2LxNPUZb7g+IIias7TFLviRxlj1RDghodu6aXmBkJFBWP8l+2zsTo7Zt5e05aIdpMWMEjUTE4AGbJzEedLO69HHwyHN7LOmta4ZESY5ibVGQsDdq3em73EwJdTYHF1/cw1smooDToqvvLeQmTQ999SToH+ulR80kHUb4nrBBqKFMNDXCx/V2BnYgRPjXEAZ2jWUaZus2+wMerZi7JFjGhaUXattsgrYLjFZBNAjP5OCFOPJU9rqiv+6hof3IyWpd+Ie1W14rgeEqIHD/kGw4d+WNbcqNRQi2srzoKE6xz5aJGGwiZQ9EA==";s:5:"album";s:9:"九张机";s:5:"title";s:30:"九张机（Cover 叶炫清）";s:6:"artist";s:6:"玄觞";s:12:"track_number";s:1:"1";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/33/</link>
		<pubDate>Fri, 14 Dec 2018 11:16:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/33/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 11:16:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 11:16:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[33]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/玄觞-九张机（Cover-叶炫清）-mp3-image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/玄觞-九张机（Cover-叶炫清）-mp3-image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cover_hash]]></wp:meta_key>
		<wp:meta_value><![CDATA[0d8e492ad72ac5b374a1cc1d80a39bf2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:59:"2018/12/玄觞-九张机（Cover-叶炫清）-mp3-image.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:59:"玄觞-九张机（Cover-叶炫清）-mp3-image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:59:"玄觞-九张机（Cover-叶炫清）-mp3-image-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-QQ图片20181211114238-1.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-qq%e5%9b%be%e7%89%8720181211114238-1-jpg/</link>
		<pubDate>Sat, 15 Dec 2018 09:40:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-QQ图片20181211114238-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2018-12-15 09:40:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-15 09:40:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-qq%e5%9b%be%e7%89%8720181211114238-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-QQ图片20181211114238-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-QQ图片20181211114238-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:279;s:4:"file";s:44:"2018/12/cropped-QQ图片20181211114238-1.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"cropped-QQ图片20181211114238-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"cropped-QQ图片20181211114238-1-300x70.jpg";s:5:"width";i:300;s:6:"height";i:70;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"cropped-QQ图片20181211114238-1-768x179.jpg";s:5:"width";i:768;s:6:"height";i:179;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:45:"cropped-QQ图片20181211114238-1-1024x238.jpg";s:5:"width";i:1024;s:6:"height";i:238;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"cropped-QQ图片20181211114238-1-1200x279.jpg";s:5:"width";i:1200;s:6:"height";i:279;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:20;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_twentysixteen]]></wp:meta_key>
		<wp:meta_value><![CDATA[1544866859]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[twentysixteen]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-QQ图片20181211114238-2.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-qq%e5%9b%be%e7%89%8720181211114238-2-jpg/</link>
		<pubDate>Tue, 18 Dec 2018 15:29:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/cropped-QQ图片20181211114238-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2018-12-18 15:29:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-18 15:29:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-qq%e5%9b%be%e7%89%8720181211114238-2-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/cropped-QQ图片20181211114238-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cropped-QQ图片20181211114238-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:980;s:6:"height";i:60;s:4:"file";s:44:"2018/12/cropped-QQ图片20181211114238-2.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"cropped-QQ图片20181211114238-2-150x60.jpg";s:5:"width";i:150;s:6:"height";i:60;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"cropped-QQ图片20181211114238-2-300x18.jpg";s:5:"width";i:300;s:6:"height";i:18;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:43:"cropped-QQ图片20181211114238-2-768x47.jpg";s:5:"width";i:768;s:6:"height";i:47;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:20;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_metro-creativex]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545146986]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[metro-creativex]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>v2-8ae3f699430c58a1f58e051203aab983_r</title>
		<link>http://yx.telstudy.xyz/index.php/sample-page/v2-8ae3f699430c58a1f58e051203aab983_r/</link>
		<pubDate>Tue, 18 Dec 2018 16:30:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/v2-8ae3f699430c58a1f58e051203aab983_r.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2018-12-18 16:30:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-18 16:30:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2-8ae3f699430c58a1f58e051203aab983_r]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/v2-8ae3f699430c58a1f58e051203aab983_r.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/v2-8ae3f699430c58a1f58e051203aab983_r.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:750;s:6:"height";i:752;s:4:"file";s:49:"2018/12/v2-8ae3f699430c58a1f58e051203aab983_r.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"v2-8ae3f699430c58a1f58e051203aab983_r-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:49:"v2-8ae3f699430c58a1f58e051203aab983_r-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>v2-c3e869051a97652c5cd0289e8a9005a4_hd</title>
		<link>http://yx.telstudy.xyz/index.php/sample-page/v2-c3e869051a97652c5cd0289e8a9005a4_hd/</link>
		<pubDate>Tue, 18 Dec 2018 16:30:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/wp-content/uploads/2018/12/v2-c3e869051a97652c5cd0289e8a9005a4_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2018-12-18 16:30:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-18 16:30:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2-c3e869051a97652c5cd0289e8a9005a4_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/v2-c3e869051a97652c5cd0289e8a9005a4_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/v2-c3e869051a97652c5cd0289e8a9005a4_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:425;s:4:"file";s:50:"2018/12/v2-c3e869051a97652c5cd0289e8a9005a4_hd.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:50:"v2-c3e869051a97652c5cd0289e8a9005a4_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:50:"v2-c3e869051a97652c5cd0289e8a9005a4_hd-300x177.jpg";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>心拍数♯0822</title>
		<link>http://yx.telstudy.xyz/%e5%bf%83%e6%8b%8d%e6%95%b0%e2%99%af0822/</link>
		<pubDate>Wed, 19 Dec 2018 15:16:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-心拍数♯0822.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《心拍数♯0822》，来自Akie秋绘的冬氤。2016-17。 曲目1。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:16:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:16:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bf%83%e6%8b%8d%e6%95%b0%e2%99%af0822]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-心拍数♯0822.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/Akie秋绘-心拍数♯0822.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[97]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:22:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320030.0129168623;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.2267786372710192;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:11209375;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:278;s:16:"length_formatted";s:4:"4:38";s:16:"encoder_settings";s:13:"Lavf57.25.100";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/X9+juv1w790BML/tRkMqEzIn1j4hEhjt5mQe/coppqzyhtNlHzim5Pcs3yXFAM0Lad8WQX3cakjJoYx7KOJcWKy2Vewi2QJ1hqnqSgaY1X4M7E/jt/uOJf38fyZ91iqpa2sJ34HqQSw0yVYnhRxKBbeJK+OGaHa4E3812c5N6tS1Q+MIFI5sfWPn3EkoO3DMOKJBlByoQ9dwzShPobt42A+IIias7TFLviRxlj1RDgh/baBVlTREvXIUYPYUdNOOywP6HF0DuCf1WOsmXqxrxp33ybKDXIe34l5CObzGKs4DG/v0++iD+wh45ZU5+SVA3EwJdTYHF1/cw1smooDToqvvLeQmTQ999SToH+ulR80uPZiDgtacTR2V9gBxm3AVLPotk+NhisZLbaozsvApyw+VwpTYi55Rp3gchLF55Ynf4CE5G+MHgndSt/lRXsIE/+6hof3IyWpd+Ie1W14rgeEqIHD/kGw4d+WNbcqNRQi2srzoKE6xz5aJGGwiZQ9EA==";s:5:"album";s:16:"冬氤。2016-17";s:5:"title";s:16:"心拍数♯0822";s:6:"artist";s:10:"Akie秋绘";s:13:"part_of_a_set";s:1:"1";s:12:"track_number";s:1:"1";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/97/</link>
		<pubDate>Wed, 19 Dec 2018 15:16:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/97/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:16:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:16:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[97]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/Akie秋绘-心拍数♯0822-mp3-image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/Akie秋绘-心拍数♯0822-mp3-image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cover_hash]]></wp:meta_key>
		<wp:meta_value><![CDATA[1b34fc1cb071c5c25715b7e3403800e2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:49:"2018/12/Akie秋绘-心拍数♯0822-mp3-image.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"Akie秋绘-心拍数♯0822-mp3-image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:49:"Akie秋绘-心拍数♯0822-mp3-image-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>青春大概</title>
		<link>http://yx.telstudy.xyz/%e9%9d%92%e6%98%a5%e5%a4%a7%e6%a6%82/</link>
		<pubDate>Wed, 19 Dec 2018 15:24:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/王上-青春大概.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《青春大概》，来自王上的青春戏。 曲目8。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:24:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:24:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9d%92%e6%98%a5%e5%a4%a7%e6%a6%82]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/王上-青春大概.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/王上-青春大概.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[99]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:23:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320036.8258815395;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.22678346505211133;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:9181518;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:227;s:16:"length_formatted";s:4:"3:47";s:8:"language";s:6:"国语";s:16:"encoder_settings";s:12:"Lavf56.4.101";s:7:"comment";s:534:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/aAOEID8CBCnhuvA+jRJAAPGCxumS8+vA6rKZ5uAbbmrdAB1JWeeL1Lia7ST1Lvuv70q0MgBjZdi2QqUqef5X/L/6MKQlbRCZqKhOLDauMLoUYXPOm2z/Y7ybUv2OQX+ds/0mNMnwJNZ2woqv8OxAemErl3Q+j4lHKT2DVwBoBdY/PGzN9oxR9aGO4XKEzKL1BexawbjK+jlhvyX5PV9chHXh03VswhMU5c+hnUVsjXDLy5F2sbInR4ZabSKtkpB+ZDqa8jjJLVfn18/oTLc9F2iNoJ4M7rCm3UUqNX4IcCxsnnPnJ/hrVZsRer2bpHOTU4/h2l/IJ31jSjSeb+aSbf7qnev5EEPv82LQOhzbs80iLX7XRxEH59vuO1Sn5fauZBavnRJBXdAsqhl3O3ZP63H9NfkcA5iR/ptOIZDvaefbZ3qaT7mOhrul58uWc61GfBZqEdiF77PsqVcyN8k2nr1VZqmLWyskTd0ahRkrJ5q";s:5:"album";s:9:"青春戏";s:5:"title";s:12:"青春大概";s:6:"artist";s:6:"王上";s:13:"part_of_a_set";s:1:"1";s:12:"track_number";s:1:"8";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/99/</link>
		<pubDate>Wed, 19 Dec 2018 15:24:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/99/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:24:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:24:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[99]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/王上-青春大概-mp3-image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/王上-青春大概-mp3-image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cover_hash]]></wp:meta_key>
		<wp:meta_value><![CDATA[5b445e6a3aaf5cea6e288e099bb9a9eb]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:41:"2018/12/王上-青春大概-mp3-image.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:41:"王上-青春大概-mp3-image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:41:"王上-青春大概-mp3-image-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>干杯</title>
		<link>http://yx.telstudy.xyz/%e5%b9%b2%e6%9d%af/</link>
		<pubDate>Wed, 19 Dec 2018 15:36:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/西瓜Kune翘课迟到-干杯.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[《干杯》，来自西瓜Kune/翘课迟到的evergreen day。 曲目43。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:36:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:36:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b9%b2%e6%9d%af]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/西瓜Kune翘课迟到-干杯.mp3]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/西瓜Kune翘课迟到-干杯.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[105]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:22:{s:10:"dataformat";s:3:"mp3";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";d:320023.121429088;s:11:"channelmode";s:6:"stereo";s:12:"bitrate_mode";s:3:"vbr";s:8:"lossless";b:0;s:15:"encoder_options";s:3:"VBR";s:17:"compression_ratio";d:0.22677375384714285;s:10:"fileformat";s:3:"mp3";s:8:"filesize";i:14560423;s:9:"mime_type";s:10:"audio/mpeg";s:6:"length";i:361;s:16:"length_formatted";s:4:"6:01";s:16:"encoder_settings";s:13:"Lavf57.25.100";s:7:"comment";s:558:"163 key(Don't modify):L64FU3W4YxX3ZFTmbZ+8/QmiqjU5nIZNIa7wNGFYpORhBuSWrq0ucU++D51edmuKLj7usS2y+059ucIAMXcWcHd72yp8oEECG8tQi1bY+kIh1zR1Yqz87VIiOYcRgGiHBfzrpMkRVQhLCGfVmsoq2shKaFWLkdFNpr77rRhhzIRWDdC5Nc9K9xpHMkSyBvw/GDXfqzTXhqBotv1ogvP+jrCtJ62SSHeXAv/vA93P7LhpXrJgg/5A1xCRTWXrkZMKQ02bmRYaPeue4BFxPM0ED8LVYis5MEeiTiM2q4MyZeWbhoLD0/Pqw7r4bH+o8BrCvXqwTDyyfPbonT6m3WpB2kLN2XtKj+TxHkQpxkW3oQSiu8MqFpIMhu0ibvLZO9oZe/XuUXC/plforD1oQjG6UQWOl17RmWLTRiaKDpHODQriyqgSBskOXqSGF1tm1QkwX9KhR+nS1nT3PqOGplvrU972XP3fK2ZnpudRfD9EvAxhMokAMrfQTMQvDgHUCUt3ckkh81zLCSGfPM181D783g==";s:5:"album";s:13:"evergreen day";s:5:"title";s:6:"干杯";s:6:"artist";s:23:"西瓜Kune/翘课迟到";s:13:"part_of_a_set";s:1:"1";s:12:"track_number";s:2:"43";s:5:"image";a:3:{s:4:"mime";s:10:"image/jpeg";s:5:"width";i:640;s:6:"height";i:640;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/105/</link>
		<pubDate>Wed, 19 Dec 2018 15:36:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/105/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:36:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:36:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[105]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/西瓜Kune翘课迟到-干杯-mp3-image.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/西瓜Kune翘课迟到-干杯-mp3-image.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cover_hash]]></wp:meta_key>
		<wp:meta_value><![CDATA[e104062d6600c4fd0bfd8f31e232c1ba]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:51:"2018/12/西瓜Kune翘课迟到-干杯-mp3-image.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:51:"西瓜Kune翘课迟到-干杯-mp3-image-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:51:"西瓜Kune翘课迟到-干杯-mp3-image-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20181214200026</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/14/%e5%af%b9%e6%8c%87%e9%92%88%e7%9a%84%e7%90%86%e8%a7%a3/qq%e5%9b%be%e7%89%8720181214200026/</link>
		<pubDate>Wed, 19 Dec 2018 15:43:14 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/QQ图片20181214200026.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:43:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:43:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720181214200026]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/QQ图片20181214200026.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/QQ图片20181214200026.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:877;s:6:"height";i:217;s:4:"file";s:34:"2018/12/QQ图片20181214200026.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20181214200026-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20181214200026-300x74.png";s:5:"width";i:300;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20181214200026-768x190.png";s:5:"width";i:768;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>timg</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/14/%e5%af%b9%e6%8c%87%e9%92%88%e7%9a%84%e7%90%86%e8%a7%a3/timg-2/</link>
		<pubDate>Wed, 19 Dec 2018 15:46:33 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/timg-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:46:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:46:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[timg-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/timg-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/timg-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:650;s:6:"height";i:733;s:4:"file";s:18:"2018/12/timg-1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"timg-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"timg-1-266x300.jpg";s:5:"width";i:266;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>46f1c8e4f89b67454d339aada8f22ad1_hd</title>
		<link>http://yx.telstudy.xyz/46f1c8e4f89b67454d339aada8f22ad1_hd/</link>
		<pubDate>Fri, 21 Dec 2018 15:15:51 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/46f1c8e4f89b67454d339aada8f22ad1_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 15:15:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-21 15:15:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[46f1c8e4f89b67454d339aada8f22ad1_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/46f1c8e4f89b67454d339aada8f22ad1_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/46f1c8e4f89b67454d339aada8f22ad1_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:661;s:6:"height";i:1200;s:4:"file";s:47:"2018/12/46f1c8e4f89b67454d339aada8f22ad1_hd.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-165x300.jpg";s:5:"width";i:165;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:48:"46f1c8e4f89b67454d339aada8f22ad1_hd-564x1024.jpg";s:5:"width";i:564;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-661x550.jpg";s:5:"width";i:661;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-661x550.jpg";s:5:"width";i:661;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:47:"46f1c8e4f89b67454d339aada8f22ad1_hd-661x335.jpg";s:5:"width";i:661;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>3217a56ab37e0eb96ea4e94a2b9bc0bf_hd</title>
		<link>http://yx.telstudy.xyz/3217a56ab37e0eb96ea4e94a2b9bc0bf_hd/</link>
		<pubDate>Fri, 21 Dec 2018 15:15:54 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/3217a56ab37e0eb96ea4e94a2b9bc0bf_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 15:15:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-21 15:15:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3217a56ab37e0eb96ea4e94a2b9bc0bf_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/3217a56ab37e0eb96ea4e94a2b9bc0bf_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/3217a56ab37e0eb96ea4e94a2b9bc0bf_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:863;s:4:"file";s:47:"2018/12/3217a56ab37e0eb96ea4e94a2b9bc0bf_hd.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-174x300.jpg";s:5:"width";i:174;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-500x550.jpg";s:5:"width";i:500;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-500x550.jpg";s:5:"width";i:500;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-500x480.jpg";s:5:"width";i:500;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:47:"3217a56ab37e0eb96ea4e94a2b9bc0bf_hd-500x335.jpg";s:5:"width";i:500;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>f46665ee4172e9d73044bd42b2b4feed_hd</title>
		<link>http://yx.telstudy.xyz/f46665ee4172e9d73044bd42b2b4feed_hd/</link>
		<pubDate>Fri, 21 Dec 2018 15:15:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/f46665ee4172e9d73044bd42b2b4feed_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 15:15:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-21 15:15:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[f46665ee4172e9d73044bd42b2b4feed_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/f46665ee4172e9d73044bd42b2b4feed_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/f46665ee4172e9d73044bd42b2b4feed_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:460;s:6:"height";i:651;s:4:"file";s:47:"2018/12/f46665ee4172e9d73044bd42b2b4feed_hd.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-460x550.jpg";s:5:"width";i:460;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-460x550.jpg";s:5:"width";i:460;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-460x480.jpg";s:5:"width";i:460;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:47:"f46665ee4172e9d73044bd42b2b4feed_hd-460x335.jpg";s:5:"width";i:460;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>wolfgang-hasselmann-1239322-unsplash</title>
		<link>http://yx.telstudy.xyz/wolfgang-hasselmann-1239322-unsplash/</link>
		<pubDate>Fri, 21 Dec 2018 15:23:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/wolfgang-hasselmann-1239322-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 15:23:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-21 15:23:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wolfgang-hasselmann-1239322-unsplash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/wolfgang-hasselmann-1239322-unsplash.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/wolfgang-hasselmann-1239322-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3872;s:6:"height";i:2592;s:4:"file";s:48:"2018/12/wolfgang-hasselmann-1239322-unsplash.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-300x201.jpg";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-768x514.jpg";s:5:"width";i:768;s:6:"height";i:514;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:49:"wolfgang-hasselmann-1239322-unsplash-1024x685.jpg";s:5:"width";i:1024;s:6:"height";i:685;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:49:"wolfgang-hasselmann-1239322-unsplash-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:49:"wolfgang-hasselmann-1239322-unsplash-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:48:"wolfgang-hasselmann-1239322-unsplash-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>photo-1545266317-74bc4633774d</title>
		<link>http://yx.telstudy.xyz/photo-1545266317-74bc4633774d/</link>
		<pubDate>Fri, 21 Dec 2018 15:23:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/photo-1545266317-74bc4633774d.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 15:23:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-21 15:23:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo-1545266317-74bc4633774d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/photo-1545266317-74bc4633774d.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/photo-1545266317-74bc4633774d.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1350;s:6:"height";i:900;s:4:"file";s:41:"2018/12/photo-1545266317-74bc4633774d.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:42:"photo-1545266317-74bc4633774d-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:42:"photo-1545266317-74bc4633774d-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:42:"photo-1545266317-74bc4633774d-1350x550.jpg";s:5:"width";i:1350;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:41:"photo-1545266317-74bc4633774d-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[adonis]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>chuttersnap-800662-unsplash</title>
		<link>http://yx.telstudy.xyz/chuttersnap-800662-unsplash/</link>
		<pubDate>Sun, 23 Dec 2018 14:02:15 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/chuttersnap-800662-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 14:02:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 14:02:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[chuttersnap-800662-unsplash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/chuttersnap-800662-unsplash.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/chuttersnap-800662-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:5742;s:6:"height";i:3833;s:4:"file";s:39:"2018/12/chuttersnap-800662-unsplash.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-768x513.jpg";s:5:"width";i:768;s:6:"height";i:513;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:40:"chuttersnap-800662-unsplash-1024x684.jpg";s:5:"width";i:1024;s:6:"height";i:684;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:40:"chuttersnap-800662-unsplash-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:40:"chuttersnap-800662-unsplash-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:39:"chuttersnap-800662-unsplash-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>photo-1473090549840-057a880803e0</title>
		<link>http://yx.telstudy.xyz/photo-1473090549840-057a880803e0/</link>
		<pubDate>Sun, 23 Dec 2018 14:43:59 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/photo-1473090549840-057a880803e0.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 14:43:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 14:43:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[photo-1473090549840-057a880803e0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/photo-1473090549840-057a880803e0.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/photo-1473090549840-057a880803e0.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:675;s:6:"height";i:900;s:4:"file";s:44:"2018/12/photo-1473090549840-057a880803e0.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-675x550.jpg";s:5:"width";i:675;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-675x550.jpg";s:5:"width";i:675;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:44:"photo-1473090549840-057a880803e0-675x335.jpg";s:5:"width";i:675;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>rawpixel-679092-unsplash</title>
		<link>http://yx.telstudy.xyz/rawpixel-679092-unsplash/</link>
		<pubDate>Sun, 23 Dec 2018 14:54:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/rawpixel-679092-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 14:54:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 14:54:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rawpixel-679092-unsplash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2018/12/rawpixel-679092-unsplash.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/rawpixel-679092-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4000;s:6:"height";i:3104;s:4:"file";s:36:"2018/12/rawpixel-679092-unsplash.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-300x233.jpg";s:5:"width";i:300;s:6:"height";i:233;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-768x596.jpg";s:5:"width";i:768;s:6:"height";i:596;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:37:"rawpixel-679092-unsplash-1024x795.jpg";s:5:"width";i:1024;s:6:"height";i:795;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:37:"rawpixel-679092-unsplash-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:37:"rawpixel-679092-unsplash-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:36:"rawpixel-679092-unsplash-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1421(1)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/09/2019-1-9%e9%9a%8f%e7%ac%94/img_14211/</link>
		<pubDate>Wed, 09 Jan 2019 13:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_14211.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 13:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 13:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_14211]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/IMG_14211.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/IMG_14211.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4032;s:6:"height";i:3024;s:4:"file";s:21:"2019/01/IMG_14211.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"IMG_14211-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"IMG_14211-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_14211-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"IMG_14211-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"IMG_14211-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"IMG_14211-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"IMG_14211-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"IMG_14211-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:21:"IMG_14211-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1422(1)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/09/2019-1-9%e9%9a%8f%e7%ac%94/img_14221/</link>
		<pubDate>Wed, 09 Jan 2019 13:00:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_14221.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 13:00:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 13:00:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_14221]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/IMG_14221.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/IMG_14221.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4032;s:6:"height";i:3024;s:4:"file";s:21:"2019/01/IMG_14221.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"IMG_14221-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"IMG_14221-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_14221-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"IMG_14221-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"IMG_14221-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"IMG_14221-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"IMG_14221-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"IMG_14221-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:21:"IMG_14221-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1423(20190109-180913)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/09/2019-1-9%e9%9a%8f%e7%ac%94/img_142320190109-180913/</link>
		<pubDate>Wed, 09 Jan 2019 13:00:19 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_142320190109-180913.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 13:00:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 13:00:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_142320190109-180913]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/IMG_142320190109-180913.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/IMG_142320190109-180913.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:35:"2019/01/IMG_142320190109-180913.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"IMG_142320190109-180913-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"IMG_142320190109-180913-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:36:"IMG_142320190109-180913-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"IMG_142320190109-180913-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:36:"IMG_142320190109-180913-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:36:"IMG_142320190109-180913-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:35:"IMG_142320190109-180913-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:35:"IMG_142320190109-180913-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:35:"IMG_142320190109-180913-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_1424(20190109-180949)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/09/2019-1-9%e9%9a%8f%e7%ac%94/img_142420190109-180949/</link>
		<pubDate>Wed, 09 Jan 2019 13:00:26 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_142420190109-180949.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 13:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 13:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_142420190109-180949]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/IMG_142420190109-180949.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/IMG_142420190109-180949.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:35:"2019/01/IMG_142420190109-180949.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"IMG_142420190109-180949-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"IMG_142420190109-180949-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:36:"IMG_142420190109-180949-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"IMG_142420190109-180949-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:36:"IMG_142420190109-180949-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:36:"IMG_142420190109-180949-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:35:"IMG_142420190109-180949-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:35:"IMG_142420190109-180949-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:35:"IMG_142420190109-180949-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190111114342</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/11/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8cqsort%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e8%af%a6%e8%a7%a3/qq%e5%9b%be%e7%89%8720190111114342/</link>
		<pubDate>Fri, 11 Jan 2019 03:45:01 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114342.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 03:45:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-11 03:45:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190111114342]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114342.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/QQ图片20190111114342.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:996;s:6:"height";i:179;s:4:"file";s:34:"2019/01/QQ图片20190111114342.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111114342-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190111114342-300x54.png";s:5:"width";i:300;s:6:"height";i:54;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190111114342-768x138.png";s:5:"width";i:768;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111114342-330x179.png";s:5:"width";i:330;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190111114342-640x179.png";s:5:"width";i:640;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190111114342-710x179.png";s:5:"width";i:710;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190111124010</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/11/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8cqsort%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e8%af%a6%e8%a7%a3/qq%e5%9b%be%e7%89%8720190111124010/</link>
		<pubDate>Fri, 11 Jan 2019 04:40:36 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111124010.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 04:40:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-11 04:40:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190111124010]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111124010.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/QQ图片20190111124010.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:859;s:6:"height";i:173;s:4:"file";s:34:"2019/01/QQ图片20190111124010.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111124010-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190111124010-300x60.png";s:5:"width";i:300;s:6:"height";i:60;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190111124010-768x155.png";s:5:"width";i:768;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111124010-330x173.png";s:5:"width";i:330;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190111124010-640x173.png";s:5:"width";i:640;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190111124010-710x173.png";s:5:"width";i:710;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190111114439</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/11/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8cqsort%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e8%af%a6%e8%a7%a3/qq%e5%9b%be%e7%89%8720190111114439/</link>
		<pubDate>Fri, 11 Jan 2019 04:40:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114439.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 04:40:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-11 04:40:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190111114439]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>311</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114439.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/QQ图片20190111114439.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:877;s:6:"height";i:155;s:4:"file";s:34:"2019/01/QQ图片20190111114439.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111114439-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190111114439-300x53.png";s:5:"width";i:300;s:6:"height";i:53;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190111114439-768x136.png";s:5:"width";i:768;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190111114439-330x155.png";s:5:"width";i:330;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190111114439-640x155.png";s:5:"width";i:640;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190111114439-710x155.png";s:5:"width";i:710;s:6:"height";i:155;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/2019-1-12%e9%9a%8f%e7%ac%94/image/</link>
		<pubDate>Sat, 12 Jan 2019 13:07:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 13:07:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 13:07:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:17:"2019/01/image.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"image-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:18:"image-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:18:"image-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:17:"image-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:17:"image-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:17:"image-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/2019-1-12%e9%9a%8f%e7%ac%94/image-2/</link>
		<pubDate>Sat, 12 Jan 2019 13:09:40 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 13:09:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 13:09:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>324</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/01/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:19:"2019/01/image-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-1-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"image-1-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-1-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:20:"image-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:20:"image-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:19:"image-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:19:"image-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:19:"image-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190212135100</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/12/2019-2-11rating-%e9%a2%98%e8%a7%a3/qq%e5%9b%be%e7%89%8720190212135100/</link>
		<pubDate>Tue, 12 Feb 2019 05:51:40 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/02/QQ图片20190212135100.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date><![CDATA[2019-02-12 05:51:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-12 05:51:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190212135100]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>402</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/02/QQ图片20190212135100.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/02/QQ图片20190212135100.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:954;s:6:"height";i:201;s:4:"file";s:34:"2019/02/QQ图片20190212135100.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190212135100-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190212135100-300x63.png";s:5:"width";i:300;s:6:"height";i:63;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190212135100-768x162.png";s:5:"width";i:768;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190212135100-330x201.png";s:5:"width";i:330;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190212135100-640x201.png";s:5:"width";i:640;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190212135100-710x201.png";s:5:"width";i:710;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (1)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-1/</link>
		<pubDate>Sun, 03 Mar 2019 03:14:19 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:14:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:14:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3356;s:6:"height";i:4060;s:4:"file";s:20:"2019/03/carbon-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-1-248x300.png";s:5:"width";i:248;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-1-768x929.png";s:5:"width";i:768;s:6:"height";i:929;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-1-846x1024.png";s:5:"width";i:846;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (2)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-2/</link>
		<pubDate>Sun, 03 Mar 2019 03:18:52 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:18:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:18:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2564;s:6:"height";i:2428;s:4:"file";s:20:"2019/03/carbon-2.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-2-300x284.png";s:5:"width";i:300;s:6:"height";i:284;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-2-768x727.png";s:5:"width";i:768;s:6:"height";i:727;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-2-1024x970.png";s:5:"width";i:1024;s:6:"height";i:970;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-2-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-2-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-2-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-2-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-2-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (3)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-3/</link>
		<pubDate>Sun, 03 Mar 2019 03:20:07 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:20:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:20:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1644;s:6:"height";i:1340;s:4:"file";s:20:"2019/03/carbon-3.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-3-300x245.png";s:5:"width";i:300;s:6:"height";i:245;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-3-768x626.png";s:5:"width";i:768;s:6:"height";i:626;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-3-1024x835.png";s:5:"width";i:1024;s:6:"height";i:835;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-3-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-3-1644x550.png";s:5:"width";i:1644;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-3-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-3-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-3-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (4)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-4/</link>
		<pubDate>Sun, 03 Mar 2019 03:21:03 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:21:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:21:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3188;s:6:"height";i:892;s:4:"file";s:20:"2019/03/carbon-4.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"carbon-4-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-4-768x215.png";s:5:"width";i:768;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-4-1024x287.png";s:5:"width";i:1024;s:6:"height";i:287;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-4-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-4-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-4-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-4-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-4-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (5)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-5/</link>
		<pubDate>Sun, 03 Mar 2019 03:21:30 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:21:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:21:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-5.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-5.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1808;s:6:"height";i:1708;s:4:"file";s:20:"2019/03/carbon-5.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-5-300x283.png";s:5:"width";i:300;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-5-768x726.png";s:5:"width";i:768;s:6:"height";i:726;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-5-1024x967.png";s:5:"width";i:1024;s:6:"height";i:967;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-5-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-5-1808x550.png";s:5:"width";i:1808;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-5-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-5-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-5-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (6)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-6/</link>
		<pubDate>Sun, 03 Mar 2019 03:22:02 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:22:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:22:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-6.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-6.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1604;s:6:"height";i:1792;s:4:"file";s:20:"2019/03/carbon-6.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-6-269x300.png";s:5:"width";i:269;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-6-768x858.png";s:5:"width";i:768;s:6:"height";i:858;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-6-917x1024.png";s:5:"width";i:917;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-6-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-6-1604x550.png";s:5:"width";i:1604;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-6-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-6-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-6-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (7)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-7/</link>
		<pubDate>Sun, 03 Mar 2019 03:22:58 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:22:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:22:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-7.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-7.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1980;s:6:"height";i:1612;s:4:"file";s:20:"2019/03/carbon-7.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-7-300x244.png";s:5:"width";i:300;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-7-768x625.png";s:5:"width";i:768;s:6:"height";i:625;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-7-1024x834.png";s:5:"width";i:1024;s:6:"height";i:834;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-7-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-7-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-7-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-7-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-7-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (9)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-9/</link>
		<pubDate>Sun, 03 Mar 2019 03:23:52 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:23:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:23:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-9.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-9.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2524;s:6:"height";i:4156;s:4:"file";s:20:"2019/03/carbon-9.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-9-182x300.png";s:5:"width";i:182;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"carbon-9-768x1265.png";s:5:"width";i:768;s:6:"height";i:1265;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-9-622x1024.png";s:5:"width";i:622;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-9-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-9-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-9-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-9-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-9-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (8)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-8/</link>
		<pubDate>Sun, 03 Mar 2019 03:24:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:24:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:24:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-8.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-8.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2608;s:6:"height";i:3152;s:4:"file";s:20:"2019/03/carbon-8.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"carbon-8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"carbon-8-248x300.png";s:5:"width";i:248;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"carbon-8-768x928.png";s:5:"width";i:768;s:6:"height";i:928;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"carbon-8-847x1024.png";s:5:"width";i:847;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"carbon-8-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"carbon-8-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"carbon-8-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"carbon-8-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:20:"carbon-8-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (10)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-10/</link>
		<pubDate>Sun, 03 Mar 2019 03:25:04 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-10.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:25:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:25:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-10.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-10.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1980;s:6:"height";i:2336;s:4:"file";s:21:"2019/03/carbon-10.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"carbon-10-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"carbon-10-254x300.png";s:5:"width";i:254;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"carbon-10-768x906.png";s:5:"width";i:768;s:6:"height";i:906;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"carbon-10-868x1024.png";s:5:"width";i:868;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"carbon-10-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"carbon-10-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"carbon-10-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"carbon-10-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:21:"carbon-10-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon/</link>
		<pubDate>Sun, 03 Mar 2019 07:57:39 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 07:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 07:57:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4096;s:6:"height";i:3612;s:4:"file";s:18:"2019/03/carbon.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"carbon-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"carbon-300x265.png";s:5:"width";i:300;s:6:"height";i:265;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"carbon-768x677.png";s:5:"width";i:768;s:6:"height";i:677;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"carbon-1024x903.png";s:5:"width";i:1024;s:6:"height";i:903;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:19:"carbon-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:19:"carbon-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:18:"carbon-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:18:"carbon-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:18:"carbon-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (1)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-1-2/</link>
		<pubDate>Sun, 03 Mar 2019 07:58:15 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 07:58:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 07:58:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-1-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-1-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2768;s:6:"height";i:2796;s:4:"file";s:22:"2019/03/carbon-1-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"carbon-1-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"carbon-1-1-297x300.png";s:5:"width";i:297;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"carbon-1-1-768x776.png";s:5:"width";i:768;s:6:"height";i:776;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"carbon-1-1-1014x1024.png";s:5:"width";i:1014;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"carbon-1-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"carbon-1-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"carbon-1-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"carbon-1-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:22:"carbon-1-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (2)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-2-2/</link>
		<pubDate>Sun, 03 Mar 2019 08:18:53 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-2-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 08:18:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 08:18:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-2-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-2-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4096;s:6:"height";i:3696;s:4:"file";s:22:"2019/03/carbon-2-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"carbon-2-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"carbon-2-1-300x271.png";s:5:"width";i:300;s:6:"height";i:271;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"carbon-2-1-768x693.png";s:5:"width";i:768;s:6:"height";i:693;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"carbon-2-1-1024x924.png";s:5:"width";i:1024;s:6:"height";i:924;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"carbon-2-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"carbon-2-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"carbon-2-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"carbon-2-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:22:"carbon-2-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (3)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-3-2/</link>
		<pubDate>Sun, 03 Mar 2019 08:19:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-3-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 08:19:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 08:19:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-3-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-3-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2048;s:6:"height";i:1806;s:4:"file";s:22:"2019/03/carbon-3-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"carbon-3-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"carbon-3-1-300x265.png";s:5:"width";i:300;s:6:"height";i:265;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"carbon-3-1-768x677.png";s:5:"width";i:768;s:6:"height";i:677;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"carbon-3-1-1024x903.png";s:5:"width";i:1024;s:6:"height";i:903;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"carbon-3-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"carbon-3-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"carbon-3-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"carbon-3-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:22:"carbon-3-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (4)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-4-2/</link>
		<pubDate>Sun, 03 Mar 2019 08:20:10 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 08:20:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 08:20:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-4-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-4-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4096;s:6:"height";i:3612;s:4:"file";s:22:"2019/03/carbon-4-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"carbon-4-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"carbon-4-1-300x265.png";s:5:"width";i:300;s:6:"height";i:265;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"carbon-4-1-768x677.png";s:5:"width";i:768;s:6:"height";i:677;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"carbon-4-1-1024x903.png";s:5:"width";i:1024;s:6:"height";i:903;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"carbon-4-1-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"carbon-4-1-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"carbon-4-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"carbon-4-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:22:"carbon-4-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>carbon (4)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/carbon-4-3/</link>
		<pubDate>Sun, 03 Mar 2019 08:25:18 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 08:25:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 08:25:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[carbon-4-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>436</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/carbon-4-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4096;s:6:"height";i:3612;s:4:"file";s:22:"2019/03/carbon-4-2.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"carbon-4-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"carbon-4-2-300x265.png";s:5:"width";i:300;s:6:"height";i:265;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"carbon-4-2-768x677.png";s:5:"width";i:768;s:6:"height";i:677;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"carbon-4-2-1024x903.png";s:5:"width";i:1024;s:6:"height";i:903;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"carbon-4-2-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"carbon-4-2-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"carbon-4-2-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"carbon-4-2-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:22:"carbon-4-2-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://yx.telstudy.xyz/preview/</link>
		<pubDate>Thu, 07 Mar 2019 23:00:43 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date><![CDATA[2019-03-07 23:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 23:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/preview.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:920;s:6:"height";i:920;s:4:"file";s:19:"2019/03/preview.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"preview-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"preview-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:19:"preview-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:19:"preview-920x550.jpg";s:5:"width";i:920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:19:"preview-920x550.jpg";s:5:"width";i:920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:19:"preview-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:19:"preview-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:19:"preview-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>无标题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/24/max-sum-plus-plus-hdu-1024/%e6%97%a0%e6%a0%87%e9%a2%98/</link>
		<pubDate>Sun, 24 Mar 2019 07:18:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/无标题.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>475</wp:post_id>
		<wp:post_date><![CDATA[2019-03-24 07:18:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-24 07:18:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e6%a0%87%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>474</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/无标题.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/无标题.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1152;s:6:"height";i:648;s:4:"file";s:21:"2019/03/无标题.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"无标题-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"无标题-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"无标题-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"无标题-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"无标题-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"无标题-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"无标题-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"无标题-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:21:"无标题-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://yx.telstudy.xyz/preview-2/</link>
		<pubDate>Tue, 26 Mar 2019 11:09:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date><![CDATA[2019-03-26 11:09:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-26 11:09:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/preview-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:768;s:6:"height";i:768;s:4:"file";s:21:"2019/03/preview-1.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"preview-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"preview-1-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"preview-1-768x550.jpg";s:5:"width";i:768;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"preview-1-768x550.jpg";s:5:"width";i:768;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"preview-1-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"preview-1-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:21:"preview-1-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190326204615</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/26/p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f/qq%e5%9b%be%e7%89%8720190326204615/</link>
		<pubDate>Tue, 26 Mar 2019 12:46:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204615.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date><![CDATA[2019-03-26 12:46:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-26 12:46:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190326204615]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>489</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204615.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/QQ图片20190326204615.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:849;s:6:"height";i:98;s:4:"file";s:34:"2019/03/QQ图片20190326204615.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"QQ图片20190326204615-150x98.png";s:5:"width";i:150;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190326204615-300x35.png";s:5:"width";i:300;s:6:"height";i:35;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:33:"QQ图片20190326204615-768x89.png";s:5:"width";i:768;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:33:"QQ图片20190326204615-330x98.png";s:5:"width";i:330;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:33:"QQ图片20190326204615-640x98.png";s:5:"width";i:640;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:33:"QQ图片20190326204615-710x98.png";s:5:"width";i:710;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190326204659</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/26/p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f/qq%e5%9b%be%e7%89%8720190326204659/</link>
		<pubDate>Tue, 26 Mar 2019 12:47:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204659.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date><![CDATA[2019-03-26 12:47:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-26 12:47:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190326204659]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>489</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204659.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/QQ图片20190326204659.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1013;s:6:"height";i:122;s:4:"file";s:34:"2019/03/QQ图片20190326204659.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190326204659-150x122.png";s:5:"width";i:150;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190326204659-300x36.png";s:5:"width";i:300;s:6:"height";i:36;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:33:"QQ图片20190326204659-768x92.png";s:5:"width";i:768;s:6:"height";i:92;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190326204659-330x122.png";s:5:"width";i:330;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190326204659-640x122.png";s:5:"width";i:640;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190326204659-710x122.png";s:5:"width";i:710;s:6:"height";i:122;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://yx.telstudy.xyz/preview-3/</link>
		<pubDate>Sun, 31 Mar 2019 04:59:54 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 04:59:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 04:59:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/preview-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1043;s:6:"height";i:1043;s:4:"file";s:21:"2019/03/preview-2.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"preview-2-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"preview-2-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"preview-2-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"preview-2-1043x550.jpg";s:5:"width";i:1043;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"preview-2-1043x550.jpg";s:5:"width";i:1043;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"preview-2-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"preview-2-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:21:"preview-2-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview2</title>
		<link>http://yx.telstudy.xyz/preview2/</link>
		<pubDate>Sun, 31 Mar 2019 05:04:52 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 05:04:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 05:04:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/03/preview2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/preview2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:864;s:6:"height";i:864;s:4:"file";s:20:"2019/03/preview2.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"preview2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"preview2-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"preview2-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:20:"preview2-864x550.jpg";s:5:"width";i:864;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:20:"preview2-864x550.jpg";s:5:"width";i:864;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"preview2-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"preview2-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:20:"preview2-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190411084657</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/11/p1006-%e4%bc%a0%e7%ba%b8%e6%9d%a1%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92dp%ef%bc%89/qq%e5%9b%be%e7%89%8720190411084657/</link>
		<pubDate>Thu, 11 Apr 2019 00:50:36 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411084657.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>531</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 00:50:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 00:50:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190411084657]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>530</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411084657.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/QQ图片20190411084657.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:845;s:6:"height";i:485;s:4:"file";s:34:"2019/04/QQ图片20190411084657.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190411084657-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190411084657-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190411084657-768x441.png";s:5:"width";i:768;s:6:"height";i:441;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190411084657-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190411084657-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190411084657-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190411085249</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/11/p1006-%e4%bc%a0%e7%ba%b8%e6%9d%a1%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92dp%ef%bc%89/qq%e5%9b%be%e7%89%8720190411085249/</link>
		<pubDate>Thu, 11 Apr 2019 00:55:22 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411085249.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 00:55:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 00:55:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190411085249]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>530</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411085249.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/QQ图片20190411085249.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:687;s:6:"height";i:431;s:4:"file";s:34:"2019/04/QQ图片20190411085249.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190411085249-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190411085249-300x188.png";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190411085249-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190411085249-640x431.png";s:5:"width";i:640;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190411085249-687x335.png";s:5:"width";i:687;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://yx.telstudy.xyz/preview-4/</link>
		<pubDate>Thu, 11 Apr 2019 11:04:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 11:04:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 11:04:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/preview.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1079;s:6:"height";i:1079;s:4:"file";s:19:"2019/04/preview.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"preview-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"preview-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:19:"preview-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"preview-1024x1024.jpg";s:5:"width";i:1024;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:20:"preview-1079x550.jpg";s:5:"width";i:1079;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:20:"preview-1079x550.jpg";s:5:"width";i:1079;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:19:"preview-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:19:"preview-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:19:"preview-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview</title>
		<link>http://yx.telstudy.xyz/preview-5/</link>
		<pubDate>Sun, 21 Apr 2019 13:44:28 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>554</wp:post_id>
		<wp:post_date><![CDATA[2019-04-21 13:44:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-21 13:44:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/preview-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:300;s:4:"file";s:21:"2019/04/preview-1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"preview-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"preview-1-300x220.jpg";s:5:"width";i:300;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[activello]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>preview2</title>
		<link>http://yx.telstudy.xyz/preview2-2/</link>
		<pubDate>Sun, 21 Apr 2019 13:44:57 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>555</wp:post_id>
		<wp:post_date><![CDATA[2019-04-21 13:44:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-21 13:44:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preview2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/preview2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/preview2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:864;s:6:"height";i:864;s:4:"file";s:20:"2019/04/preview2.jpg";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"preview2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"preview2-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"preview2-768x768.jpg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:20:"preview2-864x550.jpg";s:5:"width";i:864;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:20:"preview2-864x550.jpg";s:5:"width";i:864;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"preview2-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"preview2-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:20:"preview2-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>temp1</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/28/p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f-2/temp1/</link>
		<pubDate>Sun, 28 Apr 2019 12:26:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/temp1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date><![CDATA[2019-04-28 12:26:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-28 12:26:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[temp1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>559</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/temp1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/temp1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1152;s:6:"height";i:648;s:4:"file";s:17:"2019/04/temp1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"temp1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"temp1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"temp1-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"temp1-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:18:"temp1-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:18:"temp1-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:17:"temp1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:17:"temp1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:17:"temp1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190428204848</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/28/%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%a2%98%e7%9b%ae%ef%bc%9ap1598-%e5%9e%82%e7%9b%b4%e6%9f%b1%e7%8a%b6%e5%9b%be-p1308-%e7%bb%9f%e8%ae%a1%e5%8d%95%e8%af%8d%e6%95%b0/qq%e5%9b%be%e7%89%8720190428204848/</link>
		<pubDate>Sun, 28 Apr 2019 12:49:33 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204848.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>567</wp:post_id>
		<wp:post_date><![CDATA[2019-04-28 12:49:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-28 12:49:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190428204848]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>566</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204848.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/QQ图片20190428204848.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:904;s:6:"height";i:215;s:4:"file";s:34:"2019/04/QQ图片20190428204848.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190428204848-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190428204848-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190428204848-768x183.png";s:5:"width";i:768;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190428204848-330x215.png";s:5:"width";i:330;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190428204848-640x215.png";s:5:"width";i:640;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190428204848-710x215.png";s:5:"width";i:710;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190428204907</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/28/%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%a2%98%e7%9b%ae%ef%bc%9ap1598-%e5%9e%82%e7%9b%b4%e6%9f%b1%e7%8a%b6%e5%9b%be-p1308-%e7%bb%9f%e8%ae%a1%e5%8d%95%e8%af%8d%e6%95%b0/qq%e5%9b%be%e7%89%8720190428204907/</link>
		<pubDate>Sun, 28 Apr 2019 12:50:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204907.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>568</wp:post_id>
		<wp:post_date><![CDATA[2019-04-28 12:50:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-28 12:50:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190428204907]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>566</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204907.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/QQ图片20190428204907.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:839;s:6:"height";i:537;s:4:"file";s:34:"2019/04/QQ图片20190428204907.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190428204907-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190428204907-300x192.png";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190428204907-768x492.png";s:5:"width";i:768;s:6:"height";i:492;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190428204907-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190428204907-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190428204907-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>无标题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/03/p1028-%e6%95%b0%e7%9a%84%e8%ae%a1%e7%ae%97/%e6%97%a0%e6%a0%87%e9%a2%98-2/</link>
		<pubDate>Fri, 03 May 2019 12:36:51 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date><![CDATA[2019-05-03 12:36:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-03 12:36:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e6%a0%87%e9%a2%98-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>571</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/无标题.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1152;s:6:"height";i:648;s:4:"file";s:21:"2019/05/无标题.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"无标题-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"无标题-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"无标题-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"无标题-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"无标题-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"无标题-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"无标题-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"无标题-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:21:"无标题-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190519113710</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/19/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e5%9b%9b%e7%ab%a0/qq%e5%9b%be%e7%89%8720190519113710/</link>
		<pubDate>Sun, 19 May 2019 03:37:39 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190519113710.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>588</wp:post_id>
		<wp:post_date><![CDATA[2019-05-19 03:37:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-19 03:37:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190519113710]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>587</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190519113710.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/QQ图片20190519113710.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:503;s:4:"file";s:34:"2019/05/QQ图片20190519113710.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190519113710-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190519113710-300x201.png";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190519113710-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190519113710-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190519113710-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>无标题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/26/594/%e6%97%a0%e6%a0%87%e9%a2%98-3/</link>
		<pubDate>Sun, 26 May 2019 06:18:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>595</wp:post_id>
		<wp:post_date><![CDATA[2019-05-26 06:18:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-26 06:18:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e6%a0%87%e9%a2%98-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>594</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/无标题-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1152;s:6:"height";i:648;s:4:"file";s:23:"2019/05/无标题-1.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"无标题-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"无标题-1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"无标题-1-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"无标题-1-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:24:"无标题-1-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:24:"无标题-1-1152x550.png";s:5:"width";i:1152;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:23:"无标题-1-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:23:"无标题-1-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:23:"无标题-1-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190526154518</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/26/%e7%9c%81%e8%b5%9b%e8%a1%a5%e9%a2%98-k%e9%a2%98%e6%95%b0%e8%ae%bahappy-equation/qq%e5%9b%be%e7%89%8720190526154518/</link>
		<pubDate>Sun, 26 May 2019 07:46:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190526154518.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>603</wp:post_id>
		<wp:post_date><![CDATA[2019-05-26 07:46:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-26 07:46:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190526154518]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>602</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190526154518.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/QQ图片20190526154518.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:548;s:6:"height";i:533;s:4:"file";s:34:"2019/05/QQ图片20190526154518.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190526154518-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190526154518-300x292.png";s:5:"width";i:300;s:6:"height";i:292;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190526154518-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:34:"QQ图片20190526154518-548x480.png";s:5:"width";i:548;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:34:"QQ图片20190526154518-548x335.png";s:5:"width";i:548;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>无标题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/21/p1036-%e9%80%89%e6%95%b0%ef%bc%88%e9%80%92%e5%bd%92%ef%bc%89/%e6%97%a0%e6%a0%87%e9%a2%98-4/</link>
		<pubDate>Sun, 21 Jul 2019 12:37:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/07/无标题.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>630</wp:post_id>
		<wp:post_date><![CDATA[2019-07-21 12:37:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-21 12:37:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e6%a0%87%e9%a2%98-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>629</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/07/无标题.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/无标题.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1214;s:6:"height";i:572;s:4:"file";s:21:"2019/07/无标题.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"无标题-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"无标题-300x141.png";s:5:"width";i:300;s:6:"height";i:141;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"无标题-768x362.png";s:5:"width";i:768;s:6:"height";i:362;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"无标题-1024x482.png";s:5:"width";i:1024;s:6:"height";i:482;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"无标题-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"无标题-1214x550.png";s:5:"width";i:1214;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"无标题-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"无标题-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:21:"无标题-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_2928</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/21/miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95/img_2928/</link>
		<pubDate>Sun, 21 Jul 2019 15:01:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/07/IMG_2928.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date><![CDATA[2019-07-21 15:01:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-21 15:01:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_2928]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>632</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/07/IMG_2928.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/IMG_2928.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:20:"2019/07/IMG_2928.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_2928-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_2928-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_2928-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_2928-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:21:"IMG_2928-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:21:"IMG_2928-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:20:"IMG_2928-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:20:"IMG_2928-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:20:"IMG_2928-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>20180902152616155</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/21/miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95/attachment/20180902152616155/</link>
		<pubDate>Sun, 21 Jul 2019 15:13:40 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/07/20180902152616155.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>636</wp:post_id>
		<wp:post_date><![CDATA[2019-07-21 15:13:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-21 15:13:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20180902152616155]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>632</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/07/20180902152616155.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/20180902152616155.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:727;s:6:"height";i:768;s:4:"file";s:29:"2019/07/20180902152616155.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"20180902152616155-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"20180902152616155-284x300.jpg";s:5:"width";i:284;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:29:"20180902152616155-727x550.jpg";s:5:"width";i:727;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:29:"20180902152616155-727x550.jpg";s:5:"width";i:727;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:29:"20180902152616155-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:29:"20180902152616155-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:29:"20180902152616155-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-preview.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-preview-jpg/</link>
		<pubDate>Fri, 09 Aug 2019 16:29:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>655</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 16:29:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 16:29:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-preview-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/cropped-preview.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:27:"2019/04/cropped-preview.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"cropped-preview-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"cropped-preview-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:27:"cropped-preview-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:27:"cropped-preview-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:27:"cropped-preview-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:25:"cropped-preview-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>33327178-1-16</title>
		<link>http://yx.telstudy.xyz/33327178-1-16/</link>
		<pubDate>Fri, 09 Aug 2019 16:32:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/33327178-1-16.mp4</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 16:32:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 16:32:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[33327178-1-16]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/33327178-1-16.mp4]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/33327178-1-16.mp4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{s:8:"filesize";i:32894120;s:9:"mime_type";s:9:"video/mp4";s:6:"length";i:250;s:16:"length_formatted";s:4:"4:10";s:5:"width";i:640;s:6:"height";i:360;s:10:"fileformat";s:3:"mp4";s:10:"dataformat";s:9:"quicktime";s:5:"audio";a:7:{s:10:"dataformat";s:3:"mp4";s:5:"codec";s:19:"ISO/IEC 14496-3 AAC";s:11:"sample_rate";d:44100;s:8:"channels";i:2;s:15:"bits_per_sample";i:16;s:8:"lossless";b:0;s:11:"channelmode";s:6:"stereo";}s:17:"created_timestamp";i:-2082844800;}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-preview-1.jpg</title>
		<link>http://yx.telstudy.xyz/cropped-preview-1-jpg/</link>
		<pubDate>Fri, 09 Aug 2019 16:44:15 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>661</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 16:44:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 16:44:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-preview-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/04/cropped-preview-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/cropped-preview-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:300;s:6:"height";i:94;s:4:"file";s:29:"2019/04/cropped-preview-1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"cropped-preview-1-150x94.jpg";s:5:"width";i:150;s:6:"height";i:94;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:28:"cropped-preview-1-300x94.jpg";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:554;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_ascendant]]></wp:meta_key>
		<wp:meta_value><![CDATA[1565369076]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[ascendant]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_3136</title>
		<link>http://yx.telstudy.xyz/img_3136/</link>
		<pubDate>Sat, 10 Aug 2019 10:34:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_3136.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>674</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 10:34:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:34:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_3136]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_3136.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/IMG_3136.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1242;s:6:"height";i:1680;s:4:"file";s:20:"2019/08/IMG_3136.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_3136-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_3136-222x300.jpg";s:5:"width";i:222;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_3136-768x1039.jpg";s:5:"width";i:768;s:6:"height";i:1039;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_3136-757x1024.jpg";s:5:"width";i:757;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_3138</title>
		<link>http://yx.telstudy.xyz/img_3138/</link>
		<pubDate>Sat, 10 Aug 2019 10:34:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_3138.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 10:34:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 10:34:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_3138]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_3138.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/IMG_3138.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:900;s:6:"height";i:1350;s:4:"file";s:20:"2019/08/IMG_3138.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_3138-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_3138-200x300.jpg";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_3138-768x1152.jpg";s:5:"width";i:768;s:6:"height";i:1152;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_3138-683x1024.jpg";s:5:"width";i:683;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>F2131A28426F6716251BEDE87D2FD9B1</title>
		<link>http://yx.telstudy.xyz/f2131a28426f6716251bede87d2fd9b1/</link>
		<pubDate>Sat, 10 Aug 2019 14:44:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/F2131A28426F6716251BEDE87D2FD9B1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>684</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 14:44:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 14:44:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[f2131a28426f6716251bede87d2fd9b1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/F2131A28426F6716251BEDE87D2FD9B1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/F2131A28426F6716251BEDE87D2FD9B1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1029;s:6:"height";i:1079;s:4:"file";s:44:"2019/08/F2131A28426F6716251BEDE87D2FD9B1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"F2131A28426F6716251BEDE87D2FD9B1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"F2131A28426F6716251BEDE87D2FD9B1-286x300.jpg";s:5:"width";i:286;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:44:"F2131A28426F6716251BEDE87D2FD9B1-768x805.jpg";s:5:"width";i:768;s:6:"height";i:805;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:45:"F2131A28426F6716251BEDE87D2FD9B1-977x1024.jpg";s:5:"width";i:977;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_2863</title>
		<link>http://yx.telstudy.xyz/img_2863/</link>
		<pubDate>Sun, 11 Aug 2019 02:34:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_2863.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 02:34:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 02:34:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_2863]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_2863.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/IMG_2863.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:700;s:4:"file";s:20:"2019/08/IMG_2863.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_2863-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_2863-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_2864</title>
		<link>http://yx.telstudy.xyz/img_2864/</link>
		<pubDate>Sun, 11 Aug 2019 02:34:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_2864.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 02:34:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 02:34:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_2864]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/08/IMG_2864.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/IMG_2864.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:700;s:4:"file";s:20:"2019/08/IMG_2864.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_2864-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_2864-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>v2-33a947c71ad62b254cab62e5364d2813_b</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/02/%e4%b9%9d%e5%a4%a7%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95%e7%9a%84%e5%8e%86%e5%8f%b2%e4%b8%8e%e8%af%a6%e8%a7%a3/v2-33a947c71ad62b254cab62e5364d2813_b/</link>
		<pubDate>Mon, 02 Sep 2019 01:19:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/v2-33a947c71ad62b254cab62e5364d2813_b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>719</wp:post_id>
		<wp:post_date><![CDATA[2019-09-02 01:19:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-02 01:19:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2-33a947c71ad62b254cab62e5364d2813_b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>715</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/v2-33a947c71ad62b254cab62e5364d2813_b.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/v2-33a947c71ad62b254cab62e5364d2813_b.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:187;s:4:"file";s:49:"2019/09/v2-33a947c71ad62b254cab62e5364d2813_b.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"v2-33a947c71ad62b254cab62e5364d2813_b-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:48:"v2-33a947c71ad62b254cab62e5364d2813_b-300x94.jpg";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190903110727</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/qq%e5%9b%be%e7%89%8720190903110727/</link>
		<pubDate>Tue, 03 Sep 2019 03:03:42 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190903110727.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>737</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 03:03:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 03:03:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190903110727]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190903110727.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/QQ图片20190903110727.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:559;s:6:"height";i:608;s:4:"file";s:34:"2019/09/QQ图片20190903110727.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190903110727-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190903110727-276x300.png";s:5:"width";i:276;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/attachment/1/</link>
		<pubDate>Tue, 03 Sep 2019 03:08:04 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>739</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 03:08:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 03:08:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:643;s:6:"height";i:593;s:4:"file";s:13:"2019/09/1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:13:"1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:13:"1-300x277.png";s:5:"width";i:300;s:6:"height";i:277;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>《Java程序语言设计》实验报告（模板）</title>
		<link>http://yx.telstudy.xyz/%e3%80%8ajava%e7%a8%8b%e5%ba%8f%e8%af%ad%e8%a8%80%e8%ae%be%e8%ae%a1%e3%80%8b%e5%ae%9e%e9%aa%8c%e6%8a%a5%e5%91%8a%ef%bc%88%e6%a8%a1%e6%9d%bf%ef%bc%89/</link>
		<pubDate>Tue, 03 Sep 2019 03:17:20 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/《Java程序语言设计》实验报告（模板）.docx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 03:17:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 03:17:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8ajava%e7%a8%8b%e5%ba%8f%e8%af%ad%e8%a8%80%e8%ae%be%e8%ae%a1%e3%80%8b%e5%ae%9e%e9%aa%8c%e6%8a%a5%e5%91%8a%ef%bc%88%e6%a8%a1%e6%9d%bf%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/《Java程序语言设计》实验报告（模板）.docx]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/《Java程序语言设计》实验报告（模板）.docx]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_3314</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/08/%e5%bd%93%e5%91%bd%e8%bf%90%e9%9c%80%e8%a6%81%e4%bd%a0%e4%bb%ac%e5%8e%bb%e9%80%86%e9%a3%8e%e9%a3%9e%e7%bf%94%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e5%b0%b1%e4%b8%8d%e8%83%bd%e9%9a%8f%e9%a3%8e%e8%80%8c/img_3314/</link>
		<pubDate>Sun, 08 Sep 2019 09:13:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3314.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>746</wp:post_id>
		<wp:post_date><![CDATA[2019-09-08 09:13:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-08 09:13:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_3314]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>745</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3314.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/IMG_3314.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1440;s:6:"height";i:1080;s:4:"file";s:20:"2019/09/IMG_3314.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_3314-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_3314-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"IMG_3314-768x576.jpg";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_3314-1024x768.jpg";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>IMG_3339</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/08/%e5%bd%93%e5%91%bd%e8%bf%90%e9%9c%80%e8%a6%81%e4%bd%a0%e4%bb%ac%e5%8e%bb%e9%80%86%e9%a3%8e%e9%a3%9e%e7%bf%94%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e5%b0%b1%e4%b8%8d%e8%83%bd%e9%9a%8f%e9%a3%8e%e8%80%8c/img_3339/</link>
		<pubDate>Sun, 08 Sep 2019 09:13:20 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3339.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>747</wp:post_id>
		<wp:post_date><![CDATA[2019-09-08 09:13:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-08 09:13:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img_3339]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>745</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3339.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/IMG_3339.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:20:"2019/09/IMG_3339.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IMG_3339-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"IMG_3339-225x300.jpg";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:21:"IMG_3339-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"IMG_3339-768x1024.jpg";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190908172553</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/08/%e5%bd%93%e5%91%bd%e8%bf%90%e9%9c%80%e8%a6%81%e4%bd%a0%e4%bb%ac%e5%8e%bb%e9%80%86%e9%a3%8e%e9%a3%9e%e7%bf%94%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e5%b0%b1%e4%b8%8d%e8%83%bd%e9%9a%8f%e9%a3%8e%e8%80%8c/qq%e5%9b%be%e7%89%8720190908172553/</link>
		<pubDate>Sun, 08 Sep 2019 09:26:06 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190908172553.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>753</wp:post_id>
		<wp:post_date><![CDATA[2019-09-08 09:26:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-08 09:26:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190908172553]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>745</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190908172553.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/QQ图片20190908172553.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:626;s:6:"height";i:775;s:4:"file";s:34:"2019/09/QQ图片20190908172553.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190908172553-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190908172553-242x300.png";s:5:"width";i:242;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1625007-20190520174225263-1644602916</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91%ef%bc%88%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0%ef%bc%89%e6%80%bb%e7%bb%93/1625007-20190520174225263-1644602916/</link>
		<pubDate>Mon, 09 Sep 2019 00:28:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520174225263-1644602916.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>757</wp:post_id>
		<wp:post_date><![CDATA[2019-09-09 00:28:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-09 00:28:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1625007-20190520174225263-1644602916]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>730</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520174225263-1644602916.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/1625007-20190520174225263-1644602916.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:686;s:6:"height";i:470;s:4:"file";s:48:"2019/09/1625007-20190520174225263-1644602916.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:48:"1625007-20190520174225263-1644602916-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:48:"1625007-20190520174225263-1644602916-300x206.png";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1625007-20190520190310856-2026716472</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91%ef%bc%88%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0%ef%bc%89%e6%80%bb%e7%bb%93/1625007-20190520190310856-2026716472/</link>
		<pubDate>Mon, 09 Sep 2019 01:34:22 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520190310856-2026716472.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>763</wp:post_id>
		<wp:post_date><![CDATA[2019-09-09 01:34:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-09 01:34:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1625007-20190520190310856-2026716472]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>730</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520190310856-2026716472.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/1625007-20190520190310856-2026716472.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:719;s:6:"height";i:476;s:4:"file";s:48:"2019/09/1625007-20190520190310856-2026716472.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:48:"1625007-20190520190310856-2026716472-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:48:"1625007-20190520190310856-2026716472-300x199.png";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>33CD4630-401C-4506-A5BA-2C7FEA339538</title>
		<link>http://yx.telstudy.xyz/index.php/shuoshuo/%e6%80%8e%e4%b9%88%e6%a0%b7%e7%ae%97%e7%b2%be%e9%80%9ajava/33cd4630-401c-4506-a5ba-2c7fea339538/</link>
		<pubDate>Mon, 09 Sep 2019 09:34:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>767</wp:post_id>
		<wp:post_date><![CDATA[2019-09-09 09:34:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-09 09:34:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[33cd4630-401c-4506-a5ba-2c7fea339538]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>766</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:3128;s:4:"file";s:49:"2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"33CD4630-401C-4506-A5BA-2C7FEA339538-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:49:"33CD4630-401C-4506-A5BA-2C7FEA339538-184x300.jpeg";s:5:"width";i:184;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:50:"33CD4630-401C-4506-A5BA-2C7FEA339538-768x1251.jpeg";s:5:"width";i:768;s:6:"height";i:1251;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:50:"33CD4630-401C-4506-A5BA-2C7FEA339538-629x1024.jpeg";s:5:"width";i:629;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Home</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/11/home/</link>
		<pubDate>Tue, 11 Dec 2018 03:47:42 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2018-12-11 03:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-11 03:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[home]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://yx.telstudy.xyz]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/11/24/</link>
		<pubDate>Tue, 11 Dec 2018 03:47:42 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2018-12-11 03:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-11 03:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[24]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/18/%e5%a5%bd%e5%8f%8b%e9%93%be%e6%8e%a5/</link>
		<pubDate>Tue, 18 Dec 2018 15:04:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/index.php/2018/12/18/%e5%a5%bd%e5%8f%8b%e9%93%be%e6%8e%a5/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2018-12-18 15:04:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-18 15:04:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a5%bd%e5%8f%8b%e9%93%be%e6%8e%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/84/</link>
		<pubDate>Wed, 19 Dec 2018 14:58:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/index.php/2018/12/19/84/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 14:58:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 14:58:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/86/</link>
		<pubDate>Wed, 19 Dec 2018 14:58:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/index.php/2018/12/19/86/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 14:58:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 14:58:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/87/</link>
		<pubDate>Wed, 19 Dec 2018 14:58:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/index.php/2018/12/19/87/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 14:58:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 14:58:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/623/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:31 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=623</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>623</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[623]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/624/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=624</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>624</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[624]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/625/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=625</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>625</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[625]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/626/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=626</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>626</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[626]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>二维码</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/16/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e3%80%8apocket-learning%e3%80%8b/%e4%ba%8c%e7%bb%b4%e7%a0%81/</link>
		<pubDate>Mon, 16 Sep 2019 11:05:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/二维码.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>784</wp:post_id>
		<wp:post_date><![CDATA[2019-09-16 11:05:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-16 11:05:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%8c%e7%bb%b4%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>783</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/二维码.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/二维码.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:175;s:6:"height";i:168;s:4:"file";s:21:"2019/09/二维码.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"二维码-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>图片2</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/16/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e3%80%8apocket-learning%e3%80%8b/%e5%9b%be%e7%89%872/</link>
		<pubDate>Mon, 16 Sep 2019 11:19:03 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/图片2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>785</wp:post_id>
		<wp:post_date><![CDATA[2019-09-16 11:19:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-16 11:19:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%be%e7%89%872]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>783</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/图片2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/图片2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:418;s:6:"height";i:740;s:4:"file";s:19:"2019/09/图片2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"图片2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"图片2-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190917111432</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/qq%e5%9b%be%e7%89%8720190917111432/</link>
		<pubDate>Tue, 17 Sep 2019 03:11:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190917111432.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>787</wp:post_id>
		<wp:post_date><![CDATA[2019-09-17 03:11:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-17 03:11:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190917111432]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190917111432.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/QQ图片20190917111432.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1326;s:6:"height";i:781;s:4:"file";s:34:"2019/09/QQ图片20190917111432.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190917111432-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190917111432-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20190917111432-768x452.png";s:5:"width";i:768;s:6:"height";i:452;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:35:"QQ图片20190917111432-1024x603.png";s:5:"width";i:1024;s:6:"height";i:603;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>DU$~~~37@(Z$0]6JX4]@IVC</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/du37z06jx4ivc/</link>
		<pubDate>Tue, 17 Sep 2019 03:32:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/DU37@Z06JX4@IVC.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>791</wp:post_id>
		<wp:post_date><![CDATA[2019-09-17 03:32:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-17 03:32:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[du37z06jx4ivc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/DU37@Z06JX4@IVC.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/DU37@Z06JX4@IVC.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:917;s:6:"height";i:969;s:4:"file";s:27:"2019/09/DU37@Z06JX4@IVC.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"DU37@Z06JX4@IVC-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"DU37@Z06JX4@IVC-284x300.png";s:5:"width";i:284;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"DU37@Z06JX4@IVC-768x812.png";s:5:"width";i:768;s:6:"height";i:812;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/1-2/</link>
		<pubDate>Tue, 24 Sep 2019 03:10:19 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>816</wp:post_id>
		<wp:post_date><![CDATA[2019-09-24 03:10:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-24 03:10:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/1-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:15:"2019/09/1-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"1-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"1-1-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"1-1-768x576.png";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:16:"1-1-1024x768.png";s:5:"width";i:1024;s:6:"height";i:768;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190929113252</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/qq%e5%9b%be%e7%89%8720190929113252/</link>
		<pubDate>Sun, 29 Sep 2019 03:33:34 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190929113252.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>826</wp:post_id>
		<wp:post_date><![CDATA[2019-09-29 03:33:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-29 03:33:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190929113252]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190929113252.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/QQ图片20190929113252.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:339;s:6:"height";i:69;s:4:"file";s:34:"2019/09/QQ图片20190929113252.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"QQ图片20190929113252-150x69.png";s:5:"width";i:150;s:6:"height";i:69;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"QQ图片20190929113252-300x61.png";s:5:"width";i:300;s:6:"height";i:61;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>_6$6ZL)O_VN3H91)PO9)G[9</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/30/%e4%bb%8ebf%e7%ae%97%e6%b3%95%e5%88%b0kmp%e7%ae%97%e6%b3%95%e8%af%a6%e8%a7%a3/_66zlo_vn3h91po9g9/</link>
		<pubDate>Mon, 30 Sep 2019 05:09:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/66ZLO_VN3H91PO9G9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>830</wp:post_id>
		<wp:post_date><![CDATA[2019-09-30 05:09:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-30 05:09:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_66zlo_vn3h91po9g9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>828</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/66ZLO_VN3H91PO9G9.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/66ZLO_VN3H91PO9G9.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:748;s:6:"height";i:178;s:4:"file";s:29:"2019/09/66ZLO_VN3H91PO9G9.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"66ZLO_VN3H91PO9G9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"66ZLO_VN3H91PO9G9-300x71.png";s:5:"width";i:300;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>}T_~SW3(5~0O7KB`}@XI62S</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/11/%e6%95%b0%e8%ae%ba%e5%ad%a6%e4%b9%a0/t_sw350o7kbxi62s/</link>
		<pubDate>Fri, 11 Oct 2019 06:59:28 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/10/T_SW350O7KB@XI62S.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>851</wp:post_id>
		<wp:post_date><![CDATA[2019-10-11 06:59:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-11 06:59:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[t_sw350o7kbxi62s]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/10/T_SW350O7KB@XI62S.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/T_SW350O7KB@XI62S.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:529;s:6:"height";i:88;s:4:"file";s:29:"2019/10/T_SW350O7KB@XI62S.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"T_SW350O7KB@XI62S-150x88.png";s:5:"width";i:150;s:6:"height";i:88;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"T_SW350O7KB@XI62S-300x50.png";s:5:"width";i:300;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>图片1</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/11/%e6%95%b0%e8%ae%ba%e5%ad%a6%e4%b9%a0/%e5%9b%be%e7%89%871/</link>
		<pubDate>Sat, 12 Oct 2019 09:06:18 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/10/图片1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>867</wp:post_id>
		<wp:post_date><![CDATA[2019-10-12 09:06:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-12 09:06:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%be%e7%89%871]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>847</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/10/图片1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/图片1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:843;s:6:"height";i:341;s:4:"file";s:19:"2019/10/图片1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"图片1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"图片1-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"图片1-768x311.png";s:5:"width";i:768;s:6:"height";i:311;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/1-3/</link>
		<pubDate>Tue, 15 Oct 2019 03:40:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>880</wp:post_id>
		<wp:post_date><![CDATA[2019-10-15 03:40:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-15 03:40:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/1-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:542;s:6:"height";i:218;s:4:"file";s:15:"2019/09/1-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"1-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"1-2-300x121.png";s:5:"width";i:300;s:6:"height";i:121;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>个人目录</title>
		<link>http://yx.telstudy.xyz/</link>
		<pubDate>Mon, 10 Dec 2018 13:15:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">告诉你如何看到你想看到的东西 <br />to teach how to look what you want</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">这里分享我的日常生活，编程经验<br />Here I share my daily and programming experience</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} --><!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">我的 qq ：22494749</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">编程语言书籍推荐：<br />Book recommendation: 世间孤独，都是刚好<br /><br />wechat<br />CHEN6969XX</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">csdn  ：<a href="https://blog.csdn.net/qq_43382350"> https://blog.csdn.net/qq_43382350</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color">Programming experience</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} --><!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 13:15:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 13:15:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_768aa3d4ab2e23786717ee4a524d7719]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_768aa3d4ab2e23786717ee4a524d7719]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545178674]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_70f8bab8576ca0b16f129a5d54125d5b]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="3iMJppAfeS"><a href="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/">懒人日记（更新日记）</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/embed/#?secret=3iMJppAfeS" data-secret="3iMJppAfeS" width="600" height="338" title="《懒人日记（更新日记）》—Moonl1ght" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_70f8bab8576ca0b16f129a5d54125d5b]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545305502]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_01f4069e53d9e3d756650dda56caca89]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="yB55IaGI5F"><a href="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/">懒人日记（更新日记）</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/embed/#?secret=yB55IaGI5F" data-secret="yB55IaGI5F" width="600" height="338" title="《懒人日记（更新日记）》—Moonl1ght" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_01f4069e53d9e3d756650dda56caca89]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545302045]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_adb35010872e3c1056cc3de9a6d498e7]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="WfunXubKVS"><a href="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/">懒人日记（更新日记）</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://cbbbbbb.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/embed/#?secret=WfunXubKVS" data-secret="WfunXubKVS" width="600" height="338" title="《懒人日记（更新日记）》—Moonl1ght" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_adb35010872e3c1056cc3de9a6d498e7]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545302208]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1086]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[69]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[giligili_post_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[月光不染是非]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[22494749@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.108.128.12]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-10 10:41:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-10 10:41:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[少年的肩应当担起草长莺飞和清风明月]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1565433698]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1565433698.081763;s:5:"event";s:11:"check-error";s:4:"user";s:7:"cmmmmmm";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[Camera IP Hải Nam]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nellefleck@vegemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://cctvhainam.hatenablog.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[163.172.33.155]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-12 16:33:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-12 16:33:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really when someone doesn't be aware of afterward its up to other 
viewers that they will assist, so here it takes 
place.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1570898025]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1570898025.379151;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571619697.512613;s:5:"event";s:12:"status-trash";s:4:"user";s:7:"cmmmmmm";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1571619697]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>261</wp:comment_id>
			<wp:comment_author><![CDATA[camera dahua full hd]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[leola.martinez@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.youtube.com/channel/UCNxDjyt4Y2FsRt42HTZnd0A</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[163.172.33.155]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-13 01:15:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-13 01:15:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This design is incredible! You obviously know how to keep a reader entertained.
Between your wit and your videos, I was almost moved 
to start my own blog (well, almost...HaHa!) Great job.
I really enjoyed what you had to say, and more than that, how you presented it.
Too cool!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1570929308]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1570929308.238947;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571616652.812346;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"cmmmmmm";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>262</wp:comment_id>
			<wp:comment_author><![CDATA[Maka]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qq@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[223.104.6.57]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-16 08:29:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-16 08:29:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sb傻逼]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1571214556]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571214556.560843;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571214704.641532;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"cmmmmmm";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[giligili_comment_zan]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[giligili_comment_cai]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>263</wp:comment_id>
			<wp:comment_author><![CDATA[九歌]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[qq@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[219.218.31.156]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-21 00:09:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-21 00:09:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[写的很好很详细，继续加油呀！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1571616587]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571616587.629085;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571616628.143955;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"cmmmmmm";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>264</wp:comment_id>
			<wp:comment_author><![CDATA[Camera Hải Nam Đà Nẵng]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[addiecallaghan@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.reddit.com/user/camerawifihdhainam/comments/dgonbw/a_startling_fact_about_surveillance_cameras_over/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[163.172.33.155]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-28 14:33:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-28 14:33:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's remarkable designed for me to have a web page,
which is good in favor of my know-how. thanks admin]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1572273237]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1572273237.810994;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>265</wp:comment_id>
			<wp:comment_author><![CDATA[https://freepornforher.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[merirangel@web.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://biggirlfreeporn.xyz</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[198.12.154.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-08 09:51:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-08 09:51:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seduction and sex the woman holds onto her partner’s arms around 
each other. Cody woman served a few examples of the 
DOS first-line slaves today. Until after few years until his sophomore year in the global commercial sex trade singer explains.
Online Tantra explains the concept of colors of Tantra is completely 
free. Advocates have considered Tantra and frankly flirt with their hands on each others hearts gazing into.
You’ll just have been macho great for a stranger to go to the 
beach. During this course many beginners who have practised meditation and mental 
relaxation so. The lawsuit filed in January a team 
of researchers in Italy who played the GTA games. It's because Harbour is too well that’s simple older 
women who are unable to. Mendel was about 8 years older than 21 who also appeared in my situation really 
struggle. Nearly conquering the entire schools of spiritual sex Tantric sex it allows the 
connection. Agama yoga is a form many short-term relationships 
this is what it takes to have spiritual goals.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1573206665]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1573206665.153778;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Privacy Policy</title>
		<link>http://yx.telstudy.xyz/?page_id=3</link>
		<pubDate>Mon, 10 Dec 2018 13:15:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Our website address is: http://101.132.160.228/wordpress3.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What personal data we collect and why we collect it</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Comments</h3><!-- /wp:heading --><!-- wp:paragraph --><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Media</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Contact forms</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Embedded content from other websites</h3><!-- /wp:heading --><!-- wp:paragraph --><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Analytics</h3><!-- /wp:heading --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where we send your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Your contact information</h2><!-- /wp:heading --><!-- wp:heading --><h2>Additional information</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>How we protect your data</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What data breach procedures we have in place</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What third parties we receive data from</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What automated decision making and/or profiling we do with user data</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Industry regulatory disclosure requirements</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 13:15:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 13:15:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ascendant Backup Settings</title>
		<link>http://yx.telstudy.xyz/?page_id=136</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?page_id=136</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 16:45:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>快速取模法（1）</title>
		<link>http://yx.telstudy.xyz/?p=158</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2017年08月28日 12:23:21&nbsp;<a href="https://me.csdn.net/DBC_121" target="_blank" rel="noreferrer noopener">六小聪</a>&nbsp;阅读数：7364&nbsp;标签：&nbsp;<a href="http://so.csdn.net/so/search/s.do?q=%E5%BF%AB%E9%80%9F%E5%B9%82&amp;t=blog" target="_blank" rel="noreferrer noopener">快速幂</a><a href="http://so.csdn.net/so/search/s.do?q=%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1&amp;t=blog" target="_blank" rel="noreferrer noopener">快速幂取模</a><a href="http://so.csdn.net/so/search/s.do?q=ACM&amp;t=blog" target="_blank" rel="noreferrer noopener">ACM</a><a href="http://so.csdn.net/so/search/s.do?q=%E7%AE%97%E6%B3%95&amp;t=blog" target="_blank" rel="noreferrer noopener">算法</a>&nbsp;更多个人分类：&nbsp;<a href="https://blog.csdn.net/DBC_121/article/category/7116884" target="_blank" rel="noreferrer noopener">ACM算法</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>快速幂取模的用途：</strong>在ACM这类竞赛中，可能会遇到指数型的数据取模问题，这个时候如果直接用int或者long long储存，就</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>有可能会超出计算机整数的存取范围，而导致数据出错。所以我们需要一种方法进行计算。而这种方法就是我们这次要讲到</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>的快速幂取模（简称快速幂）。这种算法在时间和空间上都做了尽可能的优化，所以学会之后，会觉得非常好用。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>快速幂取模的思路：</strong>快速幂实现的最基本的理论就是我们离散课上或者数论中学过的一条公式推出的引理。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>引理：积的取余等于取余的积的取余。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>再在这条引理的基础之上，对指数型数据进行拆分以及合并，从而得到我们用的快速幂算法。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>本文我就不用例题讲解，直接对快速幂进行解析。毕竟快速幂的算法相对简单，而且适用题型较为一致。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>快速幂具体分析：</strong>对a^b进行分析。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于当a和b较小是直接用int或者long存是没有问题的，但是当a和b大到一定程度时，这就不是暴力存就</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以解决的问题了。我们应该怎么去解决这个问题呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在这里我们需要把注意力放在“大”字上面，正是由于a和b过大才导致的问题。所以我们要想办法不断地减</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>小a和b的规模，所谓逐个击破。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>根据上面的那条引理，我们知道了可以把指数拆开，从这个突破口突破。这里我们就不难想到这样一个算法：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">//①a是底数，b是指数，mode是取模数，sum是记录取模的结果int sum = 1; a = a % mode;  for(int i = 1; i &lt;= b; i++){sum = sum * a;}sum = sum % c;</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>这是直接利用的 引理而写出来的代码，这只是单纯的降低的a的规模，但是这还达不到我们的要求，所以我们</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>需要进一步改进算法。（当然还可以继续降低啊的规模，即将循环中的那句换成sum = （sum * a）%mode）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我们已经实现的降低a的规模，所谓我们要想着怎么降低b的规模。我们首先看两个样例：先看b为偶数的样例</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>7^16，mode = 3，我们要怎么进行拆分？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>最基本的拆分是这样的：7*7*7*7*7*7*7*7*7......7，上面的算法只是将其变为2*2*2*2*2*2*2......2，那么怎么减少b的规模呢？你应该有一点感觉了吧。就是两两合并，将（7^16）变成（49^8），这就降低了b的规模，再利用上的算法降低a的规模，最终会变成1 *1*1*1*1*1*1*1。是不是感觉整个数简单了很多。按照这个思路，我们可以多循环几次，从而不断的降低a和b的规模。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>那么b为奇数怎么办呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>其实也很简单，我们只要在偶数算法的基础之上，每次把多出来的这个数跳出来，预先取模再带入即可。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>从而最终得出快速幂的代码：<br></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">long long Mode(long long a, long long b, long long mode){	long long sum = 1;	a = a % mode; 	while (b &gt; 0) {		if (b % 2 == 1)		<em>//判断是否是奇数，是奇数的话将多出来的数事先乘如sum</em>			sum = (sum * a) % mode; 		b /= 2;		a = (a * a) % mode;<em>// 不断的两两合并再取模，减小a和b的规模</em>	}	return sum;}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>当然有时候你可能会碰到用&amp;的运算符的代码实现，其实和这个大致相同，只不过是用&amp;操作符对b的奇偶性进行判断而已</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&amp;的操作符：二进制位中，1 &amp; 1 = 1，其余组合均为0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>附上用&amp;实现的代码：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">long long Mode(long long a, long long b, long long mode){	long long sum = 1;	while (b) {		if (b &amp; 1) {			sum = (sum * a) % mode;			b--;		}		b /= 2;		a = a * a % mode;	}	return sum;}</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>总结：</strong>快速幂虽然是个“小”算法，但是有需要用到它的时候非常有用，所以不能小看它，只要稍加功夫去理解，快速幂</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>还是很好学的，当然一切都需要你在题目中得到锻炼</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 11:46:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>夜过随笔</title>
		<link>http://yx.telstudy.xyz/?p=174</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2018/12/23</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 17:22:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title>Ignatius and the Princess IV</title>
		<link>http://yx.telstudy.xyz/?p=192</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

"OK, you are not too bad, em... But you can never pass the next test." feng5166 says.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers." feng5166 says.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"But what is the characteristic of the special integer?" Ignatius asks.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"The integer will appear at least (N+1)/2 times. If you can't find the right integer, I will kill the Princess, and you will be my dinner, too. Hahahaha....." feng5166 says.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Can you find the special integer for Ignatius?&nbsp;<br>InputThe input contains several test cases. Each test case contains two lines. The first line consists of an odd integer N(1&lt;=N&lt;=999999) which indicate the number of the integers feng5166 will tell our hero. The second line contains the N integers. The input is terminated by the end of file.&nbsp;<br>OutputFor each test case, you have to output only one line which contains the special number you have found.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5
1 3 2 3 3
11
1 1 1 1 1 5 5 5 5 5 5
7
1 1 1 1 1 1 1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3 5 1<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>其实题目是这样</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

题目描述</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">给你n个数字，请你找出出现至少(n+1)/2次的数字。</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>输入</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">本题包含多组数据，请处理到EOF：
每组数据包含两行。 
第一行一个数字N(1&lt;=N&lt;=999999) ，保证N为奇数。 
第二行为N个用空格隔开的整数。</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>输出</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">对于每组数据，输出一行，表示要求找到的那个数<br><br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>垃圾故事那么多</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 08:32:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title>结构体</title>
		<link>http://yx.telstudy.xyz/?p=193</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=193</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 11:05:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title>p26阶层之和</title>
		<link>http://yx.telstudy.xyz/?p=287</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>1.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date><![CDATA[2019-01-04 13:19:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%b4%a0%e6%95%b0%e7%ad%9b"><![CDATA[素数筛]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>题解模板</title>
		<link>http://yx.telstudy.xyz/?p=391</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目链接：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2019-02-07 03:49:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/?p=435</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=435</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>1 函数的参数个数和类型都相同，只是返回值不同，这不是重载函数 T</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>函数重载</em>要求<em>函数的参数个数不同</em>或者<em>参数类型不同</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2  <br>重载函数可以带有默认值参数，但是要注意二义性。 (1分 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

B选项的含义是把X的地址赋给PX,这样 对*PX赋值就能对X赋值了.<br>A、C错在没有赋值<br>D错在类型错误,PX要设为与X同一类型的指针

</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 09:54:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title>P1047 校门外的树（简单模拟）</title>
		<link>http://yx.telstudy.xyz/?p=546</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=546</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:embed {"url":"https://www.luogu.org/problemnew/show/P1047"} -->
<figure class="wp-block-embed"><div class="wp-block-embed__wrapper">
https://www.luogu.org/problemnew/show/P1047
</div></figure>
<!-- /wp:embed -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>546</wp:post_id>
		<wp:post_date><![CDATA[2019-04-16 11:46:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_77c867ba3556741f14c7a51a771fbdfc]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/4/16记</title>
		<link>http://yx.telstudy.xyz/?p=549</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=549</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>        最近一直想要写点东西，但却又碍于没时间（或者说是懒以至于一直没写，想说想写下来的东西蛮多的，可能会有所缺漏，但也总比没写，能让自己欣喜许多吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>首先是做题的一点心得吧：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>        很多时候我总是觉得我的代码与别人的有所不同，他们的思路很清楚，很简单，简单到我感觉若使不见识，大概我这一辈子如若不看，会使终生难以触及的吧，可能有些许自卑，但也却没错。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>       真的不想与别人的差距过大，于是停止了一味的刷题，拼命的去想，去思考，偶然在bilibili看到小岛的 codeforces 实况，真的 tql ，发现她思路真的很清楚，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>        首先快速地读懂题意（我也需要锻炼不翻译而读懂题意的能力，大概如此对一道题目的理解也会更为清楚和直接把），然后想这一道题需要求的是什么，想要求解这个答案需要运用什么方法，什么方法更为简便，考察的是什么方面的内容，数据有什么需要注意的</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>读题（清楚题意）</li><li>理解求解内容</li><li>思考求解方法（模拟/如何模拟/是简单模拟吗，还是其他）（动态规划吗？动态规划方程怎么列？是二维三维还是四维/需要节省空间用滚动数组吗？）等等</li><li>实现代码</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date><![CDATA[2019-04-17 07:32:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title>要学会去期待自己的人生</title>
		<link>http://yx.telstudy.xyz/?p=617</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=617</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>星河滚烫，她是我人间理想。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>617</wp:post_id>
		<wp:post_date><![CDATA[2019-06-24 00:09:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>素数筛</title>
		<link>http://yx.telstudy.xyz/?p=621</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date><![CDATA[2019-07-16 14:15:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/627/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=627</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>627</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[627]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/18/628/</link>
		<pubDate>Thu, 18 Jul 2019 04:04:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=628</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 04:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 04:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[628]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>归档</title>
		<link>http://yx.telstudy.xyz/index.php/post-archives/</link>
		<pubDate>Sat, 10 Aug 2019 13:58:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/index.php/post-archives/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>677</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 13:58:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 13:58:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[post-archives]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[post-archives.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/10/678/</link>
		<pubDate>Sat, 10 Aug 2019 13:58:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/index.php/2019/08/10/678/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 13:58:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 13:58:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[678]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[677]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>友情链接</title>
		<link>http://yx.telstudy.xyz/index.php/friend-link/</link>
		<pubDate>Sat, 10 Aug 2019 13:58:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/index.php/friend-link/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>679</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 13:58:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 13:58:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[friend-link]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[friend-link.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[giligili_post_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/10/680/</link>
		<pubDate>Sat, 10 Aug 2019 13:58:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/index.php/2019/08/10/680/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 13:58:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-10 13:58:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[680]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[679]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Hello world!</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/10/hello-world/</link>
		<pubDate>Mon, 10 Dec 2018 13:15:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 13:15:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 13:15:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>﻿6-4指定位置输出字符串（20分）</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/10/%ef%bb%bf6-4%e6%8c%87%e5%ae%9a%e4%bd%8d%e7%bd%ae%e8%be%93%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2%ef%bc%8820%e5%88%86%ef%bc%89/</link>
		<pubDate>Mon, 10 Dec 2018 15:47:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>6-4 指定位置输出字符串 （20 分）</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>函数接口定义：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>char *match( char *s, char ch1, char ch2 );<br>
函数match应打印s中从ch1到ch2之间的所有字符，并且返回ch1的地址。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>裁判测试程序样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>include </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>define MAXS 10</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>char *match( char *s, char ch1, char ch2 );</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int main()<br>
{<br>
    char str[MAXS], ch_start, ch_end, *p;</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>scanf("%s\n", str);
scanf("%c %c", &amp;ch_start, &amp;ch_end);
p = match(str, ch_start, ch_end);
printf("%s\n", p);

return 0;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/* 你的代码将被嵌在这里 */<br>
输入样例1：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>program<br>
r g<br>
输出样例1：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>rog<br>
rogram<br>
输入样例2：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>program<br>
z o<br>
输出样例2：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>(空行)<br>
(空行)<br>
输入样例3：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>program<br>
g z<br>
输出样例3：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>gram<br>
gram</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>能够ac但存在问题的代码如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
#define MAXS 10 
char *match( char *s, char ch1, char ch2 ){
    char *p=s;
    char *q=s;
    int flat1=0;
    int flat2=0;//定义flat分别用于判断能不能找到ch1与ch2
int n = strlen(s);//计算输入字符的长度
int i;
int index1,index2;
for(i=0;i&lt;n;i++){
    if(ch1==s[i]){
        flat1=1;
        index1=i;
        break;
    }
}//这里是找ch1的位置，并记录跳出，记住一定要break
for(i=index1;i&lt;n;i++){
    if(ch2==s[i]){
        flat2=1;
        index2=i;
        break;
    }
}//同上，找ch2的位置
if(flat1==0&amp;&amp;flat2==1){
    printf("\n");
    return 0;
}//这个是找不到ch1但是找得到ch2，（实际上是不能返回NULL或者0的【注NULL其实和0等价】）
//如果直接返回return (s+index1);应该是可以过的

//**错误点就在上面，因为测试数据中没有测试找不到ch1却找ch2的数据，所以能够ac**

else if(flat1==0&amp;&amp;flat2==0){
    printf("\n");
}
//测试数据测的就是两个都找不到的情况下，最后会运行到最后return (s+index1);
//其实返回的就是一个‘\0’
else if(flat1==1&amp;&amp;flat2==0){
    for(i=index1;i&lt;n;i++){
        printf("%c",s[i]);
    }
    printf("\n");
    return (s+index1);
}//这个是找到ch1而找不到ch2的直接把剩下的都输出就好了，之前就已经用strlen计算长度了
else if(flat1==1&amp;&amp;flat2==1){
    for(i=index1;i&lt;index2+1;i++){
        printf("%c",s[i]);
    }
    printf("\n");
    return (s+index1);
}
return (s+index1);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>正确的代码应该如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>char *match( char *s, char ch1, char ch2 ){
    char *p=s;//先指向s
    while(*p!='\0'&amp;&amp;*p!=ch1){
        p++;
    }//查找ch1
    char *q=p;
    if(*p==ch1&amp;&amp;*q==ch2){
      printf("%c\n",ch1);
      return p;
    }//如果ch1与ch2指向同一个字符直接输出
    while(*q!='\0'&amp;&amp;*q!=ch2){
        printf("%c",*q++);
        if(*q==ch2){
          printf("%c",ch2);
        }//这是找的到ch1的情况
        //先输出再自增移动到下一个位置 
    }
    printf("\n");
    //注意格式，在例子中可以发现有输出空行
    return p; 
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2018-12-10 15:47:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-10 15:47:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ef%bb%bf6-4%e6%8c%87%e5%ae%9a%e4%bd%8d%e7%bd%ae%e8%be%93%e5%87%ba%e5%ad%97%e7%ac%a6%e4%b8%b2%ef%bc%8820%e5%88%86%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[panoply_postlayout_select]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>懒人日记（更新日记）</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/14/%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89/</link>
		<pubDate>Fri, 14 Dec 2018 10:27:14 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2018/12/23 下午3：30</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"pale-pink","backgroundColor":"very-light-gray","fontSize":"large"} -->
<p class="has-text-color has-background has-large-font-size has-pale-pink-color has-very-light-gray-background-color">1）更新了了插件使得代码块能够以高亮存在，但是高亮代码块的主题还没确定今后可能还会更改</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size">2018/12/22 晚上7：00</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"pale-pink","fontSize":"large"} -->
<p class="has-text-color has-large-font-size has-pale-pink-color">1）更新了文章数百篇</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"pale-pink","fontSize":"large"} -->
<p class="has-text-color has-large-font-size has-pale-pink-color"><del>（完成上传做过的题目的小目标）</del></p>
<!-- /wp:paragraph -->

<p><!--StartFragment--></p>

<!-- wp:paragraph {"customTextColor":"#d400ff","fontSize":"medium"} -->
<p style="color:#d400ff" class="has-text-color has-medium-font-size">2018/12/22</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"customTextColor":"#bb00ff","fontSize":"medium"} -->
<p style="color:#bb00ff" class="has-text-color has-medium-font-size">1)主题暂时确定,并更改页面颜色(真难,找不到顺眼的2333)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"customTextColor":"#b700ee","fontSize":"medium"} -->
<p style="color:#b700ee" class="has-text-color has-medium-font-size">2)更新了部分hdu的编程题目,以及一篇pta题目<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/19 更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"light-blue"} -->
<p class="has-background has-light-blue-background-color">1）对wordpress进行了更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"light-blue","fontSize":"medium"} -->
<p class="has-background has-medium-font-size has-light-blue-background-color">2）对页面进行修改</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"light-blue","fontSize":"medium"} -->
<p class="has-background has-medium-font-size has-light-blue-background-color">3）添加了防火墙插件，统计插件，音乐播放器插件</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"light-blue"} -->
<p class="has-background has-light-blue-background-color">4）有了域名有点小开心</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/14 懒人日记开始更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>预计目标有如下</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1<del>）进行页面的整理，包括分类以及背景</del></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）对文章进行整理（主要是c语言上的题目，从个人的csdn上复制过来</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><del>题目拷贝已完成部分</del></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3）本bolg更新的内容主要是编程语言几个人生活</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4）每次更新都会在本文注明更新内容以及时间</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/19 更新内容</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）对wordpress主题进行了更改（但还不是很满意，慢慢调整啦）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）给自己打了下气要想办法把csdn上的东西弄过来呢</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 10:27:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 10:27:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%87%92%e4%ba%ba%e6%97%a5%e5%ad%90%ef%bc%88%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="%e6%9b%b4%e6%96%b0%e6%97%a5%e8%ae%b0"><![CDATA[更新]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[panoply_postlayout_select]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>对指针的理解</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/14/%e5%af%b9%e6%8c%87%e9%92%88%e7%9a%84%e7%90%86%e8%a7%a3/</link>
		<pubDate>Fri, 14 Dec 2018 16:36:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://101.132.160.228/wordpress3/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>本文多数内容属于个人理解，可能存在漏洞和错误欢迎指出</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/14第一次更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/19第二次更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2018/12/28第三次更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>引入问题：什么是指针？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>答：指针就是提供一种以符号形式使用地址的方法。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（尤其指针能够很有效的处理数组<br>例1：a == &amp;a[0]; //数组名就是该数组首元素的地址）</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":110} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/QQ图片20181214200026.png" alt="" class="wp-image-110"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>（图源来自于百度百科）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我个人的理解：指针就像是一个箭头，在你需要使用的时候，你首先就要定义它，通常我们定义的类型有两种，一种是int类型（整型）另一种是char型（也就是字符型）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这里我们的定义就像是制造一个指路牌去指向我们想要到达的地址</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例2：(省略了部分内容)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><br>这里你可以这么想，这是一个名字叫做a的指路牌，而当你要给它写地址的时候，就只需要写上地址就可以啦，就比如<br>我运用了取地址符去取t的地址，并通过赋值符号赋给a。</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":112} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2018/12/timg-1.jpg" alt="" class="wp-image-112"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>什么是指针类型？<br> 我起初有点不理解指针的类型，可能是上课睡着了（逃<br> 分为两种，答：<br> 1.指针的类型，实际上就是指针的类型<br> 2.指针所指向的类型，指的是指针所指向的地方的数据类型</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例3：<br>
int <em>ptr; //指针的类型是 int</em><br>
//指针所指向的类型是 int</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注：常出现的类型还有double，long long，float等等</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如何使用指针？什么时候使用最为合适？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>答：<br>
1首先记住第一点在给指针赋上地址时有两种情况<br>
1）    一种是在定义时直接赋上地址<br>
例4：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>char t = ‘A’;<br>char <em>a=&amp;t;//这里的</em>是因为定义指针才出现的，而不是因为赋值才出现的<br><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例5：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>char t = ‘A’;<br>char <em>a;a=&amp;t;//已经定义了a是指针了，就已经知道了a是指针了，所以在赋地址值时就不用再重复出现</em><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>什么是*？这要怎么理解与使用？</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>答：首先我们已经知道了取地址符号&amp;是用来提取一个变量的地址，其实*也类似，它在非定义指针变量时使用时被称为取值符号</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第一步理解：<br>
<strong>它取的是什么值？</strong><br>
答：它取的是指针所指的地址上的值。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例6：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int t = 123;

int *a;

a=&t;

*a=321;

//在这里我修改的就是指针a所存地址上的值

//实际上更改的就是t的值

printf(“%d\n”,t);

printf(“%d\n”,*a);

//通过输出你会发现—两个值是相等的！</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>注意:这里有个特别需要注意的
不能！
*a=&amp;t;
不能！
不能！
不能！</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>要记住*a取的是地址那个地方上的值，而不是取地址阿！<br>
改变也改变的地址那个地方上的值！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>第二步：使用</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>             引入：我们都知道数组，这里引用一下上面的例1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>例1：a == &amp;a[0]; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>//数组名就是该数组首元素的地址<br>
（这个要记住，很简单的）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例7：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int a[10];//先定义一个大小为10的数组
//我们可以用指针法表示数组

int i=0;

for(i=0;i&lt;10;i++){
    a[i]=i；
}//这里就是单纯的给数组每个位置赋值啦

for(i=0;i&lt;10;i++){
    printf(“%d”,a[i]);
}//法一数组法

for(i=0;i&lt;10;i++){
    printf(“%d”,*(a+i));
}
//法二指针法</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>你会发现两种方法输出的值是相同的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例：下面哪个定义中的p不是指针，情选择恰当的选项</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>char **p;</li><li> char (*p)[10];</li><li> char *p[6];</li><li>给出三项，p都是指针</li><li></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>第一个是二级指针<br>第二个是个指向长度为10的一位数组的指针&nbsp;<br>第三个是指针数组，p是数组名不是指针


</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 16:36:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 16:36:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%af%b9%e6%8c%87%e9%92%88%e7%9a%84%e7%90%86%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9227419e109d50bb1fda61c3487d2547]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[panoply_postlayout_select]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ecee3a7bbe567bca996dcc4ed2781713]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fec214538442cbe0a09efffd84e3db2d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_640ca910af08ced14d92729f165522db]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c50c25ed7123febc1ed4e3c61ed7902d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[112]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>随笔（1）</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/93/</link>
		<pubDate>Wed, 19 Dec 2018 15:13:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>随笔（1）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>要开始规划自己的时间了，始终从小到大都没法很好的规划自己的时间，很多事情做的十分的肤浅，做完也不知道自己经历了什么</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>暂时放下了《虞美人草》翻了半本的《浮生六记》，有了些感悟吧大概会写个读书笔记吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>开始学会去认识自己，我是一个很笨的人，只有付出了努力才能获得收获，突然想起少波老师，也想起了永威老师，无数的身影，他们真的好强，可能永远也追不上他们了，但是如果现在就屈服，未免有点太卑微了，即使是一个人，也要一个人的朝圣。学会去静下心，去想一想要做什么，应该做什么</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>大概花两个星期的时间去想想我的初心是什么，应该吗？并且建立好自己的目标，在三天内我一定会列完我一个星期的时间表</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>也只有毕业了各奔东西时候才能这么绝望以至于现在想做一些无所谓的努力吧，记不住公式的我，不理解定理的我，只有花更多的时间了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>少点修仙，多看点书，游戏我还是会玩，每日控制在1个小时左右</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:13:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:13:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>﻿6-3 使用函数验证哥德巴赫猜想 （10 分）</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/%ef%bb%bf6-3-%e4%bd%bf%e7%94%a8%e5%87%bd%e6%95%b0%e9%aa%8c%e8%af%81%e5%93%a5%e5%be%b7%e5%b7%b4%e8%b5%ab%e7%8c%9c%e6%83%b3-%ef%bc%8810-%e5%88%86%ef%bc%89/</link>
		<pubDate>Wed, 19 Dec 2018 15:34:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>6-3 使用函数验证哥德巴赫猜想 （10 分）</strong><br>
本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>函数接口定义：<br>
int prime( int p );<br>
void Goldbach( int n );<br>
其中函数prime当用户传入参数p为素数时返回1，否则返回0；函数Goldbach按照格式“n=p+q”输出n的素数分解，其中p≤q均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中p最小的解。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>裁判测试程序样例：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdio.h>
#include &lt;math.h>

int prime( int p );
void Goldbach( int n );

int main()
{
    int m, n, i, cnt;

    scanf("%d %d", &amp;m, &amp;n);
    if ( prime(m) != 0 ) printf("%d is a prime number\n", m);
    if ( m &lt; 6 ) m = 6;
    if ( m%2 ) m++;
    cnt = 0;
    for( i=m; i&lt;=n; i+=2 ) {
        Goldbach(i);
        cnt++;
        if ( cnt%5 ) printf(", ");
        else printf("\n");
    }

    return 0;
}
//以下为解答代码，ac

int prime( int p ){
	int i;
	int r;
	if(p&lt;2){
		return 0;
	}
	for(i=2;i&lt;=(int)sqrt(p);i++){//这里其实也可以i*i&lt;p应该是一样的，目的都是减少循环次数
		r=p%i;
		if(r==0){//判断是否为素数，能整除那就凉凉肯定不是素数，返回值为0
			return 0;
		}
	}
	return 1;//如果上面都熬下来了，说明恭喜你成为了素数
}
void Goldbach( int n ){
	int i=3;//因为所求解的左边值是小的，所以由左边从小增大
while(i&lt;=n/2){//因为对称性所以只需要看一半就可以了，剩下一半是重复的！
		if(prime(i)==1&amp;&amp;prime(n-i)==1){//判断两个值是否为素数
			printf("%d=%d+%d",n,i,n-i);
			break;
		}
		i+=2; 
	}

}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 15:34:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 15:34:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ef%bb%bf6-3-%e4%bd%bf%e7%94%a8%e5%87%bd%e6%95%b0%e9%aa%8c%e8%af%81%e5%93%a5%e5%be%b7%e5%b7%b4%e8%b5%ab%e7%8c%9c%e6%83%b3-%ef%bc%8810-%e5%88%86%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>如何在申请空间时使用指针？</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/19/%e5%a6%82%e4%bd%95%e5%9c%a8%e7%94%b3%e8%af%b7%e7%a9%ba%e9%97%b4%e6%97%b6%e4%bd%bf%e7%94%a8%e6%8c%87%e9%92%88%ef%bc%9f/</link>
		<pubDate>Wed, 19 Dec 2018 16:21:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>在csdn上写完copy过来，copy过程中出了点小意外可能会有错误</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br>想必许多人在写代码的时候都会有这种想法</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int n;
scanf(“%d”,&amp;n);
int a[n];
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><br>通过这样书写来节省内存空间，虽然编译器可能不会报错，但老师和课本一般都会劝你不要这么做，只是对于部分编译器不会报错</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>于是就有了malloc！<br>
malloc的全称是memory allocation，中文叫动态内存分配<br>
它能很好的为你节省内存，就是强迫症患者的福音呢</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size">直接进入主题如何申请</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"bright-red","fontSize":"medium"} -->
<p class="has-background has-medium-font-size has-bright-red-background-color">假设题目是需要储存n个数据（大小不超过int类型的最大值）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int n;
scanf("%d",&amp;n);
int *p;//这里我定义了一个int类型指针
p = (int*) malloc(n * sizeof ( int ));  //指向了一个大小由我决定的空间，计算了n个int类型所需要的空间大小
/可以看到上面我用了一个强制类型转换 
因为malloc一般返回的是void*类型

我们在上文提到过指针与数组的关系，这里我们定义的指针就可以当作一个一维的数组使用啦

这里的p数组可以让你储存n个int类的数字

注意在你使用完一定要记得释放这块你申请的内存，正所谓有借有还嘛！*/
 free(p);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><br>你也可以根据你的需要定义各种不同的类型</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>如struct name，long long ，double，float，long double，等等啦</h2>
<!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 16:21:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 16:21:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%9c%a8%e7%94%b3%e8%af%b7%e7%a9%ba%e9%97%b4%e6%97%b6%e4%bd%bf%e7%94%a8%e6%8c%87%e9%92%88%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[求助] An Easy Task HDU - 1076</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/%e6%b1%82%e5%8a%a9-an-easy-task-hdu-1076/</link>
		<pubDate>Sat, 22 Dec 2018 02:19:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">Ignatius  出生在闰年， 所以他想知道什么时候是他的生日 。你能告诉他？</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>给你一个正整数 Y 代表出生年份和一个 N，你的任务是告诉他从Y开始的第N个闰年。

注意：如果 Y 是闰年， 那么第一个闰年就是Y。</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">Input</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>输入是多组数据输入：

首先输入 T 代表接下来会有 T 组测试数据。

接下来会有T 组数据，每组数据包含两个正整数 Y，N。(1&lt;=N&lt;=10000).</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">Output</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>对于每组测试数据，你需要输出第N个闰年；</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3
2005 25
1855 12
2004 10000</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>2108
1904
43236
提示
如果 (Y%4==0 &amp;&amp; Y%100!=0) or Y%400==0. 那么就是闰年。

wa代码但找不出原因,答案是对的</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int main(){
    int t;
    scanf("%d",&amp;t); 
    while(t--){
        long long year;//出生年份
        int n;//求解第n个闰年是哪一年
        scanf("%ld %d",&amp;year,&amp;n);
        int cnt = 0;
        if(year%4==0&amp;&amp;year%100!=0||year%400==0){
            cnt++;
        }
    while(cnt&lt;=n)
    {
        if(year%4==0&amp;&amp;year%100!=0||year%400==0){
            cnt++;
            year++;
        }
        else{
            year++;
        }
    }
    if(t!=0)
        printf("%ld\n",year-1);
        else{
            printf("%ld",year-1);
        }
    }
    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"customBackgroundColor":"#c5ebfb","fontSize":"medium"} -->
<p style="background-color:#c5ebfb" class="has-background has-medium-font-size">下面是ac的代码</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int main()
{
    int n;
    scanf("%d",&amp;n);
    while(n--)
    {
        int year,sum;
        scanf("%d%d",&amp;year,&amp;sum);
        while(sum)
        {
            if(year%4==0)
            {
                if(year%4==0&amp;&amp;year%100!=0||year%400==0)
                    sum=sum-1;
            }
            year++;
        }
        printf("%d\n",year-1);
    }
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 02:19:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 02:19:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b1%82%e5%8a%a9-an-easy-task-hdu-1076]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A+B for Input-Output Practice (I) HDU - 1089</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/ab-for-input-output-practice-i-hdu-1089/</link>
		<pubDate>Sat, 22 Dec 2018 02:29:36 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"customBackgroundColor":"#e3c5cd"} -->
<p style="background-color:#e3c5cd" class="has-background">

  Your task is to Calculate a + b. 
 <br>Too easy?! Of course! I specially designed the problem for acm beginners. 
 <br>You must have found that some problems have the same titles with 
this one, yes, all these problems were designed for the same aim. 
 <br> 

    
        Input
        The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line. 
<br>
    
        Output
        For each pair of input integers a and b you should output 
the sum of a and b in one line, and with one line of output for each 
line in input. 
<br>
    
        Sample Input
        </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1 5
10 20</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph {"customBackgroundColor":"#e3c5cd"} -->
<p style="background-color:#e3c5cd" class="has-background">
    
        Sample Output
        </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6 30<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>我的ac代码:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>#include&lt;stdio.h&gt;</code><br><code> int main(){</code><br><code>     int a,b;</code><br><code>     while(scanf("%d %d",&amp;a,&amp;b)!=EOF){ </code><br><code>&nbsp;  printf("%d\n",a+b); </code><br><code>}  </code><br><code>return 0; }</code> </pre>
<!-- /wp:preformatted -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 02:29:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 02:29:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ab-for-input-output-practice-i-hdu-1089]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>记录好看的颜色</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/%e8%ae%b0%e5%bd%95%e5%a5%bd%e7%9c%8b%e7%9a%84%e9%a2%9c%e8%89%b2/</link>
		<pubDate>Sat, 22 Dec 2018 02:43:52 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"customBackgroundColor":"#e3c5cd"} -->
<p style="background-color:#e3c5cd" class="has-background">1.暗酒红色 e3c5cd</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"customBackgroundColor":"#a8d9f7"} -->
<p style="background-color:#a8d9f7" class="has-background">2 淡蓝色(偏暗)  a8d9f7</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 02:43:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 02:43:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%b0%e5%bd%95%e5%a5%bd%e7%9c%8b%e7%9a%84%e9%a2%9c%e8%89%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A hard puzzle HDU - 1097</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/a-hard-puzzle-hdu-1097/</link>
		<pubDate>Sat, 22 Dec 2018 11:50:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

lcy gives a hard puzzle to feng5166,lwg,JGShining and Ignatius: gave a and b,how to know the a^b.everybody objects to this BT problem,so lcy makes the problem easier than begin.&nbsp;<br>this puzzle describes that: gave a and b,how to know the a^b's the last digit number.But everybody is too lazy to slove this problem,so they remit to you who is wise.&nbsp;<br>InputThere are mutiple test cases. Each test cases consists of two numbers a and b(0&lt;a,b&lt;=2^30)&nbsp;<br>OutputFor each test case, you should output the a^b's last digit number.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">7 66
8 800</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">9 6<br><br><br>用快速幂取模的方法解答即可<br><br><br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
typedef long long ll;//预处理，懒
ll Mode(ll a,ll b,ll mode){
	ll sum = 1;
//主要就是降低a与b
	while(b>0){
		if(b%2==1){//如果b为奇数的话
			sum = (sum * a)% mode;
		}
		b/=2;
		a = ( a * a )%mode;//降a
	}
	return sum;
}
int main(){
	ll a,b;
	while(scanf("%ld%ld",&amp;a,&amp;b)!=EOF){
		printf("%ld\n",Mode(a,b,10));
		
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 11:50:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 11:50:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-hard-puzzle-hdu-1097]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ignatius&#039;s puzzle HDU - 1098</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/ignatiuss-puzzle-hdu-1098/</link>
		<pubDate>Sat, 22 Dec 2018 13:28:31 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Ignatius is poor at math,he falls across a puzzle problem,so he has no choice but to appeal to Eddy. this problem describes that:f(x)=5*x^13+13*x^5+k*a*x,input a nonegative integer k(k&lt;10000),to find the minimal nonegative integer a,make the arbitrary integer x ,65|f(x)if&nbsp;<br>no exists that a,then print "no".&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>InputThe input contains several test cases. Each test case consists of a nonegative integer k, More details in the Sample Input.&nbsp;<br>OutputThe output contains a string "no",if you can't find a,or you should output a line contains the a.More details in the Sample Output.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">11
100
9999</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">22 no 43<br><br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1枚举法 2泰勒公式 3数学归纳法<br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int judge(int k,int a){
	if((18+k*a)%65==0&amp;&amp;(41376+2*a*k)%65==0){
		return 1;
	}
	else{
		return 0;
	}
}
int main(){
	int k;//看了半天题目才知道k是要我们自己输入的
	while(scanf("%d",&amp;k)!=EOF){
		int a;
		int flat=0;//用于判断是否有输出
		for(a=0;a&lt;=65;a++){
			if(judge(k,a)==1){
				printf("%d\n",a);
				flat=1;
				break;
			}
		}
		if(flat==0){
			printf("no\n");
		}

	}
	
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 13:28:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 13:28:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ignatiuss-puzzle-hdu-1098]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>最小公倍数 HDU - 1108</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0-hdu-1108/</link>
		<pubDate>Sat, 22 Dec 2018 13:41:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p> 该题是是算最小公倍数，特意去查了最小公倍数计算方法：1、分解质因数法2、公式法。 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>关键点  最小公倍数等于两数之积除以其最大公约数 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

给定两个正整数，计算这两个数的最小公倍数。Input输入包含多组测试数据，每组只有一行，包括两个不大于1000的正整数.Output对于每个测试用例，给出这两个数的最小公倍数，每个实例输出一行。&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">10 14</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">70<br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int gcd(int a,int b){
	//计算最大公约数 
	int r;
	int temp;
	if(b>a){
		temp = b;
		b = a;
		a = temp;
	}
	while(b!=0){
		r=a%b;
		a=b;
		b=r;
	}
	return a;
}
int main(){
	int a,b;
	int j;//用于储存两数乘积 
	while(scanf("%d %d",&amp;a,&amp;b)!=EOF){
		j=a*b;
		printf("%d\n",j/gcd(a,b));
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 13:41:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 13:41:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0-hdu-1108]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>排序 HDU - 1106</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/%e6%8e%92%e5%ba%8f-hdu-1106/</link>
		<pubDate>Sat, 22 Dec 2018 14:49:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

输入一行数字，如果我们把这行数字中的‘5’都看成空格，那么就得到一行用空格分割的若干非负整数（可能有些整数以‘0’开头，这些头部的‘0’应该被忽略掉，除非这个整数就是由若干个‘0’组成的，这时这个整数就是0）。&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>你的任务是：对这些分割得到的整数，依从小到大的顺序排序输出。&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Input输入包含多组测试用例，每组输入数据只有一行数字（数字之间没有空格），这行数字的长度不大于1000。&nbsp;&nbsp;&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入数据保证：分割得到的非负整数不会大于100000000；输入数据不可能全由‘5’组成。&nbsp;<br>Output对于每个测试用例，输出分割得到的整数排序的结果，相邻的两个整数之间用一个空格分开，每组输出占一行。&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">0051231232050775</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">0 77 12312320</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/* HDU1106 排序 

转换后的整数需要排序.
排序使用库函数qsort()来实现。

因为5被看作空格，需要注意的点有：

1.开始的若干个5需要跳过去；

2.最后的若干个5需要跳过去；

3.字符串全部是5的时候

4.中间的若干个5需要正确跳过去。

程序中使用了标志flag5，来处理若干个5。

数字串转整数的逻辑与atoi相同。

本程序的优点在于逻辑清晰简洁。

figure是输入的字符。 val存放整数，存放的是数字字符串转换为整数的结果。

*/
 
#include &lt;stdio.h>
#include &lt;stdlib.h>
 
int cmp(const void *a,const void *b)
{
    return *(int*)a - *(int*)b;
}
//计算a到b的字符串长度
int main(void)
{
    char figure; //输入数字字符 
    int val=0, values[2000], count, flag5=1, i;
 //val存放整数，存放的是数字字符串转换为整数的结果。 
    while(scanf("%c", &amp;figure)!=EOF) {//输入数字字符 
        //如果读入到是换行 
		if(figure == '\n') {
            if(flag5 == 0)
                values[count++] = val;
 
            if(count > 0) {
                qsort(values, count, sizeof(values[0]), cmp);//对数组进行排序 
				//void qsort(1 待排序数组首地址 2 数组中待排序元素数量 3 各元素的占用空间大小 4 指向函数的指针);
                for(i=0; i&lt;count-1; i++)
                    printf("%d ", values[i]);
                printf("%d\n", values[count-1]);
            }
 
            val = 0;//存放整数 
            count = 0;
            flag5 = 1;
        } 
		else if(figure == '5') {
            if(flag5 == 0)
                values[count++] = val;
 
            val = 0;
            flag5 = 1;//如果是5会给flat5标记
        } else {
            val = val * 10 + figure - '0';
 
            flag5 = 0;
        }
        
    }
 
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 14:49:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 14:49:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8e%92%e5%ba%8f-hdu-1106]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>atoi——把字符串转换成整型数</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/22/atoi-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e5%9e%8b%e6%95%b0/</link>
		<pubDate>Sat, 22 Dec 2018 16:05:28 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>atoi()——把字符串转换成整型数<br></strong>考点：字符串转换为数字时，对相关ASCII码的理解。收藏<a href="javascript:void(0);">1709</a><a>44</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>atoi</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:;">编辑</a>atoi (表示 ascii to integer)是把字符串转换成<a target="_blank" href="https://baike.baidu.com/item/%E6%95%B4%E5%9E%8B/68205" rel="noreferrer noopener">整型</a>数的一个函数，应用在计算机程序和办公软件中。int atoi(const char *nptr) 函数会扫描参数 nptr字符串，会跳过前面的空白字符（例如空格，tab缩进）等。如果 nptr不能转换成 int 或者 nptr为空字符串，那么将返回 0<sup>&nbsp;[1]</sup>&nbsp;。特别注意，该函数要求被转换的字符串是按十进制数理解的。

</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdlib.h>
#include &lt;stdio.h>
 
int main(void)
{
    int n;
    char *str = "12345.67";
    n = atoi(str);
    printf("n=%d\n",n);
    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2018-12-22 16:05:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-22 16:05:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[atoi-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e5%9e%8b%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Who&#039;s in the Middle HDU - 1157</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/whos-in-the-middle-hdu-1157/</link>
		<pubDate>Sun, 23 Dec 2018 03:19:43 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

FJ is surveying his herd to find the most average cow. He wants to know how much milk this 'median' cow gives: half of the cows give as much or more than the median; half give as much or less.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given an odd number of cows N (1 &lt;= N &lt; 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less.&nbsp;<br>Input* Line 1: A single integer N&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>* Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.&nbsp;<br>Output* Line 1: A single integer that is the median milk output.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5
2
4
1
3
5</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3


        
 </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Hint</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">  INPUT DETAILS:  Five cows with milk outputs of 1..5  OUTPUT DETAILS:  1 and 2 are below 3; 4 and 5 are above 3.<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
void sort(int p[],int n){
	int i,j,temp;
	for(i=0;i&lt;n;i++){
		for(j=0;j&lt;n-i-1;j++){
			if(p[j+1]&lt;p[j]){
				temp = p[j+1];
				p[j+1] = p[j];
				p[j] = temp;
			}
		}
	}
}
int main()
{
	int n;
	while(scanf("%d",&amp;n)!=EOF){
	int p[10000];//也可以通过malloc申请空间，要记得free就好了
	int i;
	for(i=0;i&lt;n;i++){
		scanf("%d",&amp;p[i]);
	}
	sort(p,n);//排序
		printf("%d\n",p[n/2]);
	}
	return 0;
 }</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 03:19:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 03:19:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[whos-in-the-middle-hdu-1157]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Eddy&#039;s digital Roots HDU - 1163</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/eddys-digital-roots-hdu-1163/</link>
		<pubDate>Sun, 23 Dec 2018 07:36:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Eddy's easy problem is that : give you the n,want you to find the n^n's digital Roots.&nbsp;<br>InputThe input file will contain a list of positive integers n, one per line. The end of the input will be indicated by an integer value of zero. Notice:For each integer in the input n(n&lt;10000).&nbsp;<br>OutputOutput n^n's digital root on a separate line of the output.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
4
0</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4
4</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
//求解的是n的n次方而不是n*n
//通过九余数定理进行求解，类似于求n的n次方的个位数字
//但要注意正好被整除时是九的倍数
int main(){
	int n;
	while(scanf("%d",&amp;n)!=EOF){
		if(n==0){
			break;
		}
		int temp;
		int i;
		temp = n;
		for(i=2;i&lt;=n;i++){
			temp = temp * n % 9;
		}
		if(temp==0){
		printf("9\n");
		}
		else{
		printf("%d\n",temp);		
		}
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 07:36:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 07:36:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[eddys-digital-roots-hdu-1163]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>叹芸不出浮生，惟愿卿可为欢</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/%e5%8f%b9%e8%8a%b8%e4%b8%8d%e5%87%ba%e6%b5%ae%e7%94%9f%ef%bc%8c%e6%83%9f%e6%84%bf%e5%8d%bf%e5%8f%af%e4%b8%ba%e6%ac%a2/</link>
		<pubDate>Sun, 23 Dec 2018 08:25:04 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"customBackgroundColor":"#ffc6d4"} -->
<p style="background-color:#ffc6d4" class="has-background">大概是读《浮生六记》有感。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>芸字是取自沈复的妻子，素有兰心蕙质的一位女人，甚至在读书的过程中我有时觉得不可能再有比她更加优秀的女儿家了，即使不如木兰般从军不似王昭君般出塞，她也远比她们优秀</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>原因大概如此木兰与昭君是伟大，却又有着无奈被迫的前行，显的太空了，离着踏实的陆地他们的行为遥不可及</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>芸被林语堂称为“中国文学中最可爱的女人"，果真是魅力非凡</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>下摘自知乎，收集描写她的外貌以及对此衍生出的评价</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p> <br> “削肩长项，瘦不露骨”是她恰到好处的身材，“眉弯目秀，顾盼神飞”是她气质熠熠的面容；而“两齿微露”的瑕疵，则如脂砚斋所言“天生美人方有一陋处”。她析古诗时眼亮心明，看戏剧时情深意切，处家事时克己奉礼，比寻常的传统女子又多了一份聪颖、一份痴心、一份涵养。她既可以做一个相濡以沫的爱人，又适合成为一个红袖添香的知己，实在是过于完美了。<br></p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>外貌端庄</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>举止优雅</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在沈复的父因沈复的母冤枉她时，沈复问她不如将实情诉之父亲，而她却摇摇头说：不可，如此便会使得父母关系不和，而母亲也会疏远于我。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如此这么做，一位女子承受了父亲无数的不满</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>她就如我的父亲所教育我的要成为的那种人，为他人找想的那种人</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>无论是在古代亦或者是现代，这样的女人都太少了。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在我看来若是沈复的浮生六记中没有出现这个优秀的女子，大概沈复远不会有如今在文学史的地位。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>芸不似其他小心眼的女人斤斤计较着丈夫的行为，她为其出谋划策，输了便一起抗，她相信自己所爱的人的决定，就算是错了，她也不后悔</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>她甚至还为沈复出谋划纳一位美而韵的小妾，以女红为沈复赚钱，怪不得历代文人说起芸来就口水滴答，若得陪伴，夫复何求</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>倒是有点看不起沈复了，总是自以为自己的才学高，哪知其实他的才学远远达不到他所展现出来的心气，沈复如历史上的所有文人一般，无论有钱没钱，想的就是饮酒颂烂诗，花天酒地小船嫖妓</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>他，真的配不上芸</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>说他是人渣也不为过</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>平时所有的花销都是靠着芸一人赚得，琐碎事情也都是芸来做，芸爱他，可能沈复也爱她，谁知道呢?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 更可气的是当芸病痛而终后，这窝囊废还不悔恨反省，迷茫了半天总结了一句：“奉劝世间夫妇，固不可彼此相仇，亦不可过于情笃”，感情太好了分别时要伤心的，听听，这龟儿子就想着不能让自己太伤心</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>谋生无能，怨天尤人，这就是沈复把</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"customBackgroundColor":"#c7ffff"} -->
<p style="background-color:#c7ffff" class="has-background">只希望芸来生能寻得她爱的，爱她得，不无能得，也便不会如上辈子一般浮生虚度，累此一生了</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 08:25:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 08:25:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%b9%e8%8a%b8%e4%b8%8d%e5%87%ba%e6%b5%ae%e7%94%9f%ef%bc%8c%e6%83%9f%e6%84%bf%e5%8d%bf%e5%8f%af%e4%b8%ba%e6%ac%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e8%af%bb%e4%b9%a6%e7%ac%94%e8%ae%b0"><![CDATA[书评]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Eddy&#039;s research I HDU - 1164</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/eddys-research-i-hdu-1164/</link>
		<pubDate>Sun, 23 Dec 2018 12:38:16 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Eddy's interest is very extensive, recently he is interested in prime number. Eddy discover the all number owned can be divided into the multiply of prime number, but he can't write program, so Eddy has to ask intelligent you to help him, he asks you to write a program which can do the number to divided into the multiply of prime number factor .&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>InputThe input will contain a number 1 &lt; x&lt;= 65535 per line representing the number of elements of the set.&nbsp;<br>OutputYou have to print a line in the output for each entry with the answer to the previous question.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">11
9412</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">11
2*2*13*181</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>我在分解过程中由小到大的分解过程实际上就以及在排除不是素数的数字了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;math.h>
void divide(int n){
//定义一个分解函数
//从小的数字开始分解，这样就能确保分解出来的数字是素数
    int count = 0;
    int i;
    while(n%2==0){
    n/=2;
    if(++count==1){
        printf("2");
    }
    else{
        printf("*2");
        }
    }
    //上面把能分解的2都分解出来了了
        //接下la
    for(i=3;i&lt;n;i++){
        if(n%i==0){ 
        	n/=i;
            //如果能够被i整除那么可以分解出一个i
            if(++count==1){
                printf("%d",i);
            }
            else
            	{
            printf("*%d",i);
            }
				}
        while(n%i==0){
        //看一共能够分解出几个i
            n/=i;
            //一定要记住每分解出一个i，n也会跟着变化。因为i是从n当中分解出来的
            printf("*%d",i);
        		}
		}
    if(n!=1){
        if(++count==1){
        //如果到这里都没有被分解过那么便直接输出原数
            printf("%d",n);
        }
        else{
        //如果上面已经输出过了的话
        printf("*%d",n);//这里输出的就应该是最后一个数字了
        }
    }
    printf("\n");
        }
        
int main(){
	int x; 
    while(scanf("%d",&amp;x)!=EOF)
{
    divide(x);
}
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 12:38:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 12:38:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[eddys-research-i-hdu-1164]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>知山林几尺，知川河深浅</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/24/%e7%9f%a5%e5%b1%b1%e6%9e%97%e5%87%a0%e5%b0%ba%ef%bc%8c%e7%9f%a5%e5%b7%9d%e6%b2%b3%e6%b7%b1%e6%b5%85/</link>
		<pubDate>Mon, 24 Dec 2018 15:18:19 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>人需要很清楚的知道自己身处在什么位置，学会去听别人的话，去理解别人话里话外的意思，甚至还需要自己去想别人没有的意思</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可能第一次当个小官，你会很开心，可是你只是一个小官可能很多程度上你甚至不如一个普普通通的人，没有人有权利能去锁住别人的时间，没有权利去命令别人，他们听从你的安排，也许会有人会夸赞你很有领导能力，很厉害呀！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>真是可笑，别人不过是看在朋友，他把你当作是朋友的条件下，听你的安排，罢了，而你不知，语气都是那么的可恶</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>想比之下我似乎更喜欢曾经当过班干部的人，老师说他们圆滑，这又怎么了，老师学生两边好不得罪不也是很好的一种存在形态吗，甚至很多时候圆滑放低姿态的学生干部能比严格的学生干部更有号召力，能更好的解决事情</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>更可怕的是没有一点经历的人，自以为是</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2018-12-24 15:18:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-24 15:18:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%9f%a5%e5%b1%b1%e6%9e%97%e5%87%a0%e5%b0%ba%ef%bc%8c%e7%9f%a5%e5%b7%9d%e6%b2%b3%e6%b7%b1%e6%b5%85]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>三角形 HDU - 2039</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/%e4%b8%89%e8%a7%92%e5%bd%a2-hdu-2039/</link>
		<pubDate>Sun, 23 Dec 2018 15:29:02 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p> 给定三条边，请你判断一下能不能组成一个三角形。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Input输入数据第一行包含一个数M，接下有M行，每行一个实例，包含三个正数A,B,C。其中A,B,C &lt;1000;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Output对于每个测试实例，如果三条边长A,B,C能组成三角形的话，输出YES，否则NO。Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
1 2 3
2 2 2</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">NO YES<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>坑点就是输入的数字可能不是整数，一开始没注意到，wa了一次又一次</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
//判断是不是三角形
int main(){
	int m;
		int i;
		float a,b,c;
		scanf("%d",&amp;m);
	for(i=0;i&lt;m;i++){
		scanf("%f %f %f",&amp;a,&amp;b,&amp;c);
		//日常排序
float d[3];
d[0]=a;
d[1]=b;
d[2]=c;
int i;
int j;
float temp;
//没有什么是不能用冒泡排序ac的
for(i=0;i&lt;3;i++){
	for(j=0;j&lt;3-1-i;j++){
		if(d[j]>d[j+1]){
			temp=d[j+1];
			d[j+1]=d[j];
			d[j]=temp;
		}
	}
} 
	a=d[0];
	b=d[1];
	c=d[2];
	if((a+b)>c){
		printf("YES"); 
	} 
	else{
		printf("NO");
	} 		
	if(i!=m-1){
		printf("\n");
	}
		}

	return 0;
} </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 15:29:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 15:29:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%89%e8%a7%92%e5%bd%a2-hdu-2039]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Balloon Comes! HDU - 1170</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/balloon-comes-hdu-1170/</link>
		<pubDate>Sun, 23 Dec 2018 16:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

The contest starts now! How excited it is to see balloons floating around. You, one of the best programmers in HDU, can get a very beautiful balloon if only you have solved the very very very... easy problem.&nbsp;<br>Give you an operator (+,-,*, / --denoting addition, subtraction, multiplication, division respectively) and two positive integers, your task is to output the result.<br>Is it very easy?&nbsp;<br>Come on, guy! PLMM will send you a beautiful Balloon right now!&nbsp;<br>Good Luck!&nbsp;<br>InputInput contains multiple test cases. The first line of the input is a single integer T (0&lt;T&lt;1000) which is the number of test cases. T test cases follow. Each test case contains a char C (+,-,*, /) and two integers A and B(0&lt;A,B&lt;10000).Of course, we all know that A and B are operands and C is an operator.&nbsp;<br>OutputFor each case, print the operation result. The result should be rounded to 2 decimal places If and only if it is not an integer.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4
+ 1 2
- 1 2
* 1 2
/ 1 2</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3
-1
2
0.50</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>该题有两个注意点1）在判断 \ 时，应该' \ \ '，但是本题不需要因为测试数据应该只有四个符号，直接用else就可以了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）接下来就是要注意除的时候会有两种情况，一种是整除，另一种不是，然后就ac了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
//气球来了 
int main(){
	char a[2];
	int x,y;
		int i;
			int t;
				scanf("%d",&amp;t);
				getchar();
for(i=0;i&lt;t;i++){

scanf("%s%d%d",a,&amp;x,&amp;y);
		if(a[0]=='+'){
			printf("%d\n",x+y);
		}
		else if(a[0]=='-'){
			printf("%d\n",x-y);
		}
		else if(a[0]=='*'){
			printf("%d\n",x*y);
		}
		else {
			if(x%y==0){
				printf("%d\n",x/y);
			}
			else{
				printf("%.2f\n",(double)x/y);
			}
 
	}
}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 16:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 16:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[balloon-comes-hdu-1170]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Max Num HDU - 2071</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/23/208/</link>
		<pubDate>Sun, 23 Dec 2018 16:12:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

There are some students in a class, Can you help teacher find the highest student .InputThere are some cases. The first line contains an integer t, indicate the cases; Each case have an integer n ( 1 ≤ n ≤ 100 ) , followed n students’ height.OutputFor each case output the highest height, the height to two decimal plases;Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
3 170.00 165.00 180.00
4 165.00 182.00 172.00 160.00</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">180.00
182.00</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>该题注意点就是最后的输出部分，我直接用双精度浮点数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意输入也用浮点数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>用了malloc是为了节省内存空间</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int main(){
	int t;
	scanf("%d",&amp;t);
	while(t--){
		int n;
		scanf("%d",&amp;n);
		double* p=(double*)malloc(n*sizeof(double));
		int i;
		for(i=0;i&lt;n;i++){
			scanf("%lf",&amp;p[i]);
		
		}
		double max=p[0];
	for(i=0;i&lt;n;i++){
		if(p[i]>max){
			max=p[i];
		}
	}
	printf("%.2lf\n",max);
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2018-12-23 16:12:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-23 16:12:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[208]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>不容易系列之二 HDU - 2042</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/24/%e4%b8%8d%e5%ae%b9%e6%98%93%e7%b3%bb%e5%88%97%e4%b9%8b%e4%ba%8c-hdu-2042/</link>
		<pubDate>Mon, 24 Dec 2018 00:31:45 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

  你活的不容易，我活的不容易，他活的也不容易。不过，如果你看了下面的故事，就会知道，有位老汉比你还不容易。 
 <br><br>重庆市郊黄泥板村的徐老汉（大号徐东海，简称XDH）这两年辛辛苦苦养了不少羊，到了今年夏天，由于众所周知的高温干旱，实在没办法解决牲畜的饮水问题，就决定把这些羊都赶到集市去卖。从黄泥板村到交易地点要经过N个收费站，按说这收费站和徐老汉没什么关系，但是事实却令徐老汉欲哭无泪：
 
 <br><br>（镜头回放） 
 <br><br>近景：老汉，一群羊 
 <br>远景：公路，收费站 
 <br><br>...... 
 <br><br>收费员（彬彬有礼+职业微笑）：“老同志，请交过路费！” 
 <br><br>徐老汉（愕然，反应迟钝状）：“锅，锅，锅，锅-炉-费？我家不烧锅炉呀？” 
 <br><br>收费员（职业微笑依然）：“老同志，我说的是过-路-费，就是你的羊要过这个路口必须交费，understand?” 
 <br><br>徐老汉（近镜头10秒，嘴巴张开）：“我-我-我知道汽车过路要收费，这羊也要收费呀？” 
 <br><br>收费员（居高临下+不解状）：“老同志，你怎么就不明白呢，那么我问你，汽车几个轮子？” 
 <br><br>徐老汉（稍放松）：“这个我知道，今天在家里我孙子还问我这个问题，4个！” 
 <br><br>收费员（生气，站起）：“嘿！老头，你还骂人不带脏字，既然知道汽车四个轮子，难道就不知道这羊有几条腿吗？！” 
 <br><br>徐老汉（尴尬，依然不解状）：“也，也，也是4个呀，这有关系吗？” 
 <br><br>收费员（生气，站起）：“怎么没关系！我们头说了，只要是4条腿的都要收费！” 
 <br><br>...... 
 <br><br>(画外音) 
 <br><br>由于徐老汉没钱，收费员就将他的羊拿走一半，看到老汉泪水涟涟，犹豫了一下，又还给老汉一只。巧合的是，后面每过一个收费站，都是拿走当时羊的一半，然后退还一只，等到老汉到达市场，就只剩下3只羊了。 
 <br><br>你,当代有良知的青年，能帮忙算一下老汉最初有多少只羊吗？ 
 <br> 

    
        Input
        输入数据第一行是一个整数N，下面由N行组成，每行包含一个整数a(0&lt;a&lt;=30),表示收费站的数量。 
<br>
    
        Output
        对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。 
<br>
    
        Sample Input
        </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
1
2</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>
    
        Sample Output
        </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4
6</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>挺喜欢这种题目的，很简单，有需要一点思考还能看看故事</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int main(){
	int n;
	scanf("%d",&amp;n);
	while(n--){
		int a;
		scanf("%d",&amp;a);
		int i,sum=3;
		for(i=0;i&lt;a;i++)
		{
			sum=(sum-1)*2;//这一次的羊是上一次的除二加一，那么回推过去
		}//经过a个收费站
		printf("%d\n",sum);
	}
	
	return 0;
} </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2018-12-24 00:31:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-24 00:31:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%8d%e5%ae%b9%e6%98%93%e7%b3%bb%e5%88%97%e4%b9%8b%e4%ba%8c-hdu-2042]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hdu 错题整理</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/24/hdu-%e9%94%99%e9%a2%98%e6%95%b4%e7%90%86/</link>
		<pubDate>Mon, 24 Dec 2018 15:26:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2103 结果都正确，但就是wa：少打了个0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>hdu 1408 盐水的故事</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2018-12-24 15:26:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-24 15:26:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hdu-%e9%94%99%e9%a2%98%e6%95%b4%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The calculation of GPA HDU - 1202</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/24/218/</link>
		<pubDate>Mon, 24 Dec 2018 15:59:26 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

每学期的期末，大家都会忙于计算自己的平均成绩，这个成绩对于评奖学金是直接有关的。国外大学都是计算GPA(grade point average) 又称GPR(grade point ratio)，即成绩点数与学分的加权平均值来代表一个学生的成绩的。那么如何来计算GPA呢？&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一般大学采用之计分法&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A90 - 100 4 点&nbsp;<br>B80 - 89 3 点&nbsp;<br>C70 - 79 2 点&nbsp;<br>D60 - 69 1 点&nbsp;<br>E0 - 59 0 点&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如：某位学生修习三门课，其课目、学分及成绩分别为：&nbsp;<br>英文：三学分、92 分；化学：五学分、80 分；数学：二学分、60分，则GPA的算法如下：&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>科目&nbsp;学分&nbsp;分数&nbsp;点数&nbsp;分数×点数&nbsp;&nbsp;<br>英文&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;92&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12&nbsp;<br>化学&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15&nbsp;<br>数学&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;60&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<br>合计&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;29&nbsp;<br>29/10=2.9&nbsp;<br>2.9即为某生的GPA&nbsp;<br>下面有请你写一个用于计算GPA的程序。&nbsp;<br>Input包含多组数据，每组数据的第一行有一个数N，接下来N行每行表示一门成绩。每行有两个实型的数 s,p，s表示这门课的学分,p表示该学生的成绩（百分制）。如果p=-1则说明该学生这门课缺考，是不应该计算在内的。&nbsp;<br>Output对每组数据输出一行，表示该学生的GPA，保留两位小数。如果GPA不存在，输出-1。&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3
3 92
5 80
2 60</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2.90<br><br><br>1.注意点输出结果是小数<br>2.分数乘以点数<br>3.多组数据<br>4.无gpa情况<br>5.缺考情况</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int judge(int n){
	if(n>=90&amp;&amp;n&lt;=100){
		return 4;
	}
	else if(n>=80&amp;&amp;n&lt;90){
		return 3;
	}
	else if(n>=70&amp;&amp;n&lt;80){
		return 2;
	}
	else if(n>=60&amp;&amp;n&lt;70){
		return 1;
	}
	else
	{
		return 0;
	}
} 
int main()
{
	//因为最后输出的是小数干脆全用double 
	int N;
	double s,p;
	while(scanf("%d" ,&amp;N) != EOF)
	{
		int i,k;
		double sums= 0.0 ,sump = 0.0;
		//不能用太多的for循环这题有时间要求 
		for(i=1;i&lt;=N; i++)
		{
			scanf("%lf%lf",&amp;s,&amp;p);
			if(p== -1)//缺考的情况 
			{
				s=0;//没有学分 
			}
			else{
						k = judge(p);
			}
			sums += s;
			sump += (s*k);
		}
		if(sums == 0 || sump == 0)//分母分子只要有一个为0，就gpa不存在
		 
		printf("-1\n");
		else
		printf("%.2lf\n",sump*1.0/sums);//注意要乘1.0 
	}
	return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2018-12-24 15:59:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-24 15:59:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[218]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>电梯 HDU - 1008</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/25/%e7%94%b5%e6%a2%af-hdu-1008/</link>
		<pubDate>Tue, 25 Dec 2018 09:55:59 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

我们城市最高的建筑只有一部电梯。请求列表由N个正数组成。数字表示电梯将以指定顺序停在哪些楼层。将电梯向上移动一层需要6秒钟，向下移动一层楼需要4秒钟。电梯将在每个站点停留5秒钟。&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于给定的请求列表，您将计算在列表上完成请求所花费的总时间。电梯在开始时位于0楼，并且在满足要求时不必返回到底层。&nbsp;<br>输入有多个测试用例。每个案例包含一个正整数N，后跟N个正数。输入中的所有数字都小于100. N = 0的测试用例表示输入结束。不处理此测试用例。&nbsp;<br>产量为每个测试用例打印一行的总时间。&nbsp;<br>样本输入</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1 2
3 2 3 1
0</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>样本输出</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">17 41<br><br>模拟法的应用</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
int main(){
	int n;
	int i;
	int time = 0;
	while(scanf("%d",&amp;n)&amp;&amp;n!=0)
	{
		int a;//上升到的楼层 
		int nowstay = 0;//从第0层开始 
	int m;
		scanf("%d",&amp;m);//第一个要到达的楼层
	time = m * 6 + n * 5;//顺便把所有楼层的停留时间都计算了 
		nowstay = m;
		for(i=1;i&lt;n;i++)
			{
			scanf("%d",&amp;a);
			time += (a-nowstay)>0 ?(a-nowstay)*6 :(nowstay-a)*4;
			nowstay=a; 
				
			}
		printf("%d\n",time);
		
	}
	return 0;
	
} </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2018-12-25 09:55:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-25 09:55:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%b5%e6%a2%af-hdu-1008]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>模拟法</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/25/%e6%a8%a1%e6%8b%9f%e6%b3%95/</link>
		<pubDate>Tue, 25 Dec 2018 09:58:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>通常是对一类事件进行描述，通过事件发生的先后顺序进行输入输出</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>模拟法解题一般有两种形式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.随机模拟</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.过程模拟</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2018-12-25 09:58:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-25 09:58:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a8%a1%e6%8b%9f%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Chinese remainder theorem again</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/25/chinese-remainder-theorem-again/</link>
		<pubDate>Tue, 25 Dec 2018 15:22:43 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

我知道部分同学最近在看中国剩余定理，就这个定理本身，还是比较简单的：&nbsp;<br>假设m1,m2,…,mk两两互素，则下面同余方程组：&nbsp;<br>x≡a1(mod m1)&nbsp;<br>x≡a2(mod m2)&nbsp;<br>…&nbsp;<br>x≡ak(mod mk)&nbsp;<br>在0&lt;=&lt;m1m2…mk内有唯一解。&nbsp;<br>记Mi=M/mi(1&lt;=i&lt;=k),因为（Mi,mi）=1,故有二个整数pi,qi满足Mipi+miqi=1,如果记ei=Mi/pi,那么会有：&nbsp;<br>ei≡0(mod mj),j!=i&nbsp;<br>ei≡1(mod mj),j=i&nbsp;<br>很显然，e1a1+e2a2+…+ekak就是方程组的一个解，这个解加减M的整数倍后就可以得到最小非负整数解。&nbsp;<br>这就是中国剩余定理及其求解过程。&nbsp;<br>现在有一个问题是这样的：&nbsp;<br>一个正整数N除以M1余(M1 - a)，除以M2余(M2-a), 除以M3余(M3-a),总之， 除以MI余(MI-a),其中（a&lt;Mi&lt;100 i=1,2,…I）,求满足条件的最小的数。&nbsp;<br>Input输入数据包含多组测试实例，每个实例的第一行是两个整数I(1&lt;I&lt;10)和a,其中，I表示M的个数，a的含义如上所述，紧接着的一行是I个整数M1,M1...MI，I=0 并且a=0结束输入，不处理。&nbsp;<br>Output对于每个测试实例，请在一行内输出满足条件的最小的数。每个实例的输出占一行。&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 1
2 3
0 0</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>题目的意思就是求解i个数字的公倍数然后减去a</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意节省时间和变量的大小</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
long long gcd(long long a,long long b){
	return b==0? a:gcd(b,a%b);
}
long long gbs(long long a,long long b){
	return a*b/gcd(a,b);
} 
int main(){
	long long I,a;
	while(scanf("%lld %lld",&amp;I,&amp;a)&amp;&amp;a!=0){
		//I表示M的个数
		long long temp = 1;
		long long s;
	for(int i=0; i&lt;I; i++){
		scanf("%lld",&amp;s);
		temp = gbs(temp,s);
	}
	printf("%lld\n",temp-a);
	}
	
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2018-12-25 15:22:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-25 15:22:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chinese-remainder-theorem-again]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hdu 1205 吃糖果</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/26/hdu-1205-%e5%90%83%e7%b3%96%e6%9e%9c/</link>
		<pubDate>Wed, 26 Dec 2018 01:00:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

因为某场比赛某位同学打表没有打对，而且因为在上一场训练赛中被写进了题目里，他悲痛欲绝，不光在群里把昵称改成了不会打表且没有去过九里校区的xxxxx，而且希望通过吃糖来缓解自己的压力。他非常挑食，从来不连续吃两颗相同的糖。他有N种糖可以选择，希望你帮他计算是否能一次性吃完所有的糖。如果可以请输出Yes，否则输出No&nbsp;<br>Input第一行有一个整数T，接下来T组数据，每组数据占2行，第一行是一个整数N（0&lt;N&lt;=1000000)，第二行是N个数，表示N种糖果的数目Mi(0&lt;Mi&lt;=1000000)。&nbsp;<br>Output对于每组数据，输出一行，包含一个"Yes"或者"No"。&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
3
4 1 1
5
5 4 3 2 1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">No Yes            Please use function scanf<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>我的思路：最多的那一种糖果数如果大于剩下的糖果数那么一定没法吃完，那不过不大于呢，剩下的有需要就都可以找最大的那一组拿</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>鸽巢原理： <br>把多于n+1个的物体放到n个抽屉里，则至少有一个抽屉里的东西不少于两件。 //但我感觉我没有用到</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
int main(){
	int t;
scanf("%d",&amp;t);
while(t--){
		int n;
		scanf("%d",&amp;n);//糖的种类数 
	int *sweet=(int *)malloc(1*sizeof(int));
	long long sum=0;//每个糖果都不是大数但和在一起就是了，流泪
	int max=0;//一定要给max赋初始值不然就是错的，因为第一输入的时候就要比较 
	for(int i=0; i&lt;n; i++){
		scanf("%d",&amp;sweet[0]);
		
		sum +=sweet[0];
		
		max = (max&lt;sweet[0])?sweet[0]: max;
	}
	printf("%s\n",(max > sum - max + 1) ? "No" : "Yes");//若是最多的比剩下的多则否 
	free(sweet); 
}
	
	return 0;
} </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2018-12-26 01:00:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-26 01:00:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hdu-1205-%e5%90%83%e7%b3%96%e6%9e%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A + B Problem II HDU - 1002</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/26/235/</link>
		<pubDate>Wed, 26 Dec 2018 15:46:48 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.&nbsp;<br>InputThe first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.&nbsp;<br>OutputFor each test case, you should output two lines. The first line is "Case #:", # means the number of the test case. The second line is the an equation "A + B = Sum", Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 
1 2 
112233445566778899 998877665544332211</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Case 1: 
1 + 2 = 3 

Case 2: 
112233445566778899 + 998877665544332211 = 1111111111111111110</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>关于大数问题需要使用字符串，对每个位置进行计算</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如12345+96543</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我们会怎么计算呢？在还不熟练加减的时候</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>没错，我们会每个位置对应起来加减，然后进位</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1   2   3   4   5</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>9   6   5   3   4</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> —————— </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>10    8  8   7   9</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我们就需要用到字符串，但是加减需要数组于是如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdio.h>
#include &lt;string.h>
#include&lt;stdlib.h>

char m[1001], n[1001];//输入用 
int a[1001], b[1001];//过程计算与最后输出用 
 
int main()
{
    int t;
    scanf("%d", &amp;t);
    for(int k=1; k&lt;=t; k++) {
        scanf("%s%s", m, n);//先以字符串的形式输入
		//为数组int 类型的数组清零
        memset(a, 0, sizeof(a));	//也可以用 for循环,但复杂度会高 				
        memset(b, 0, sizeof(b));
        		int len1 = strlen(m);//计算的是m字符串的长度 
		        int len2 = strlen(n);//计算的是n字符串的长度
        for(int i=len1-1,j=0; i>=0; i--,j++)
            a[j] = m[i] - '0';//-'0'的目的是把字符串转换成int
			//顺便逆序，使得之后能够对位相加，进位 

        for(int i=len2-1,j=0; i>=0; i--,j++)
            b[j] = n[i] - '0';//同上
 

		int len = (len1>len2 )? len1: len2;
        int carry = 0;//将前一位进的值储存在进位里
        for(int i=0; i&lt;len; i++) {
            a[i] += b[i] + carry;
            carry = a[i] / 10;//如果小于10结果就是0不用担心多算
				a[i] %= 10;//a实际能储存就只有一个位置上的数字 
        }
        if(carry > 0)
            a[len++] = carry;
 
        // 输出结果（需要注意输出格式：隔行输出）
        if(k != 1)
            printf("\n");
        printf("Case %d:\n", k);
        printf ("%s + %s = ", m, n);
        for(int i=len-1; i>=0; i--)
            printf("%d", a[i]);
        printf("\n");
    }
 
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2018-12-26 15:46:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-26 15:46:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[235]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>不要62 HDU - 2089</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/27/%e4%b8%8d%e8%a6%8162-hdu-2089/</link>
		<pubDate>Thu, 27 Dec 2018 11:40:34 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>对于数字好像大家都喜欢找他们的谐音，所以，62和4，这样的数字，人们会觉得这样的数不好。&nbsp;<br>我们定义，如果给定的一串数字，如果其中含有62或者4，我们叫他为not good number。例如：62123 96480 66734，但是对于61152这样的数字，虽然含有6和2，但不是62连号，所以他是一个good number。<br>现在，让你找出对于区间[n,m]，找出里面的good number的个数。Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入有多组数据，每组由两个整数n、m构成（0&lt;n≤m&lt;1000000），如果n和m均为0，则输入结束。Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于每个整数对，输出good number的个数，该数值占一行。Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 100<br>0 0Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>80</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
//打表，即求出一个区间内的所有结果然后需要的就在表中寻找
int judge(int x){
	while(x!=0){
		if(x%100==62){
			return 0;
		}
		else if(x%10==4){
			return 0;
		}

		x/=10;
	}
	return 1;//为什么不把return 1;放在循环里面呢，是因为要求出每个位置才的数你才能确定它是不是good number，而不能只通过一次就判断出来呀 
}
int x[10000000];

int main(){
	int a,b;
	for(int i=1; i&lt;1000000 ;i++){
		x[i] = x[i-1] + judge(i);//因为判断返回的值就是0或者1 ，所以如果是good number 就会有+1，就相当于帮你计数了 
	}
	while(scanf("%d%d",&amp;a,&amp;b)){
		if(a==0||b==0){
			break; 
		}
		printf("%d\n",x[b]-x[a-1]); //b之前的所有减去a之前的所有就是a与b之间的了，因为包括端点a所以减的是a-1 
	} 
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2018-12-27 11:40:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-27 11:40:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%8d%e8%a6%8162-hdu-2089]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>分数矩阵 HDU - 2156</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/27/243/</link>
		<pubDate>Thu, 27 Dec 2018 16:29:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

我们定义如下矩阵:&nbsp;<br>1/1 1/2 1/3&nbsp;<br>1/2 1/1 1/2&nbsp;<br>1/3 1/2 1/1&nbsp;<br>矩阵对角线上的元素始终是1/1，对角线两边分数的分母逐个递增。&nbsp;<br>请求出这个矩阵的总和。&nbsp;<br>Input每行给定整数N (N&lt;50000)，表示矩阵为 N*N.当N为0时，输入结束。Output输出答案，保留2位小数。Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code></code></pre>
<!-- /wp:code -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1
2
3
4
0</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1.00
3.00
5.67
8.83</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/* HDU2156 分数矩阵 */
 //如果用循环一个一个加的话太麻烦了，因为矩阵是有规律的所以可以
#include &lt;stdio.h>
 
int main()
{
    int n, i;
    double sum;
 
    while(scanf("%d", &amp;n)&amp;&amp;n) {
        /* 斜对角和 */
        sum = n;        /* n * 1 */
 
        /* 下三角与上三角之和：1/i的数量 */
        for(i=2; i&lt;=n; i++)
            sum += 1.0 / i * (n - i + 1) * 2;
 
        printf("%.2lf\n", sum);
    }
 
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2018-12-27 16:29:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-27 16:29:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[243]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>大数 HDU - 1018</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/%e5%a4%a7%e6%95%b0-hdu-1018/</link>
		<pubDate>Fri, 28 Dec 2018 02:41:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>刚看到这一题的时候脑壳疼，想到阶层，大数，字符串就感觉难受，查了一下阶层位数的计算方法，有数学公式：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例：1000！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>log10(1)+...+log10(1000)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>然后上面之和取整加1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>直接用循环完成就可以了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目如下：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

在许多应用中，需要非常大的整数。其中一些应用程序使用密钥进行数据的安全传输，加密等。在这个问题中给出一个数字，你必须确定数字的阶乘数字。&nbsp;<br>输入输入由几行整数组成。第一行包含一个整数n，这是要被测试的病例数，其次是n行，一个整数1≤N≤10&nbsp;<sup>7</sup>在每一行上。&nbsp;<br>产量输出包含输入中出现的整数的阶乘的位数。&nbsp;<br>样本输入</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
10
20</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>样本输出</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">7 19<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>//数学公式直接ac 
#include&lt;math.h>//记得log10函数需要math头文件
int main(){
	int n;
		scanf("%d",&amp;n);
		while(n--){
			int a;
			scanf("%d",&amp;a);
			double sum = 0;
			for(int i=1; i&lt;=a; i++){
				sum += log10(i); 
			}
			printf("%d\n",(int)sum+1);
		}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 02:41:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 02:41:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%a7%e6%95%b0-hdu-1018]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>统计元音 HDU - 2027</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/%e7%bb%9f%e8%ae%a1%e5%85%83%e9%9f%b3-hdu-2027/</link>
		<pubDate>Fri, 28 Dec 2018 02:46:11 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

统计每个元音字母在字符串中出现的次数。&nbsp;<br>Input输入数据首先包括一个整数n，表示测试实例的个数，然后是n行长度不超过100的字符串。&nbsp;<br>Output对于每个测试实例输出5行，格式如下：&nbsp;<br>a:num1&nbsp;<br>e:num2&nbsp;<br>i:num3&nbsp;<br>o:num4&nbsp;<br>u:num5&nbsp;<br>多个测试实例之间由一个空行隔开。&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>请特别注意：最后一块输出后面没有空行：）&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 aeiou <br>my name is ignatius</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">a:1 e:1 i:1 o:1 u:1 a:2 e:1 i:3 o:0 u:1<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>注意有个很坑的地方题目说最后没有空格，然而是有空格的，pe wa到脑壳疼</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
#include&lt;stdlib.h>
int main(){
	int n;
	char p[101];
	scanf("%d",&amp;n);
			getchar();
	while(n--){

		gets(p);
		int len = strlen(p);//计算整个的长度
		int num1=0,num2=0,num3=0,num4=0,num5=0;
		for(int i=0; i&lt;len; i++){
			if(p[i]=='a'){
				num1++;
			}
			else if(p[i]=='e'){
				num2++;
			}
			else if(p[i]=='i')
			{
				num3++;
			}
			else if(p[i]=='o'){
				num4++;
			}
			else if(p[i]=='u'){
				num5++;
			}
		}
//		if(n!=0)
//		printf("a:%d\ne:%d\ni:%d\no:%d\nu:%d\n\n",num1,num2,num3,num4,num5);
//		else{
//			printf("a:%d\ne:%d\ni:%d\no:%d\nu:%d",num1,num2,num3,num4,num5);
//		}
		 printf("a:%d\ne:%d\ni:%d\no:%d\nu:%d\n",num1,num2,num3,num4,num5);
         if(n){
             printf("\n");
         }
	}
	return 0;
} </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 02:46:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 02:46:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%9f%e8%ae%a1%e5%85%83%e9%9f%b3-hdu-2027]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>c语言中输出需要注意的地方</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/c%e8%af%ad%e8%a8%80%e4%b8%ad%e8%be%93%e5%87%ba%e9%9c%80%e8%a6%81%e6%b3%a8%e6%84%8f%e7%9a%84%e5%9c%b0%e6%96%b9/</link>
		<pubDate>Fri, 28 Dec 2018 05:38:59 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>更新相关：2018/12/28 第一次更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>提示：*代表需要注意的地方</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>目录</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）输出函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）输出类型</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3）进制输出</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4）输出格式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"dropCap":true,"customFontSize":22} -->
<p style="font-size:22px" class="has-drop-cap">输出函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>经常使用的输出函数主要就是printf</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>偶尔字符串的输出会使用到put，* put输出函数输出完后会自动输出一个换行符</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 05:38:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 05:38:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c%e8%af%ad%e8%a8%80%e4%b8%ad%e8%be%93%e5%87%ba%e9%9c%80%e8%a6%81%e6%b3%a8%e6%84%8f%e7%9a%84%e5%9c%b0%e6%96%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>进制转换 HDU - 2031</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/%e8%bf%9b%e5%88%b6%e8%bd%ac%e6%8d%a2-hdu-2031/</link>
		<pubDate>Fri, 28 Dec 2018 07:54:14 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

输入一个十进制数N，将它转换成R进制数输出。Input输入数据包含多个测试实例，每个测试实例包含两个整数N(32位整数)和R（2&lt;=R&lt;=16, R&lt;&gt;10）。&nbsp;<br>Output为每个测试实例输出转换后的数，每个输出占一行。如果R大于10，则对应的数字规则参考16进制（比如，10用A表示，等等）。Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">7 2
23 12
-4 3</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">111 1B -11<br><a rel="noreferrer noopener" href="https://cn.vjudge.net/problem/28241/origin" target="_blank">H</a></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
//他说大于10进制的要用类似与16进制的处理方法处理，
//而不是用16进制处理，题目没看清，导致找不出问题 
//注意负数的处理
void turnaround(char *x,int len){

	//进行逆序，直接更改x字符串
int i;
int j;
int temp;
//如果是零位已经有符号了，就从i+1开始排

if(x[0]=='-'){
	i=1;
}
else{
	i=0;
}
for( j=len-1; i&lt;j; i++,j--){
	temp = x[i];
	x[i] = x[j];
	x[j] = temp;
}
}

void del(int n,int r,char *x)//处理，将每个位置进制化后储存在字符串中 
{
	int i=0;
	if(n&lt;0){//这里要考虑负号的情况
		x[i]='-';
n=-n;
		i++;
	}
	while(n!=0){
		x[i]=n%r;
	if(x[i]>=10){
		x[i] += 'A'-10;
}
else{
	x[i] += '0';
}
		n/=r;
		i++; 
	}
	x[i]='\0';
	turnaround(x,i);
}
int main(){
	char x[33];
	//32位整数
	memset(x,0,33);
	
		int n,r;
	while(scanf("%d%d",&amp;n,&amp;r)!=EOF){
		del(n,r,x);
		printf("%s\n",x);
			memset(x,0,33);
		
	}
	return 0;
	}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 07:54:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 07:54:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%9b%e5%88%b6%e8%bd%ac%e6%8d%a2-hdu-2031]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>算菜价 HDU - 2090</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/%e7%ae%97%e8%8f%9c%e4%bb%b7-hdu-2090/</link>
		<pubDate>Fri, 28 Dec 2018 08:40:20 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

妈妈每天都要出去买菜，但是回来后，兜里的钱也懒得数一数，到底花了多少钱真是一笔糊涂帐。现在好了，作为好儿子（女儿）的你可以给她用程序算一下了，呵呵。输入输入含有一些数据组，每组数据包括菜种（字串），数量（计量单位不论，一律为double型数）和单价（double型数，表示人民币元数），因此，每组数据的菜价就是数量乘上单价啊。菜种、数量和单价之间都有空格隔开的。&nbsp;<br>产量支付菜价的时候，由于最小支付单位是角，所以总是在支付的时候采用四舍五入的方法把分头去掉。最后，请输出一个精度为角的菜价总量。&nbsp;<br>样本输入</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">青菜 1  2
罗卜 2  1.5
鸡腿 2  4.2</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>样本输出</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">13.4<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>这题题目是有点问题的，没有给循环的结束条件也没说清楚输入几组难受</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
struct vet{
	char name[100];
	double  num;
	double price;
};//也可以用结构体，但是我下面没有用
//由于最小支付单位是角，
//所以总是在支付的时候采用四舍五入的方法把分头
int main(){
//	struct vet x;
	double sum=0,a,b;
		while(scanf("%s%lf%lf",x.name,&amp;a,&amp;b)!=EOF)
			sum += a * b;
sum *=100;
sum +=5;
sum /=100;
		printf("%.1lf\n",sum);//换行符不能漏漏了就pe
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 08:40:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 08:40:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%97%e8%8f%9c%e4%bb%b7-hdu-2090]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>I Love This Game HDU - 2115</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/28/i-love-this-game-hdu-2115/</link>
		<pubDate>Fri, 28 Dec 2018 11:23:12 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Do you like playing basketball ? If you are , you may know the NBA Skills Challenge . It is the content of the basketball skills . It include several parts , such as passing , shooting , and so on. After completion of the content , the player who takes the shortest time will be the winner . Now give you their names and the time of finishing the competition , your task is to give out the rank of them ; please output their name and the rank, if they have the same time , the rank of them will be the same ,but you should output their names in lexicographic order.You may assume the names of the players are unique.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Is it a very simple problem for you? Please accept it in ten minutes.&nbsp;<br>InputThis problem contains multiple test cases! Ease test case contain a n(1&lt;=n&lt;=10) shows the number of players,then n lines will be given. Each line will contain the name of player and the time(mm:ss) of their finish.The end of the input will be indicated by an integer value of zero.&nbsp;<br>OutputThe output format is shown as sample below.&nbsp;<br>Please output the rank of all players, the output format is shown as sample below;&nbsp;<br>Output a blank line between two cases.Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">10
Iverson 17:19
Bryant 07:03
Nash 09:33
Wade 07:03
Davies 11:13
Carter 14:28
Jordan 29:34
James 20:48
Parker 24:49
Kidd 26:46
0</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Case #1 Bryant 1 Wade 1 Nash 3 Davies 4 Carter 5 Iverson 6 James 7 Parker 8 Kidd 9 Jordan 10<br><br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>一定要注意换行符的输出实际上就第二个例子开始上面有换行，然后最后没有换行</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
struct player{
	char name[30];
	int m;
	int s;
	int alls;//将分钟数都化成秒数
	int g;//等级 
};
void change(struct player *p,int n){
	for(int i = 0; i&lt;n; i++){
		p[i].alls = p[i].m*60+p[i].s;
	}
}//计算总秒数
void sort(struct player *p,int n){
	struct player temp;
	int cnt=1;
	for(int i=0; i&lt;n; i++){
		for(int j=0; j&lt;n-i-1; j++){
			if( p[j+1].alls &lt; p[j].alls){
				temp = p[j+1];
				p[j+1] = p[j];
				p[j] = temp;
			}
		}
	}//排序
	for(int i=0; i&lt;n; i++){
		if(p[i].alls==p[i+1].alls){
			p[i+1].g= cnt;
			p[i].g = cnt;
			i++;
			cnt++;//会到里面是因为有一样的，所以cnt要加2，里面加1外面加1就可以了
		}
		else{
			p[i].g=cnt;

		}
		cnt++;
	}//给排名
}

int main(){
	int n;
int j=1;
	while(scanf("%d",&amp;n)&amp;&amp;n){
		struct player *p=(struct player*)malloc(n*sizeof(struct player));	
	for(int i=0; i&lt;n; i++){
		scanf("%s%d:%d",p[i].name,&amp;p[i].m,&amp;p[i].s);
	}
	change(p,n);
	sort(p,n);

	if(j==1){
		printf("Case #%d\n",j);	
	}
		else{
			printf("\nCase #%d\n",j);
		}//注意看换行符的输出位置
	for(int i=0; i&lt;n; i++){
		printf("%s %d\n",p[i].name,p[i].g);
	}
	j++;
//	printf("\n");
	}


	return 0;
} </code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 11:23:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 11:23:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-love-this-game-hdu-2115]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/29/265/</link>
		<pubDate>Sat, 29 Dec 2018 09:23:20 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>一定需要理清思路的一道题，理清思路就会很简单，否则就会很乱</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate "pronounceable" passwords that are relatively secure but still easy to remember.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>FnordCom is developing such a password generator. You work in the quality control department, and it's your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules:&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It must contain at least one vowel.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It cannot contain three consecutive vowels or three consecutive consonants.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It cannot contain two consecutive occurrences of the same letter, except for 'ee' or 'oo'.&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>(For the purposes of this problem, the vowels are 'a', 'e', 'i', 'o', and 'u'; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.&nbsp;<br>InputThe input consists of one or more potential passwords, one per line, followed by a line containing only the word 'end' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.&nbsp;<br>OutputFor each password, output whether or not it is acceptable, using the precise format shown in the example.&nbsp;<br>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">a
tv
ptoui
bontres
zoggax
wiinq
eep
houctuh
end</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">&lt;a> is acceptable.<br>&lt;tv> is not acceptable.<br>&lt;ptoui> is not acceptable. <br>&lt;bontres> is not acceptable. <br>&lt;zoggax> is not acceptable. <br>&lt;wiinq> is not acceptable. <br>&lt;eep> is acceptable. <br>&lt;houctuh> is acceptable.<br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
int judgeone(char *a){
	for(int i=0; i&lt;strlen(a); i++){
		if(a[i]=='a'||a[i]=='e'||a[i]=='i'||a[i]=='o'||a[i]=='u') return 1;
	}	
	return 0;
}//在主函数里面如果判断为0那就说明一个都没有直接是不符合的
int judgeyuanyin(char a){
	if(a=='a'||a=='e'||a=='i'||a=='o'||a=='u') return 1;
	else{
		return 0;
	}
}//为下面连续两个判断和连续三个判断
int judgenext(char *a){//判断时候有连续三个一样的
	for(int i=0; i+2&lt;strlen(a); i++){
		if(judgeyuanyin(a[i])==1&amp;&amp;judgeyuanyin(a[i+1])==1&amp;&amp;judgeyuanyin(a[i+2])==1){
			return 0;
		}
		if(judgeyuanyin(a[i])==0&amp;&amp;judgeyuanyin(a[i+1])==0&amp;&amp;judgeyuanyin(a[i+2])==0){
			return 0;
		}
	}
	
	return 1;
}//如果有三个一样的就会返回0 

int judgetwo(char *a){
	for(int i=0; i&lt;strlen(a)-1; i++){
		if(a[i]==a[i+1]){
			if(a[i]!='e'&amp;&amp;a[i]!='o')
			return 0;
		}
	}
	return 1;
} 
int main(){
	char s[40];
	char w[21];
	while(scanf("%s",s)!=EOF){
		if(s[0]=='e'&amp;&amp;s[1]=='n'&amp;&amp;s[2]=='d'){
			break;
		}
		if(judgeone(s)==0){
			printf("&lt;%s> is not acceptable.\n",s);
			memset(w,0,21);
			memset(s,0,40);
			continue;
		}//如果一个元音也没有直接不符 
		else if(judgenext(s)==0){
			printf("&lt;%s> is not acceptable.\n",s);
			memset(w,0,21);
			memset(s,0,40);
			continue;
		}//连续三个原因或者辅音也是不符 
		else if(judgetwo(s)==0){
			printf("&lt;%s> is not acceptable.\n",s);
			memset(w,0,21);
			memset(s,0,40);
			continue;
		}//如过上面都过了，就说明是符合条件的了
		else{
			printf("&lt;%s> is acceptable.\n",s);
			memset(w,0,21);
			memset(s,0,40);
			continue;
		}
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2018-12-29 09:23:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-29 09:23:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[265]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>随笔2018/12/31</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/31/%e9%9a%8f%e7%ac%942018-12-31/</link>
		<pubDate>Mon, 31 Dec 2018 14:55:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>12/30 10;30- 12/31 1;30 第一次接触codeforces，很紧张的打开codeforces网站，加载的好慢呀2333，可能是人多吧，不知道点哪里开始，一点一点的问管师哥，才知道了，A题很简单但是却不知道点哪个提交，提交了还错，最后发现是语言选择错了，心痛</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>后面的题目就没有后面了，翻译粘在一起，看不懂看不懂下次用百度翻译吧，不管如何都是一次很好的经历，未来的我会进步</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>也真正见识到了世界顶尖选手到底有多强，tourist真的强到爆炸，简直就是神仙，第一题一分钟不到就ac了包括打完代码 orz就完事了</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2018-12-31 14:55:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-31 14:55:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9a%8f%e7%ac%942018-12-31]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Good Bye 2018 B</title>
		<link>http://yx.telstudy.xyz/index.php/2018/12/31/good-bye-2018-b/</link>
		<pubDate>Mon, 31 Dec 2018 16:28:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>Problem Statement</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bob is a pirate looking for the greatest treasure the world has ever seen. The treasure is located at the point T, which coordinates to be found out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bob travelled around the world and collected clues of the treasure location at n obelisks. These clues were in an ancient language, and he has only decrypted them at home. Since he does not know which clue belongs to which obelisk, finding the treasure might pose a challenge. Can you help him?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As everyone knows, the world is a two-dimensional plane. The i-th obelisk is at integer coordinates (xi,yi). The j-th clue consists of 2 integers (aj,bj) and belongs to the obelisk pj, where p is some (unknown) permutation on n elements. It means that the treasure is located at T=(xpj+aj,ypj+bj). This point T is the same for all clues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In other words, each clue belongs to exactly one of the obelisks, and each obelisk has exactly one clue that belongs to it. A clue represents the vector from the obelisk to the treasure. The clues must be distributed among the obelisks in such a way that they all point to the same position of the treasure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your task is to find the coordinates of the treasure. If there are multiple solutions, you may print any of them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that you don't need to find the permutation. Permutations are used only in order to explain the problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Input</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first line contains an integer n (1≤n≤1000) — the number of obelisks, that is also equal to the number of clues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Each of the next n lines contains two integers xi, yi (−106≤xi,yi≤106) — the coordinates of the i-th obelisk. All coordinates are distinct, that is xi≠xj or yi≠yj will be satisfied for every (i,j) such that i≠j.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Each of the next n lines contains two integers ai, bi (−2⋅106≤ai,bi≤2⋅106) — the direction of the i-th clue. All coordinates are distinct, that is ai≠aj or bi≠bj will be satisfied for every (i,j) such that i≠j.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is guaranteed that there exists a permutation p, such that for all i,j it holds (xpi+ai,ypi+bi)=(xpj+aj,ypj+bj).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Output</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Output a single line containing two integers Tx,Ty — the coordinates of the treasure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If there are multiple answers, you may print any of them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Examples</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>input1</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>2
2 5
-6 4
7 -2
-1 -3</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>output1</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1 2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>input2</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>4
2 2
8 2
-7 0
-2 6
1 -14
16 -12
11 -18
7 -14</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>output2</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>9 -12</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Note</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As n=2, we can consider all permutations on two elements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If p=[1,2], then the obelisk (2,5) holds the clue (7,−2), which means that the treasure is hidden at (9,3). The second obelisk (−6,4) would give the clue (−1,−3) and the treasure at (−7,1). However, both obelisks must give the same location, hence this is clearly not the correct permutation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the hidden permutation is [2,1], then the first clue belongs to the second obelisk and the second clue belongs to the first obelisk. Hence (−6,4)+(7,−2)=(2,5)+(−1,−3)=(1,2), so T=(1,2) is the location of the treasure.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://codeforces.com/predownloaded/0e/5a/0e5a60e7ffaebe64bce23f928c5e07bc8a95df08.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the second sample, the hidden permutation is [2,3,4,1].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>问题陈述</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>鲍勃是一位正在寻找世界上最伟大财富的海盗。宝藏位于T点，协调发现。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>鲍勃走遍世界各地，收集了方尖碑上宝藏位置的线索。这些线索是古老的语言，他只在家里解密。由于他不知道哪个线索属于哪个方尖碑，找到宝藏可能会带来挑战。你能帮助他吗？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>众所周知，世界是一个二维平面。第i个方尖碑位于整数坐标（xi，yi）。第j个线索由2个整数（aj，bj）组成，属于方尖碑pj，其中p是n个元素上的一些（未知）排列。这意味着宝藏位于T =（xpj + aj，ypj + bj）。对于所有线索，这一点T是相同的。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>换句话说，每条线索都属于一个方尖碑，每个方尖碑都只有一条属于它的线索。线索代表从方尖碑到宝藏的矢量。必须在方尖碑之间分配线索，使它们都指向宝藏的相同位置。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>你的任务是找到宝藏的坐标。如果有多种解决方案，您可以打印其中任何一种。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>请注意，您不需要查找排列。排列仅用于解释问题。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>输入</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第一行包含一个整数n（1≤n≤1000） - 方尖碑的数量，也等于线索的数量。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来的n行中的每一行包含两个整数xi，yi（-106≤xi，yi≤106） - 第i个方尖碑的坐标。所有坐标都是不同的，即对于每个（i，j）将满足xi≠xj或yi≠yj，使得i≠j。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来的n行中的每一行包含两个整数ai，bi（-2⋅106≤ai，bi≤2⋅106） - 第i个线索的方向。所有坐标都是不同的，即ai≠aj或bi≠bj将满足每个（i，j），使得i≠j。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>保证存在置换p，使得对于所有i，j它保持（xpi + ai，ypi + bi）=（xpj + aj，ypj + bj）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>产量</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出一行包含两个整数Tx，Ty - 宝藏的坐标。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果有多个答案，您可以打印其中任何一个。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我的理解，每个点是方尖塔的位置，经过位移得到宝藏的位置，因为位置相同所以宝藏的所有位置加起来除以n就是宝藏的位置</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
#include&lt;string.h>
struct place{
    long long x;
    long long y;
};
int main(){
    int n;
    scanf("%d",&amp;n);
    n*=2;
    long long sumx=0,sumy=0;
    struct place *p=(struct place *)malloc(sizeof(struct place) * n);
    for(int i=0; i&lt;n; i++){
        scanf("%lld %lld",&amp;p[i].x,&amp;p[i].y);
        sumx+=p[i].x;
        sumy+=p[i].y;

    }
    n/=2;
    printf("%lld %lld",sumx/n,sumy/n);
    free(p);

return 0;
}//其实坐标可以不用long long， sum还是用long long比较保险一点</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2018-12-31 16:28:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-31 16:28:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[good-bye-2018-b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e8%b4%aa%e5%bf%83"><![CDATA[贪心]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>实训内容开发日志</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/02/%e5%ae%9e%e8%ae%ad%e5%86%85%e5%ae%b9%e8%af%a6%e7%bb%86%e5%88%86%e9%85%8d/</link>
		<pubDate>Wed, 02 Jan 2019 04:51:06 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>实训小队队名：文体两开花</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>刘宇轩</li><li>石宸彬</li><li>朱忠壮</li><li>伊然</li><li>谢法吉</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>项目名字 ：游戏界面设计</li><li>（完成该模块后将，划去，例：<del> 完成完成完成完成完成</del>）</li><li>历史版本：1.01</li><li>最终版本：</li><li>需求分析:</li><li>项目内容（模块）</li><li></li><li>1. 登陆界面设计：具体功能有，//谢法鸡</li><li>1）登陆</li><li>2）退出</li><li>3）注册</li><li><del>4）注销</del></li><li>5）余额查询</li><li>6）账号状态查询（hack or not）</li><li></li><li></li><li>2.充值系统（考虑是否实现，能使游戏过程中所获得积分以金额形式化入账号//伊然</li><li>1）充值</li><li>2）消费</li><li>3）返回上一级</li><li>4）vip等级</li><li></li><li>3. 游戏界面 //刘宇轩</li><li>1）难度</li><li>2）开始</li><li>3) 积分排名查询（需要排序）</li><li>4）返回上一级菜单 ---->登陆界面</li><li>5）前往充值系统 ------></li><li>6）进入欢迎页面------></li><li></li><li>4.根据充值金额显示不同欢迎进入语句【较简单】//朱忠壮</li><li>1）进入游戏（直接调用函数）</li><li>5.游戏内容 // 石宸彬</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2019-01-02 04:51:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-02 04:51:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9e%e8%ae%ad%e5%86%85%e5%ae%b9%e8%af%a6%e7%bb%86%e5%88%86%e9%85%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>6-1 删除字符</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/05/6-1-%e5%88%a0%e9%99%a4%e5%ad%97%e7%ac%a6/</link>
		<pubDate>Sat, 05 Jan 2019 11:59:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p> 本题要求实现一个删除字符串中的指定字符的简单函数。 </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>void delchar( char *str, char c );
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>其中<code>char *str</code>是传入的字符串，<code>c</code>是待删除的字符。函数<code>delchar</code>的功能是将字符串<code>str</code>中出现的所有<code>c</code>字符删除。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdio.h>
#define MAXN 20

void delchar( char *str, char c );
void ReadString( char s[] ); /* 由裁判实现，略去不表 */

int main()
{
    char str[MAXN], c;

    scanf("%c\n", &amp;c);
    ReadString(str);
    delchar(str, c);
    printf("%s\n", str);

    return 0;
}

/* 你的代码将被嵌在这里 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>a
happy new year
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>hppy new yer</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：多建一个指针来储存更改就好了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>void delchar( char *str, char c ){

	char *p = str;
	char *q = str;
	while(*p!='\0'){
		if(*p!=c){
			*q=*p;
			q++;
		}
		p++;
	}
	*q='\0';
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2019-01-05 11:59:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-05 11:59:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6-1-%e5%88%a0%e9%99%a4%e5%ad%97%e7%ac%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>6-2 判断回文字符串</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/05/6-2-%e5%88%a4%e6%96%ad%e5%9b%9e%e6%96%87%e5%ad%97%e7%ac%a6%e4%b8%b2/</link>
		<pubDate>Sat, 05 Jan 2019 12:15:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=291</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>bool palindrome( char *s );
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>函数<code>palindrome</code>判断输入字符串<code>char *s</code>是否为回文。若是则返回<code>true</code>，否则返回<code>false</code>。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdio.h>
#include &lt;string.h>

#define MAXN 20
typedef enum {false, true} bool;

bool palindrome( char *s );

int main()
{
    char s[MAXN];

    scanf("%s", s);
    if ( palindrome(s)==true )
        printf("Yes\n");
    else
        printf("No\n");
    printf("%s\n", s);

    return 0;
}

/* 你的代码将被嵌在这里 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-1-">输入样例1：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>thisistrueurtsisiht
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-1-">输出样例1：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Yes
thisistrueurtsisiht
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-2-">输入样例2：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>thisisnottrue
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-2-">输出样例2：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>No
thisisnottrue</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>解题：指针一个一个遍历</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":5} -->
<h5></h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>bool palindrome( char *s ){<br>     char *p=s;<br>     int  len=strlen(s);<br>     for( int i = 0 ;  i &lt; len/2;  i++){<br>         if( *(p+i) ! = *(p+len-i-1)){<br>             return false;<br>         }<br>     }<br>     return true;<br> }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2019-01-05 12:15:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-05 12:15:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6-2-%e5%88%a4%e6%96%ad%e5%9b%9e%e6%96%87%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>6-3 计算最长的字符串长度 （15 分）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/05/6-3-%e8%ae%a1%e7%ae%97%e6%9c%80%e9%95%bf%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%95%bf%e5%ba%a6-%ef%bc%8815-%e5%88%86%ef%bc%89/</link>
		<pubDate>Sat, 05 Jan 2019 13:11:43 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=293</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":5} -->
<h5></h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>本题要求实现一个函数，用于计算有n个元素的指针数组s中最长的字符串的长度。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int max_len( char *s[], int n );
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>其中<code>n</code>个字符串存储在<code>s[]</code>中，函数<code>max_len</code>应返回其中最长字符串的长度。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;stdio.h>
#include &lt;string.h>
#include &lt;stdlib.h>

#define MAXN 10
#define MAXS 20

int max_len( char *s[], int n );

int main()
{
    int i, n;
    char *string[MAXN] = {NULL};

    scanf("%d", &amp;n);
    for(i = 0; i &lt; n; i++) {
        string[i] = (char *)malloc(sizeof(char)*MAXS);
        scanf("%s", string[i]);
    }
    printf("%d\n", max_len(string, n));

    return 0;
}

/* 你的代码将被嵌在这里 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>4
blue
yellow
red
green
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：理解二维字符串数组</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int max_len( char *s[], int n ){
	//本题要求实现一个函数，用于计算有n个元素的指针数组s中最长的字符串的长度。
	int max=0; 
	for(int i=0; i&lt;n; i++){
		if(strlen(s[i])>strlen(s[max])){
			max=i;
		}
	}
	return strlen(s[max]);
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2019-01-05 13:11:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-05 13:11:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6-3-%e8%ae%a1%e7%ae%97%e6%9c%80%e9%95%bf%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%95%bf%e5%ba%a6-%ef%bc%8815-%e5%88%86%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/1/8下午3：18计划</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/08/2019-1-8%e4%b8%8b%e5%8d%883%ef%bc%9a18%e8%ae%a1%e5%88%92/</link>
		<pubDate>Tue, 08 Jan 2019 07:18:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=296</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>思修选择题写到6：00</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以上两次厕 1 2</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以喝2次水或者牛奶 1 2</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>6：30吃完饭</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>6：40开始背诵思修的大题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.大学生如何践行社会主义价值观</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.创新主要是这两个点</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date><![CDATA[2019-01-08 07:18:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-08 07:18:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-1-8%e4%b8%8b%e5%8d%883%ef%bc%9a18%e8%ae%a1%e5%88%92]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/1/9随笔</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/09/2019-1-9%e9%9a%8f%e7%ac%94/</link>
		<pubDate>Wed, 09 Jan 2019 13:05:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>落到谷底的时候，不妨想想，是让你去寻找一处宝藏</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>难得有那么一些感悟，便写在文首了。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>考试周终于是来了呀，可是感觉我还没来，英语的慌张，思修的不安，准备了再多也像没有准备一般，大概是因为我弱吧，挺难受的，当自己真正意识到自己的摸样，要承认也要接受是挺不容易的事的</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":299} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_14211-1024x768.jpg" alt="" class="wp-image-299"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":300} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_14221-1024x768.jpg" alt="" class="wp-image-300"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":301} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_142320190109-180913-768x1024.jpg" alt="" class="wp-image-301"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":302} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/IMG_142420190109-180949-768x1024.jpg" alt="" class="wp-image-302"/><figcaption>厚的惊人的思修</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>但愿能有一个好的成绩吧，但是可能有点难了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>最近很想家，想爸爸也想妈妈，感觉真的很对不起辛辛苦苦努力的他们的，担心他们的身体，他们的生活，《浪子回头》《厦门》最近超喜欢听的歌呢，我在被窝里看着厦门的风景，眼泪还是落了呀，古人远行的思乡之情也是如此吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>晚上回到宿舍吃饭的时候，掉了一粒米在地上，想叫彬彬的，却突然想起来，它还在家里呢，可能还望着窗外等我回来呢，家里的阿姨也回家了，它自己呆在家里会不会害怕，是不是还在窗口等着我打开门，等我喊它呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>codefroces真的好难阿，几次看到榜上前几有好多比我小的，就觉得我废</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2019-01-09 13:05:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-09 13:05:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-1-9%e9%9a%8f%e7%ac%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%97%a5%e5%b8%b8"><![CDATA[日常]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[302]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>选择排序法，冒泡排序法，qsort排序法，详解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/11/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8cqsort%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e8%af%a6%e8%a7%a3/</link>
		<pubDate>Fri, 11 Jan 2019 04:41:01 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2019/1/11第一次更新</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例题1：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 对数组进行排序（原题是对数组运用选择排序法，但其实这三种排序法都能ac </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入一个正整数 repeat (0&lt;repeat&lt;10)，做 repeat 次下列运算：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入一个正整数 n (1&lt;n&lt;=10)，再输入 n 个整数存入数组 a 中，用选择法将数组 a 中的元素按升序排列，最后输出排序后的数组元素。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>要求定义并调用函数 sort(a，n)，它的功能是采用选择排序算法，将数组 a 的前 n 个元素按从小到大的顺序排序，函数形参 a 的类型是整型指针，形参n的类型是int，函数的类型是void。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出格式：数据直接以空格分隔，最后的一个数据后面没有空格。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入输出示例：括号内为说明，无需输入输出</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3           (repeat=3) 
4           (n=4) 
5 1 7 6
3           (n=3) 
1 2 3
5           (n=5) 
5 4 3 2 1 
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>After sorted: 1 5 6 7 
After sorted: 1 2 3 
After sorted: 1 2 3 4 5

 </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：本题是练习排序法很好的一个例题，并且在考察选择排序法的同时还考察了格式的书写，题目又十分简单，我的解答中出现内存，也可以定义一个很大的数组就怕超过，但本题不会</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//选择排序法
#include&lt;stdio.h>
#include&lt;stdlib.h>
void SelectiveSort(int *a,int n){
	int temp;
	int min;
	for(int i=0; i&lt;n; i++){
		min = i;
		for(int j=i+1; j&lt;n; j++){
			if(a[min]>a[j]){
				min=j;
			}
		}
		if(a[min]&lt;a[i]){
			temp=a[i];
			a[i]=a[min];
			a[min]=temp;
		}
	}
}
int main(){
	int repeat;
	scanf("%d",&amp;repeat);
	while(repeat--){
		int n;
		scanf("%d",&amp;n);
		int *a=(int *)malloc(sizeof(int)*n);
		for(int i=0; i&lt;n; i++){
			scanf("%d",&amp;a[i]);
		}
		SelectiveSort(a,n);
		printf("After sorted: ");
		for(int i=0; i&lt;n; i++){
			if(i==0)printf("%d",a[i]);
			else printf(" %d",a[i]);
		}
		printf("\n");
		free(a);
	}
	return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":312} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114342.png" alt="" class="wp-image-312"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>题解：qsort是c语言库中自带的函数，直接调用就可以啦</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//qsort排序
#include&lt;stdio.h>
#include&lt;stdlib.h>
#include&lt;string.h> 
int cmp(int *a,int *b){
	
	return (*(int *)a-*(int *)b);
	
}
void sort(int *a,int n){
  qsort(a,n,sizeof(int),cmp);
}
int main(){
	int t;
	scanf("%d",&amp;t);
	while(t--){
		int n;
		scanf("%d",&amp;n);
		int *p=(int *)malloc(sizeof(int)*n);
		for(int i=0; i&lt;n; i++){
			scanf("%d",&amp;p[i]);
		}
sort(p,n);
printf("After sorted: ");
		for(int i=0; i&lt;n; i++){
			if(i==0)printf("%d",p[i]);
			else printf(" %d",p[i]);
		}
		printf("\n");
		free(p);
	}
	return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":313} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111124010.png" alt="" class="wp-image-313"/></figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image"><img alt=""/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>最简单的冒泡排序法</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
void SelectiveSort(int *a,int n){
	int temp;

	for(int i=0; i&lt;n; i++){
		for(int j=0; j&lt;n-i-1; j++){
			if(a[j+1]&lt;a[j]){
				temp=a[j+1];
				a[j+1]=a[j];
				a[j]=temp;
			}
		}

	}
}
int main(){
	int repeat;
	scanf("%d",&amp;repeat);
	while(repeat--){
		int n;
		scanf("%d",&amp;n);
		int *a=(int *)malloc(sizeof(int)*n);
		for(int i=0; i&lt;n; i++){
			scanf("%d",&amp;a[i]);
		}
		SelectiveSort(a,n);
		printf("After sorted: ");
		for(int i=0; i&lt;n; i++){
			if(i==0)printf("%d",a[i]);
			else printf(" %d",a[i]);
		}
		printf("\n");
		free(a);
	}
	return 0;
} </code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":314} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/QQ图片20190111114439.png" alt="" class="wp-image-314"/></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 04:41:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-11 04:41:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8cqsort%e6%8e%92%e5%ba%8f%e6%b3%95%ef%bc%8c%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%8e%92%e5%ba%8f"><![CDATA[排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[314]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>7-2 统计一行文本的单词个数</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/7-2-%e7%bb%9f%e8%ae%a1%e4%b8%80%e8%a1%8c%e6%96%87%e6%9c%ac%e7%9a%84%e5%8d%95%e8%af%8d%e4%b8%aa%e6%95%b0/</link>
		<pubDate>Sat, 12 Jan 2019 01:49:48 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输入给出一行字符。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在一行中输出单词个数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Let's go to room 209.
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：利用查找函数查找每一处空格</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
#include&lt;string.h>
int num(char *str){
	char *p=str;
	while(*p==' '){
		p++;
	}
	if(*p=='\0'){
		return 0;
	}
	int cnt=1;
	while((p=strchr(p,' '))!=NULL){

			while(*p==' '){
				p++;
			}		
			if(*p!='\0'){
			cnt++;
		}

	}
	return cnt;
}
int main(){
	char str[1024];
	gets(str);
	printf("%d",num(str));
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 01:49:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 01:49:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7-2-%e7%bb%9f%e8%ae%a1%e4%b8%80%e8%a1%8c%e6%96%87%e6%9c%ac%e7%9a%84%e5%8d%95%e8%af%8d%e4%b8%aa%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>7-4 删除重复字符</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/7-4-%e5%88%a0%e9%99%a4%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6/</link>
		<pubDate>Sat, 12 Jan 2019 02:19:12 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=319</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>本题要求编写程序，将给定字符串去掉重复的字符后，按照字符ASCII码顺序从小到大排序后输出。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输入是一个以回车结束的非空字符串（少于80个字符）。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输出去重排序后的结果字符串。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>ad2f3adjfeainzzzv
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>23adefijnvz</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：指针的运用</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>

void del(char* str) {
	char* p=str;
	while(*p!='\0') {
		if(strchr(p+1,*p)==NULL) {
			*str=*p;
			p++;
			str++;
		} else {
			p++;
		}
	}
	*str='\0';
}
void sort(char* str) {
	int len=strlen(str);
	char temp;
	for(int i=0; i&lt;len; i++) {
		for(int j=0; j&lt;len-1-i; j++) {
			if(str[j+1]&lt;str[j]) {
				temp=str[j+1];
				str[j+1]=str[j];
				str[j]=temp;
			}
		}
	}
}
int main() {
	char str[1024];
	gets(str);
	del(str);
	sort(str);
	for(int i=0;  i&lt;strlen(str); i++) {
		printf("%c",str[i]);
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 02:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 02:19:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7-4-%e5%88%a0%e9%99%a4%e9%87%8d%e5%a4%8d%e5%ad%97%e7%ac%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>7-5 找最长的字符串</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/7-5-%e6%89%be%e6%9c%80%e9%95%bf%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2/</link>
		<pubDate>Sat, 12 Jan 2019 02:41:28 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>本题要求编写程序，针对输入的N个字符串，输出其中最长的字符串。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输入第一行给出正整数N；随后N行，每行给出一个长度小于80的非空字符串，其中不会出现换行符，空格，制表符。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在一行中用以下格式输出最长的字符串：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>The longest is: 最长的字符串
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>如果字符串的长度相同，则输出先输入的字符串。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>5
li
wang
zhang
jin
xiang
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>The longest is: zhang</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：二维数组的申请，字符串的输入</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
#include&lt;stdlib.h>
int main(){
	int n;
	scanf("%d",&amp;n);
char (*str)[81]=(char(*)[81])malloc(sizeof(char)*n*81);  
	int max=0;
	getchar();
	for(int i=0; i&lt;n; i++){
		gets(str[i]);
	}
	for(int i=0; i&lt;n ;i++){
		if(strlen(str[i])>strlen(str[max])){
			max=i;
		}
	}
	printf("The longest is: %s",str[max]);
	free(str);
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 02:41:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 02:41:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7-5-%e6%89%be%e6%9c%80%e9%95%bf%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/1/12随笔</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/12/2019-1-12%e9%9a%8f%e7%ac%94/</link>
		<pubDate>Sat, 12 Jan 2019 13:10:50 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=324</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>洗澡的时候想到既然没什么事就写一下吧，于是就来写了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>早晨还是爬不起来，被子呀就宛若藤曼一般拉扯着我，起来喝了点巧克力牛奶也便没吃什么了，后来整理了一下pta的题目也算是做了点事情了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>中午吃了个饭便去教室看数学了，居然冬日暖阳下的午间我也会也睡意，许是趴在桌子上睡了一小会吧，这样也挺好，整理了下数学的内容</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":325} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/01/image-768x1024.png" alt="" class="wp-image-325"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>挺多东西的，拾起丢掉东西的快乐也就是如此吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>加上昨天晚上自己一个人，在教室整理的，就仿佛有一种凡人强大的恣意感</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>但也浪费了不少时间，其实晚上我也不该回宿舍了，走出舒适圈，去遇见不一样的自己</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date><![CDATA[2019-01-12 13:10:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-12 13:10:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-1-12%e9%9a%8f%e7%ac%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[326]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/1/15随笔</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/15/2019-1-15%e9%9a%8f%e7%ac%94/</link>
		<pubDate>Tue, 15 Jan 2019 13:42:14 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>我的同学考完期末考回家了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>他们从优秀的地方回到最爱的地方</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>而卑微的我只能匍匐的仰望那个我所热爱的小岛</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>他们能带着所有的荣耀以及万众羡慕的目光踏上回程，而我只有不堪</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>你问我既然如此为什么还要回去，大概是因为爱得深沉，大概是太过思念家人了吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我也只有努力罢了，待到那一日</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>也许呐，白色的冬雪不是寂寥刺骨的银刃，是雪的一展婀娜，不要让生活太多灰色，多愁善感的人生活也会变得多愁善感，艳丽的春日也将会靠近热爱生活的人</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>高数考完了，考的时候感觉还可以，可一出考场在同学们的言语对答案中发现世界又在对我开玩笑了，这种感觉挺难受的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>失败与落后其实并不是我落寞或者害怕深深畏惧的事物，而是我为之努力之后却发现我一切的努力似乎都不具有什么意义</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>，我深知我自己的能力与脑子不会比别人强上多少，但我也绝对不相信自己弱于别人，我更希望是我努力之后有所结果而证明了我努力了我的得到了我所渴望与追求的事物</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我也希望自己幸运，聪明，但是现实总是要给炙热的人生一盆冷水，我阿，一定要憋住一口气，对我只有一次的人生认真点，用心点</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date><![CDATA[2019-01-15 13:42:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-15 13:42:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-1-15%e9%9a%8f%e7%ac%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于字符串的输入问题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/16/%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e8%be%93%e5%85%a5%e9%97%ae%e9%a2%98/</link>
		<pubDate>Wed, 16 Jan 2019 02:34:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=331</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2019/1/16更新 部分内容源自百度</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>什么是字符串？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>字符串或串(String)是由数字、字母、下划线组成的一串字符。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>关于字符串的正确输入方式</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>要注意字符串最后存在一个\0,这是一个字符，在定义字符串大小时是绝对不能忽视的，否则则可能造成数据的溢出</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>第一种输入方式</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>char s[5];
scanf("%s",s);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>这是最基本的输入方式，有两个注意点就上面这个例子来讲</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.字符串的输入是不需要取地址符号&amp;，因为s本身就是一个地址了，不要再对地址取地址符号了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.输入的字符串的长度最多只能是4，如果是5的话就会是数据溢出了，因为还存在\0这一个字符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意：如果在写程序时上</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//出现这种情况
int n;
char s[5];
scanf("%d",&amp;n);
scanf("%s",s);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>这里的n输出一般是以换行键作为输入结束的，因此缓冲区会有一个换行符\n，所以如果直接输入字符串的话，第一位就是换行符，而字符串变成最多只能输入三个字符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解决办法：我们一般会用 getchar(); 读取掉那一个换行符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第二种输入方式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>gets输入方式</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>char s[5];
gets(s);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>gets读取是读取一行的内容直到遇到换行符才结束，而scanf遇到空格就会结束了，所以如果想读取的字符串中有空格的话还是用gets会比较好</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>字符串的正确定义方式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 正确定义：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>char[]={‘c’,’c’,’c’};或char[4]={‘c’,’c’,’c’}；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>需要注意下列问题：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.char[]={“cc”};</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果使用这种定义方法，则数组长度必须大于字符串的长度，至少大1。当然也可以不指定数组长度；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如：char[3]={“str”}char[3]=”ccc”;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>以上这两种，错误定义，系统会报错，字符溢出。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.char[3]={‘c’,’c’,’c’};</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这种定义方法，系统不会报错，但最后的输出会出现乱码。 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> C语言中，字符串的表现形式有两种：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一种是以字符数组的形式，如char str[20]="I love china";</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>另一种是以字符指针的形式，如char *str="I love china"。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>字符串可以赋值给字符指针变量，或者将字符串用字符数组保存。因为c语言没有直接对字符串提供语法糖方面的支持。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>而且C标准库很多方法处理字符串是以空字符结尾为前提的，这个必须要记住。</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>123</td><td><code>char</code>&nbsp;<code>*p,a=</code><code>'5'</code><code>;</code><code>p=&amp;a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//显然是正确的，</code><code>p=</code><code>"abcd"</code><code>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//但为什么也可以这样赋值？？</code></td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>在如上程序中，双引号做了3件事：申请了空间(在常量区)，存放了字符串 ；在字符串尾加上了’/0’ ；返回地址。这里就是把返回的地址赋值给了p。

</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date><![CDATA[2019-01-16 02:34:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-16 02:34:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e8%be%93%e5%85%a5%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>选择判断题整理</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/16/%e9%80%89%e6%8b%a9%e5%88%a4%e6%96%ad%e9%a2%98%e6%95%b4%e7%90%86/</link>
		<pubDate>Wed, 16 Jan 2019 05:16:51 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=333</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>1.int x; 计算(double)x后，x的类型为double。（F）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.以下C语言表达式的值为“真”。（F）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>'D' - 'A'
== 'd' - 'a'</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.设a=5,b=6,c=7,d=8,m=2,n=2，执行(m=a &gt; b）&amp;&amp;(n=c&gt;d)后n的值为2。(1分)(T)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4.表达式__不能用于判断“x和y不同时为零”。&nbsp;(2分) !(x==0 || y==0)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5.在if语句的三种形式中，如果要想在满足条件时执行一组(多个)语句，则必须把这一组语句用{}括起来组成一个复合语句。(T)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>6. 在switch语句中，每一个的case常量表达式的值可以相同(F)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>7. &nbsp;for循环的三个表达式都可以省略。&nbsp;都省略相当於 while(1)(T)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>8. 执行以下程序段，sum的值是55。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int i, sum;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>for (i = 1; i &lt;= 10; i++){</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;
sum = sum + i;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>是错误的，没有给sum赋初始值</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>9. 以下程序段的功能是计算20的阶乘。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int i;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>double product;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>product = 0;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>for (i = 1; i &lt;= 20; i++){ </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;
product = product * i;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Product的初始值出现了问题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>10. for(int i=0,j=10; i=j=10; i++,j--)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>执行循环的次数会是无限次</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>11. 若int i,j;，则&nbsp;for(i=j=0;
i&lt;10&amp;&amp;j&lt;8; i++,j+=3)&nbsp;控制的循环体的执行次数是3次</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>12. 在C语言的函数定义中，如果不需要返回结果，就可以省略return语句。&nbsp;(1分</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>13. 静态局部变量如果没有赋值，其存储单元中将是随机值。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>是错误的会赋值0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>14. 如果函数定义出现在函数调用之前，可以不必加函数原型声明。（T）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>15. 在一个被调用函数中，关于 return 语句使用的描述，错误的是（ ）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>被调用函数中，一个 return 语句可以返回多个值给调用函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意该题是选择错误的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>16. 有说明语句int a[4][5];，则a[2]+3表示__。&nbsp;(2分)</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>a数组行下标为2、列下标为3的元素的地址</li><li>a数组行下标为2、列下标为3的元素的值</li><li>a数组第2行的首地址</li><li>a数组第3行的首地址</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>17. 以下能对二维数组y进行初始化的语句是（ ）。&nbsp;(1分)</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>int y[
][3]={{1,2,3},{4,5,6}};</li><li>int y[2][
]={{1,0,1},{5,2,3}};</li><li>int
y[2][4]={{1,2,3},{4,5},{6}};</li><li>int y[ ][3]={{1,0,1,0},{
},{1,1}};</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>18. 若有下面的数组定义，则数组a的元素个数是（ ）。(1分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int a[ ][3]={0,1,2,3,4,5,6,7,8,9};</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>sizeof(a)/sizeof(int)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>19. 关于C语言指针的运算：指针只有加减操作，没有乘除操作。指针可以加常数、减常数；相同类型的指针可以相加、相减</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>是错误的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>20. 在基类型相同的两个指针变量之间，不能进行的运算是（ ）。&nbsp;(2分) +</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>就是规定不能相加</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>21. 在说明语句“ int *f( )；”中，标识符 f 代表是（ ）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一个返回值为指针型的函数名</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>C语言的结构<ol><li>正确的函数名</li></ol><ol><li>正确的变量名</li></ol><ol><li>正确的表达式</li></ol><ol><li>指针数组与数组指针</li></ol></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>22. 一个多运算对象的表达式运算时的前后顺序是先看优先级，高优先级先计算，低优先级后计算！在优先级相同的情况下，要看结合性，左结合性的运算符由左向右运算，右结合的运算符由右向左运算！<br>
C语言中具有右结合性的运算符包括所在<a href="https://www.baidu.com/s?wd=%E5%8D%95%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noreferrer noopener">单目运算符</a>以及<a href="https://www.baidu.com/s?wd=%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noreferrer noopener">赋值运算符</a>（=）和条件运算符。其它都是左结合性！<br>
例如：<br>
表达式a=b=c+d+e*f<br>
式中*号优先级最高，所以首先计算e*f，然后两个+号涉及的三个对象c、d、(e*f)的计算顺序则是左结合，即先计算c+d，然后再计算(c+d)+(e*f)！<br>
因为<a href="https://www.baidu.com/s?wd=%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noreferrer noopener">赋值运算符</a>=的优先级低于<a href="https://www.baidu.com/s?wd=%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noreferrer noopener">算术运算符</a>，所以之后再计算：<br>
a=b=(c+d+e*f)，而又因为=的结合性是由右向左，所以接下来再计算：<br>
b=(c+d+e*f)，最后才计算a=(b=(c+d+e*f))!!!<br>
而楼上说的例子就更错了！<br>
函数的参数先右后左是指当一个函数的参数有多个时，先计算右边的参数再计算左边的参数！而楼上的例子printf("%d",a/b*c);只有一个参数，无论如何a/b*c都是先a/b再*c!<br>
如果int i=1;printf("%d %d"i,++i);这个例子才能体现函数参数的计算顺序，先计算右边++i，再i,所以结果是2 2，而不是1 2。但和结合性无关，这是函数参数求值顺序！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>23. 执行语句int *p; 后，指针变量p只能指向int类型的变量。&nbsp;是对的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>24. 5</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>有以下函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int fun(char&nbsp; *a, char&nbsp;
*b)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>{&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp; while ( (*a!='\0') &amp;&amp; (*b!='\0')
&amp;&amp; (*a==*b ) )</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp; {&nbsp; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a++;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b++;&nbsp;
</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp; }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp; return&nbsp;
(*a-*b);</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>该函数的功能是____。&nbsp;(1分)</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>计算a和b所指字符串的长度之差</li><li>将b所指字符串复制到a所指字符串中</li><li>将b所指字符串连接到a所指字符串后面</li><li>比较a和b所指字符串的大小</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>25.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date><![CDATA[2019-01-16 05:16:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-16 05:16:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%89%e6%8b%a9%e5%88%a4%e6%96%ad%e9%a2%98%e6%95%b4%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Master-Mind Hints UVA - 340</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/24/master-mind-hints-uva-340/</link>
		<pubDate>Thu, 24 Jan 2019 01:12:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=338</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>解题报告输入包含多组数据。每组数据先输入n，n即为序列长度，第二行即为正确序列，剩下的即为猜测序列</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>求解的是（a，b），a统计多少数字位置正确，b则为正确数字但位置不正确的出现次数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/problem/UVA-340">https://cn.vjudge.net/problem/UVA-340</a></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;stdlib.h>
int main() {
	int n;
	int cnt=0;
	int a[1010],b[1010];
	while( scanf("%d",&amp;n)==1 &amp;&amp; n ) {
		printf("Game %d:\n",++cnt);

		for(int i=0; i&lt;n; i++)scanf("%d",&amp;a[i]);//输入正确的序列
		for(;;) {
			//输入猜测序列
			int A=0,B=0;
			for(int i=0; i&lt;n; i++) {
				scanf("%d",&amp;b[i]);
				if(a[i]==b[i])A++;
			}
			if( b[0] == 0 ) break;
			for(int d = 1; d &lt;= 9; d++) {
				int c1 = 0 ,c2 = 0 ;
				//统计数字d在答案序列和猜测序列中各出现多少次
				for(int i = 0 ; i &lt; n ; i++ ) {
					if(a[i] == d) {
						c1++;
					}
					if(b[i] == d) {
						c2++;
					}
				}
				if( c1 &lt; c2 ) {
					B += c1;
				} else {
					B += c2;
				}
			}
			printf("    (%d,%d)\n",A,B-A);

		}

	}


	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 01:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-24 01:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[master-mind-hints-uva-340]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e5%ad%a6"><![CDATA[数学]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Digit Generator UVA - 1583</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/24/digit-generator-uva-1583/</link>
		<pubDate>Thu, 24 Jan 2019 02:50:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>每个数字加上其各位数字之和会得到一个数字，现在已知这个最后加得的数字求原数字</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>存表，查表</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://cn.vjudge.net/problem/UVA-1583</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;stdio.h>
#include&lt;string.h>
#include&lt;stdlib.h>
#define maxn 100005
int a[maxn];
int main() {
	int t;
	memset(a,0,sizeof(a));
	for(int m=1; m&lt;maxn; m++) {
		int x=m,y=m;
		while(x>0){
			y+=x%10;
			x/=10;
		}
		if(a[y]==0||m&lt;a[y]){
			a[y]=m;
		}
	}
	scanf("%d",&amp;t);
	while(t--) {
		int n;
	scanf("%d",&amp;n);
	printf("%d\n",a[n]);
	}
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 02:50:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-24 02:50:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[digit-generator-uva-1583]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_99856be8841fcea52c8f4b66ad77f354]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_216b0abd0c34ff111eeab98e055abc98]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>STL之nth_element()（取容器中的第n大值）﻿</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/24/stl%e4%b9%8bnth_element%ef%bc%88%e5%8f%96%e5%ae%b9%e5%99%a8%e4%b8%ad%e7%9a%84%e7%ac%acn%e5%a4%a7%e5%80%bc%ef%bc%89%ef%bb%bf/</link>
		<pubDate>Thu, 24 Jan 2019 16:17:08 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1><a href="https://www.cnblogs.com/yxwkf/p/5233716.html">STL之nth_element()（取容器中的第n大值）</a></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>nth_element()函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>头文件：#include&lt;algorithm&gt;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>作用：nth_element作用为求第n大的元素，并把它放在第n位置上，下标是从0開始计数的，也就是说求第0小的元素就是最小的数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>如：a[start,end]元素区间。排序后a[n]就是数列中第n+1大的数（下标从0開始计数）。要注意的是a[start,n),</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>&nbsp;&nbsp;&nbsp; a[n,end]内的大小顺序还不一定。</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>仅仅能确定a[n]是数列中第n+1大的数。</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>当然a[start,n)中的数肯定不大于</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>&nbsp;&nbsp;&nbsp; a[n,end]中的数。</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>注意：nth_element()函数不过将第n大的数排好了位置，并不返回值。</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2019-01-24 16:17:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-24 16:17:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stl%e4%b9%8bnth_element%ef%bc%88%e5%8f%96%e5%ae%b9%e5%99%a8%e4%b8%ad%e7%9a%84%e7%ac%acn%e5%a4%a7%e5%80%bc%ef%bc%89%ef%bb%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>vector</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/25/vector/</link>
		<pubDate>Fri, 25 Jan 2019 02:51:39 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

在C++中vector是<a target="_blank" href="https://baike.baidu.com/item/C%2B%2B" rel="noreferrer noopener">C++</a><a target="_blank" href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93" rel="noreferrer noopener">标准模板库</a>中的部分内容，中文偶尔译作“容器”，但并不准确。它是一个多功能的，能够操作多种数据结构和算法的模板类和函数库。vector之所以被认为是一个容器，是因为它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的<a target="_blank" href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84" rel="noreferrer noopener">动态数组</a>，能够增加和压缩数据。<sup>&nbsp;[1]</sup><sup>[2]</sup>简单的使用方法如下：</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>1<br>23</td><td><code>vector&lt;int>test;</code><br><code>//建立一个vectortest.push_back(1);</code><br><code>test.push_back(2);//把1和2压入vector这样test[0]就是1,test[1]就是2</code></td></tr></tbody></table>
<!-- /wp:table -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date><![CDATA[2019-01-25 02:51:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-25 02:51:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vector]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Codeforces Round #535 (Div. 3) a题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/25/codeforces-round-535-div-3-a%e9%a2%98/</link>
		<pubDate>Fri, 25 Jan 2019 05:05:05 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="http://codeforces.com/contest/1108/problem/A">http://codeforces.com/contest/1108/problem/A</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：一段数轴上四个点，l1,r1,l2,r2，分别在l1,r1取一点，在l2,r2中取一点</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
using namespace std;
int main(){
    int t;
    cin >> t;
    while(t--){
        int l1,r1,l2,r2;
        cin >> l1 >> r1 >> l2 >> r2;
        vector&lt;int>a({l1,r1,l2,r2}); //容器，压缩
        int ans1 = 0,ans2 = 0;

        for(auto it :a)for(auto jt : a){
        if( l1 &lt;= it &amp;&amp; it &lt;= r1 &amp;&amp; l2 &lt;= jt &amp;&amp; jt &lt;= r2 &amp;&amp; it != jt)
        {
            ans1 = it;
            ans2 = jt;
        }

        }
        cout &lt;&lt; ans1 &lt;&lt; " " &lt;&lt; ans2 &lt;&lt; endl;

    }
return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>for(auto &amp;a:str)就相当于for循环 &amp;a就相当于int i=0;,遍历数组str</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date><![CDATA[2019-01-25 05:05:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-25 05:05:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codeforces-round-535-div-3-a%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1f6c9e9ba193a9f0089d7eb51c5b4539]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1002 写出这个数</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/25/1002-%e5%86%99%e5%87%ba%e8%bf%99%e4%b8%aa%e6%95%b0/</link>
		<pubDate>Fri, 25 Jan 2019 08:05:48 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=356</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>读入一个正整数&nbsp;<em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>每个测试输入包含 1 个测试用例，即给出自然数&nbsp;<em>n</em>&nbsp;的值。这里保证&nbsp;<em>n</em>&nbsp;小于&nbsp;10​100​​。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在一行内输出&nbsp;<em>n</em>&nbsp;的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1234567890987654321123456789
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>yi san wu</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=10000;
int main()
{
    ll sum=0;
    char a[N];
    memset(a,0,N);
    cin >> a;
    for(int i=0 ; i&lt;strlen(a); i++){
        sum += a[i]-'0';
    }
    int cnt=1;
    ll temp = sum;
    while(temp)
    {
        temp/=10;
        cnt*=10;
    }
    cnt/=10;
    while(cnt>0)
    {
        switch(sum/cnt)
        {
        case 0:
            cout&lt;&lt;"ling";
            break;
        case 1:
            cout&lt;&lt;"yi";
            break;
        case 2:
            cout&lt;&lt;"er";
            break;
        case 3:
            cout&lt;&lt;"san";
            break;
        case 4:
            cout&lt;&lt;"si";
            break;
        case 5:
            cout&lt;&lt;"wu";
            break;
        case 6:
            cout&lt;&lt;"liu";
            break;
        case 7:
            cout&lt;&lt;"qi";
            break;
        case 8:
            cout&lt;&lt;"ba";
            break;
        case 9:
            cout&lt;&lt;"jiu";
            break;
        }
        if(cnt>9)
        {
            cout&lt;&lt;" ";
        }
        sum -= sum/cnt*cnt;
        cnt/=10;
    }
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date><![CDATA[2019-01-25 08:05:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-25 08:05:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1002-%e5%86%99%e5%87%ba%e8%bf%99%e4%b8%aa%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>auto的用法</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/27/auto%e7%9a%84%e7%94%a8%e6%b3%95/</link>
		<pubDate>Sun, 27 Jan 2019 12:02:16 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

转载自http://blog.csdn.net/dodoto/article/details/48413481</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>auto的使用&nbsp;<br>c++11引入了auto类型说明符，auto让编译器通过初始值来推算变量的类型，所以auto定义的变量必须有初始值。&nbsp;<br>使用auto也能在一条语句中声明多个变量，因为一条声明语句只能有一个基本数据类型，所以该语句中所有变量的初始基本数据类型都必须一样：&nbsp;<br>eg: auto i=0,*p=&amp; i; //正确 auto sz=0,pi=3.14;//错误，sz和pi的类型不一样。</li><li>范围for循环，遍历给定序列中的每个元素并对序列中的每个值执行某种操作。</li></ol>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">for(declaration:expression)    statement   </pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>expression 部分是一个对象，用于表示一个序列，declaration部分负责定义一个变量，该变量被用于访问序列中的基础元素，每次迭代declaration部分的变量会被初始化为expression部分的下一个元素值。
</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li>1</li><li>2</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>范围for循环有两种用法：</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">string s("hello,world");decltype(s.size()) punct_cnt=0;<em>//decltype也是c++11特性，用于选择和返回操作数的数据类型。</em>for(auto c:s)<em>//对于s中的每个字符</em>    if(ispunct(c))        ++punct_cnt;</pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>string s("hello,world");for(auto &amp;c:s);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><em>//对于s中的每个字符，c是一个引用，赋值语句将会改变s中字符的值</em>    c=toupper(c);cout&lt;&lt;s&lt;&lt;endl;</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date><![CDATA[2019-01-27 12:02:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-27 12:02:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[auto%e7%9a%84%e7%94%a8%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="js%e6%95%99%e7%a8%8b"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>A. Digits Sequence Dividing</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/27/a-digits-sequence-dividing/</link>
		<pubDate>Sun, 27 Jan 2019 12:06:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=362</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You are given a sequence&nbsp;ss&nbsp;consisting of&nbsp;nn&nbsp;digits from&nbsp;11&nbsp;to&nbsp;99.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You have to divide it into&nbsp;<strong>at least two</strong>&nbsp;segments (segment — is a consecutive sequence of elements) (in other words, you have to place separators between some digits of the sequence) in such a way that&nbsp;<strong>each element belongs to exactly one segment</strong>&nbsp;and if the resulting division will be represented as an integer numbers sequence then each next element of this sequence will be&nbsp;<strong>strictly greater</strong>&nbsp;than the previous one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>More formally: if the resulting division of the sequence is&nbsp;t1,t2,…,tkt1,t2,…,tk, where&nbsp;kk&nbsp;is the number of element in a division, then for each&nbsp;iifrom&nbsp;11&nbsp;to&nbsp;k−1k−1&nbsp;the condition&nbsp;ti&lt;ti+1ti&lt;ti+1&nbsp;(using&nbsp;<strong>numerical</strong>&nbsp;comparing, it means that the integer representations of strings are compared) should be satisfied.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if&nbsp;s=654s=654&nbsp;then you can divide it into parts&nbsp;[6,54][6,54]&nbsp;and it will be suitable division. But if you will divide it into parts&nbsp;[65,4][65,4]&nbsp;then it will be bad division because&nbsp;65&gt;465&gt;4. If&nbsp;s=123s=123&nbsp;then you can divide it into parts&nbsp;[1,23][1,23],&nbsp;[1,2,3][1,2,3]&nbsp;but not into parts&nbsp;[12,3][12,3].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your task is to find&nbsp;<strong>any</strong>&nbsp;suitable division for each of the&nbsp;qq&nbsp;independent queries.Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first line of the input contains one integer&nbsp;qq&nbsp;(1≤q≤3001≤q≤300) — the number of queries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first line of the&nbsp;ii-th query contains one integer number&nbsp;nini&nbsp;(2≤ni≤3002≤ni≤300) — the number of digits in the&nbsp;ii-th query.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second line of the&nbsp;ii-th query contains one string&nbsp;sisi&nbsp;of length&nbsp;nini&nbsp;consisting only of digits from&nbsp;11&nbsp;to&nbsp;99.Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the sequence of digits in the&nbsp;ii-th query cannot be divided into&nbsp;<strong>at least two</strong>&nbsp;parts in a way described in the problem statement, print the single line "NO" for this query.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Otherwise in the first line of the answer to this query print "YES", on the second line print&nbsp;kiki&nbsp;— the number of parts in your division of the&nbsp;ii-th query sequence and in the third line print&nbsp;kiki&nbsp;strings&nbsp;ti,1,ti,2,…,ti,kiti,1,ti,2,…,ti,ki&nbsp;— your division. Parts should be printed in order of the initial string digits. It means that if you write the parts one after another without changing their order then you'll get the string&nbsp;sisi.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>See examples for better understanding.ExampleinputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4
6
654321
4
1337
2
33
4
2122
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>outputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">YES 3 6 54 321 YES 3 1 3 37 NO YES 2 21 22<br><br><br>题解：只要分成2块以上前一部分小于后一部分即可，题目未严格要求分成几个部分<br><br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main()
{
    int t;
    cin >> t;
    while(t--){
        int n;
        string s;
        cin >> n >> s;
        if(n==2 &amp;&amp; s[0]>=s[1] ){
            cout&lt;&lt;"NO"&lt;&lt;endl;

        }
        else{
            cout&lt;&lt;"YES"&lt;&lt;endl;
            cout&lt;&lt;"2"&lt;&lt;endl&lt;&lt;s[0]&lt;&lt;" "&lt;&lt; s.substr(1, s.size())&lt;&lt;endl;
        }
    }
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date><![CDATA[2019-01-27 12:06:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-27 12:06:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-digits-sequence-dividing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95"><![CDATA[高精]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C - 高橋君とカード / Tak and Cards AtCoder - 2037</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/27/c-%e9%ab%98%e6%a9%8b%e5%90%9b%e3%81%a8%e3%82%ab%e3%83%bc%e3%83%89-tak-and-cards-atcoder-2037/</link>
		<pubDate>Sun, 27 Jan 2019 12:21:18 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=364</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Problem Statement</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tak has&nbsp;<em>N</em>&nbsp;cards. On the&nbsp;<em>i</em>-th&nbsp;(1≤<em>i</em>≤<em>N</em>)&nbsp;card is written an integer&nbsp;<em>x</em><sub><em>i</em></sub>. He is selecting one or more cards from these&nbsp;<em>N</em>&nbsp;cards, so that the average of the integers written on the selected cards is exactly&nbsp;<em>A</em>. In how many ways can he make his selection?Constraints</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>1≤<em>N</em>≤50</li><li>1≤<em>A</em>≤50</li><li>1≤<em>x</em><sub><em>i</em></sub>≤50</li><li><em>N</em>, <em>A</em>, <em>x</em><sub><em>i</em></sub>&nbsp;are integers.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Partial Score</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>200&nbsp;points will be awarded for passing the test set satisfying&nbsp;1≤<em>N</em>≤16.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The input is given from Standard Input in the following format:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><em>N</em> <em>A</em>
<em>x</em><sub>1</sub> <em>x</em><sub>2</sub> … <em>x</em><sub><em>N</em></sub>
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Print the number of ways to select cards such that the average of the written integers is exactly&nbsp;<em>A</em>.Sample Input 1</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4 8
7 9 8 9
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 1</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5
</pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul><li>The following are the&nbsp;5&nbsp;ways to select cards such that the average is&nbsp;8:<ul><li>Select the&nbsp;3-rd card.</li><li>Select the&nbsp;1-st and&nbsp;2-nd cards.</li><li>Select the&nbsp;1-st and&nbsp;4-th cards.</li><li>Select the&nbsp;1-st,&nbsp;2-nd and&nbsp;3-rd cards.</li><li>Select the&nbsp;1-st,&nbsp;3-rd and&nbsp;4-th cards.</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Sample Input 2</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3 8
6 6 9
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 2</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">0
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Input 3</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">8 5
3 6 2 8 7 6 5 9
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 3</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">19
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Input 4</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">33 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 4</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">8589934591
</pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul><li>The answer may not fit into a 32-bit integer</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>题解：题目浏览下来感觉跟背包问题有很多像的地方于是就想到动态规划，然而不会动态规划，就靠自己理解的题目写，就想开一个超大的数组去解决，勉强写出来惹</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>本题需要注意大小，防止爆int，比赛的时候就因为int wa了好多次</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//#include&lt;stdio.h>
//#include&lt;stdlib.h>
//#include&lt;string.h>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=55;
const ll MOD=1e9+7;
int main()
{
    int n;
    int a;
//for(auto &amp;a:b)
//存在n*n种组合方法，求解满足条件的方法，遍历？
    cin>>n>>a;
    ll b[N][N*N]= {0};
    int p;
    ll cnt=0;//计算方法数
    b[0][0]=1;
    for(int i=1; i&lt;=n; i++)
    {
        cin>>p;
        for(int j=i-1; j>=0; j--)
        {
            for(int k=0; k&lt;=N*j; k++)
            {
                b[j+1][p+k]+=b[j][k];//将每一种可能加到一个p+k，使得每一个可能的和的地方数组储存的数字都为1
            }
        }
    }
    for(int i=1; i&lt;=n; i++)
    {
        cnt+=b[i][i*a];//若是i*a处不为0则说明p+k可以加到这个位置
    }
    cout&lt;&lt;cnt&lt;&lt;endl;
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date><![CDATA[2019-01-27 12:21:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-27 12:21:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-%e9%ab%98%e6%a9%8b%e5%90%9b%e3%81%a8%e3%82%ab%e3%83%bc%e3%83%89-tak-and-cards-atcoder-2037]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95"><![CDATA[高精]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷P2670 扫雷游戏</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/28/%e6%b4%9b%e8%b0%b7p2670-%e6%89%ab%e9%9b%b7%e6%b8%b8%e6%88%8f/</link>
		<pubDate>Mon, 28 Jan 2019 07:35:50 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=366</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题解：数组往大了开，周围空出一圈防止溢出</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 10000;
char arr[N][N];
int num(int i,int j){
    int cnt=0;
    for(int p=i-1; p&lt;=i+1; p++){
        for(int q=j-1; q&lt;=j+1; q++){

              if(arr[p][q]=='*'){
                cnt++;
              }
            }
        }
    return cnt;
}
int  main()
{

    memset(arr,0,sizeof(arr));

    int n,m;
    while(cin >> n >> m){
        for(int i=1; i&lt;=n; i++){
            for(int j=1; j&lt;=m; j++){
                cin>>arr[i][j];
            }
        }

    for(int i=1; i&lt;=n; i++){
        for(int j=1; j&lt;=m; j++){
            if(arr[i][j]=='*'){
                cout&lt;&lt;"*";
            }
            else{
                cout&lt;&lt;num(i,j);
            }
        }
        cout&lt;&lt;endl;

    }

    }
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date><![CDATA[2019-01-28 07:35:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-28 07:35:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b4%9b%e8%b0%b7p2670-%e6%89%ab%e9%9b%b7%e6%b8%b8%e6%88%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="js%e6%95%99%e7%a8%8b"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C - たくさんの数式 / Many Formulas AtCoder - 2067</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/29/c-%e3%81%9f%e3%81%8f%e3%81%95%e3%82%93%e3%81%ae%e6%95%b0%e5%bc%8f-many-formulas-atcoder-2067/</link>
		<pubDate>Tue, 29 Jan 2019 16:31:48 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Problem Statement</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You are given a string&nbsp;<em>S</em>&nbsp;consisting of digits between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>9</code>, inclusive. You can insert the letter&nbsp;<code>+</code>&nbsp;into some of the positions (possibly none) between two letters in this string. Here,&nbsp;<code>+</code>&nbsp;must not occur consecutively after insertion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All strings that can be obtained in this way can be evaluated as formulas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Evaluate all possible formulas, and print the sum of the results.Constraints</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>1≤|<em>S</em>|≤10</li><li>All letters in&nbsp;<em>S</em>&nbsp;are digits between&nbsp;<code>1</code>&nbsp;and&nbsp;<code>9</code>, inclusive.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The input is given from Standard Input in the following format:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><em>S</em>
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Print the sum of the evaluated value over all possible formulas.Sample Input 1</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">125<br><br>题解：遍历各个切割位置，通过&amp;判断位置，注意点主要是数据的大小</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main()
{
    string s;
    cin>>s;
    int len = s.size();
    int n = 1&lt;&lt;(len-1);
    ll sum = 0;
    for(int i=0 ; i&lt;n; i++)
    {

        ll cnt = s[0] - '0';//将字符ascii转换

        for(int j=0; j&lt;len; j++)
        {
            if(j==len-1||i&amp;1&lt;&lt;j)//从左往右数去i+1上那一个值
            {

                sum +=cnt;
                cnt = 0;//加完后清0
                if(j==len-1)
                {
                    break;
                }
            }
            cnt*=10;
            cnt+=s[j+1]-'0';
        }
    }
    cout&lt;&lt;sum&lt;&lt;endl;
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2019-01-29 16:31:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-29 16:31:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-%e3%81%9f%e3%81%8f%e3%81%95%e3%82%93%e3%81%ae%e6%95%b0%e5%bc%8f-many-formulas-atcoder-2067]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95"><![CDATA[高精]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>B - 3人でカードゲームイージー / Card Game for Three (ABC Edit) AtCoder - 2066</title>
		<link>http://yx.telstudy.xyz/index.php/2019/01/29/b-3%e4%ba%ba%e3%81%a7%e3%82%ab%e3%83%bc%e3%83%89%e3%82%b2%e3%83%bc%e3%83%a0%e3%82%a4%e3%83%bc%e3%82%b8%e3%83%bc-card-game-for-three-abc-edit-atcoder-2066/</link>
		<pubDate>Tue, 29 Jan 2019 16:39:24 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

Problem Statement</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alice, Bob and Charlie are playing&nbsp;<em>Card Game for Three</em>, as below:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>At first, each of the three players has a deck consisting of some number of cards. Each card has a letter&nbsp;<code>a</code>,&nbsp;<code>b</code>&nbsp;or&nbsp;<code>c</code>&nbsp;written on it. The orders of the cards in the decks cannot be rearranged.</li><li>The players take turns. Alice goes first.</li><li>If the current player's deck contains at least one card, discard the top card in the deck. Then, the player whose name begins with the letter on the discarded card, takes the next turn. (For example, if the card says&nbsp;<code>a</code>, Alice takes the next turn.)</li><li>If the current player's deck is empty, the game ends and the current player wins the game.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You are given the initial decks of the players. More specifically, you are given three strings&nbsp;<em>S</em><sub><em>A</em></sub>,&nbsp;<em>S</em><sub><em>B</em></sub>&nbsp;and&nbsp;<em>S</em><sub><em>C</em></sub>. The&nbsp;<em>i</em>-th&nbsp;(1≦<em>i</em>≦|<em>S</em><sub><em>A</em></sub>|)&nbsp;letter in&nbsp;<em>S</em><sub><em>A</em></sub>&nbsp;is the letter on the&nbsp;<em>i</em>-th card in Alice's initial deck.&nbsp;<em>S</em><sub><em>B</em></sub>&nbsp;and&nbsp;<em>S</em><sub><em>C</em></sub>&nbsp;describes Bob's and Charlie's initial decks in the same way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Determine the winner of the game.Constraints</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>1≦|<em>S</em><sub><em>A</em></sub>|≦100</li><li>1≦|<em>S</em><sub><em>B</em></sub>|≦100</li><li>1≦|<em>S</em><sub><em>C</em></sub>|≦100</li><li>Each letter in&nbsp;<em>S</em><sub><em>A</em></sub>,&nbsp;<em>S</em><sub><em>B</em></sub>,&nbsp;<em>S</em><sub><em>C</em></sub>&nbsp;is&nbsp;<code>a</code>,&nbsp;<code>b</code>&nbsp;or&nbsp;<code>c</code>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The input is given from Standard Input in the following format:</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><em>S</em><sub><em>A</em></sub>
<em>S</em><sub><em>B</em></sub>
<em>S</em><sub><em>C</em></sub>
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If Alice will win, print&nbsp;<code>A</code>. If Bob will win, print&nbsp;<code>B</code>. If Charlie will win, print&nbsp;<code>C</code>.Sample Input 1</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">aca
accc
ca
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 1</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">A
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>The game will progress as below:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Alice discards the top card in her deck,&nbsp;<code>a</code>. Alice takes the next turn.</li><li>Alice discards the top card in her deck,&nbsp;<code>c</code>. Charlie takes the next turn.</li><li>Charlie discards the top card in his deck,&nbsp;<code>c</code>. Charlie takes the next turn.</li><li>Charlie discards the top card in his deck,&nbsp;<code>a</code>. Alice takes the next turn.</li><li>Alice discards the top card in her deck,&nbsp;<code>a</code>. Alice takes the next turn.</li><li>Alice's deck is empty. The game ends and Alice wins the game.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Sample Input 2</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">abcb
aacb
bccc
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output 2</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">C<br><br>题解：三个人完全，三行每行分别是a，b，c的牌，出那个字母就轮到谁，谁的牌先出完谁赢<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>

using namespace std;
//打牌
int main(){
    string s[3];
    cin>>s[0]>>s[1]>>s[2];

    int c=0;
    char ans;
    while(s[c].size()>0){
        char C = s[c][0];
        s[c].erase(s[c].begin());
        switch(C){
            case 'a':
            c = 0;
            ans = 'A';
            break;
            case 'b':
            c = 1;
            ans = 'B';
            break;
            case 'c':
            c = 2;
            ans = 'C';
            break;
        }
    }
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date><![CDATA[2019-01-29 16:39:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-29 16:39:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[b-3%e4%ba%ba%e3%81%a7%e3%82%ab%e3%83%bc%e3%83%89%e3%82%b2%e3%83%bc%e3%83%a0%e3%82%a4%e3%83%bc%e3%82%b8%e3%83%bc-card-game-for-three-abc-edit-atcoder-2066]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95"><![CDATA[高精]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1571 眼红的Medusa</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/02/p1571-%e7%9c%bc%e7%ba%a2%e7%9a%84medusa/</link>
		<pubDate>Sat, 02 Feb 2019 11:19:01 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>虽然Miss Medusa到了北京，领了科技创新奖，但是他还是觉得不满意。原因是，他发现很多人都和他一样获了科技创新奖，特别是其中的某些人，还获得了另一个奖项——特殊贡献奖。而越多的人获得了两个奖项，Miss Medusa就会越眼红。于是她决定统计有哪些人获得了两个奖项，来知道自己有多眼红。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入第一行，有两个数n,m，表示有n个人获得科技创新奖，m个人获得特殊贡献奖。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第二行，n个正整数，表示获得科技创新奖的人的编号</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第三行，m个正整数，表示获得特殊贡献奖的人的编号<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出一行，为获得两个奖项的人的编号，按在科技创新奖获奖名单中的先后次序输出。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">4 3
2 15 6 8
8 9 2
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1</strong></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 8</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>对于60%的数据，n&lt;=1000，m&lt;=1000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于100%的数据，n&lt;=100000，m&lt;=100000，获得奖项的人的编号在2*10^9以内</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入数据保证第二行任意两个数不同，第三行任意两个数不同。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：本题如果单纯的暴力搜索肯定是要超时的，所以就要对代码进行优化，对特殊贡献奖排序再搜索，因为输出顺序问题不对科技创新奖排序，搜索采用stl自带的二分搜索</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
//求解获得两个奖项的人，并按照科技创新奖的的编号输出
int a[100010],b[100010];
int  main(){
    int n,m;
    cin>>n>>m;
    for(int i=0; i&lt;n; i++)cin>>a[i];
    for(int i=0; i&lt;m; i++)cin>>b[i];
    sort(b,b+m);
        int flat=1;
    for(int i=0; i&lt;n; i++){
        if(binary_search(b,b+m,a[i])==true){
            flat==1?cout&lt;&lt;a[i]:cout&lt;&lt;" "&lt;&lt;a[i];
       flat=0; }
    }
return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2019-02-02 11:19:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-02 11:19:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1571-%e7%9c%bc%e7%ba%a2%e7%9a%84medusa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>签到题：出题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/03/%e7%ad%be%e5%88%b0%e9%a2%98%ef%bc%9a%e5%87%ba%e9%a2%98/</link>
		<pubDate>Sun, 03 Feb 2019 02:56:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=383</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

链接：<a target="_blank" href="https://ac.nowcoder.com/acm/contest/332/A" rel="noreferrer noopener">https://ac.nowcoder.com/acm/contest/332/A</a><br>来源：牛客网</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述


</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>

小B准备出模拟赛。<br> 她把题目按难度分为四等，分值分别为6,7,8,9。<br> 已知小B共出了m道题，共n分。<br> 求小B最少出了多少道6分题。&nbsp;&nbsp;&nbsp;&nbsp;<br><br></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入描述:</h2>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">两个正整数n,m</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>输出描述:</h2>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">一个数，表示答案。<br>若无解，输出"jgzjgzjgz"。</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>


示例1



</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">34 5</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>输出</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>






示例2



</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">32 5</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>输出</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>






示例3



</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5 1</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>输出</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0);">复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">jgzjgzjgz<br><br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>题解：看到这个题我的第一个想法是3层for循环遍历求解，但是数据太大会出现超时的情况，为了避免超时应该通过不等式求解</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解得：6m&lt;=n&lt;=9m </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>          7(m-x)&lt;=n-6x&lt;=9(m-x)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main()
{
    ll m,n;
    cin>>n>>m;
    n&lt;6*m||n>9*m?cout&lt;&lt;"jgzjgzjgz":cout&lt;&lt;max((ll)0,7*m-n);
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2019-02-03 02:56:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-03 02:56:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ad%be%e5%88%b0%e9%a2%98%ef%bc%9a%e5%87%ba%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%8e%92%e5%ba%8f"><![CDATA[排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C++ STL中的Binary search（二分查找）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/03/c-stl%e4%b8%ad%e7%9a%84binary-search%ef%bc%88%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%ef%bc%89/</link>
		<pubDate>Sun, 03 Feb 2019 02:58:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1><a href="https://www.cnblogs.com/wkfvawl/p/9475939.html"></a></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong><a href="http://www.cnblogs.com/wkfvawl/p/%E8%BF%99%E7%AF%87%E5%8D%9A%E5%AE%A2%E8%BD%AC%E8%87%AA%E7%88%B1%E5%9B%BD%E5%B8%88%E5%93%A5%EF%BC%8C%E8%BF%99%E9%87%8C%E7%BB%99%E5%87%BA%E8%BF%9E%E6%8E%A5https://www.cnblogs.com/aiguona/p/7281856.html" target="_blank" rel="noreferrer noopener">这篇博客转自爱国师哥，这里给出连接https://www.cnblogs.com/aiguona/p/7281856.html</a><br></strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1><strong>一.解释</strong></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>　　以前遇到二分的题目都是手动实现二分，不得不说错误比较多，关于返回值，关于区间的左闭右开等很容易出错，最近做题发现直接使用STL中的二分函数方便快捷还不会出错，不过对于没有接触过的同学，二分函数确实是一个头疼的部分，自己查的内容又有点乱，找不到具体的使用方法，有必要自己总结一份完整的以后备用。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1><strong>二.常用操作</strong></h1>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2><strong>1.头文件</strong></h2>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">#include &lt;algorithm&gt;</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2><strong>2.使用方法</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>1.binary_search：查找某个元素是否出现。</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a.函数模板：binary_search(arr[],arr[]+size ,&nbsp; indx)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b.参数说明：<br>&nbsp;&nbsp;&nbsp; arr[]： 数组首地址<br>&nbsp;&nbsp;&nbsp; size：数组元素个数<br>&nbsp;&nbsp;&nbsp; indx:需要查找的值</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>c.函数功能：&nbsp; 在数组中以二分法检索的方式查找，若在数组(要求数组元素非递减)中查找到indx元素则真，若查找不到则返回值为假。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>2.lower_bound：查找第一个大于或等于某个元素的位置。</strong><br>a.函数模板：lower_bound(arr[],arr[]+size ,&nbsp; indx):<br>b.参数说明：<br>&nbsp;&nbsp;&nbsp; arr[]： 数组首地址<br>&nbsp;&nbsp;&nbsp; size：数组元素个数<br>&nbsp;&nbsp;&nbsp; indx:需要查找的值<br>c.函数功能：&nbsp; 函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置(注意是地址)。如果所有元素都小于val，则返回last的位置<br>d.举例如下：<br>　　一个数组number序列为：4,10,11,30,69,70,96,100.设要插入数字3,9,111.pos为要插入的位置的下标，则<br>　　/*注意因为返回值是一个指针，所以减去数组的指针就是int变量了*/<br>　　pos = lower_bound( number, number + 8, 3) - number，pos = 0.即number数组的下标为0的位置。<br>　　pos = lower_bound( number, number + 8, 9) - number， pos = 1，即number数组的下标为1的位置（即10所在的位置）。<br>　　pos = lower_bound( number, number + 8, 111) - number， pos = 8，即number数组的下标为8的位置（但下标上限为7，所以返回最后一个元素的下一个元素）。<br>e.注意：函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。<strong>如果所有元素都小于val，则返回last的位置，且last的位置是越界的！</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>　　返回查找元素的第一个可安插位置，也就是“元素值&gt;=查找值”的第一个元素的位置</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>3.upper_bound：查找第一个大于某个元素的位置。</strong><br>a.函数模板：upper_bound(arr[],arr[]+size ,&nbsp; indx):<br>b.参数说明：<br>&nbsp;&nbsp;&nbsp; arr[]： 数组首地址<br>&nbsp;&nbsp;&nbsp; size：数组元素个数<br>&nbsp;&nbsp;&nbsp; indx:需要查找的值<br>c.函数功能：函数upper_bound()返回的在前闭后开区间查找的关键字的上界，返回大于val的第一个元素位置<br>　　例如：一个数组number序列1,2,2,4.upper_bound(2)后，返回的位置是3（下标）也就是4所在的位置,同样，<strong>如果插入元素大于数组中全部元素，返回的是last。(注意：数组下标越界)</strong><br>　　返回查找元素的最后一个可安插位置，也就是“元素值&gt;查找值”的第一个元素的位置&nbsp;。</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date><![CDATA[2019-02-03 02:58:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-03 02:58:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-stl%e4%b8%ad%e7%9a%84binary-search%ef%bc%88%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Molar mass UVA - 1586</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/06/molar-mass-uva-1586/</link>
		<pubDate>Wed, 06 Feb 2019 03:18:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题解：已知元素组成求解相对分子量，单个元素最多只有两位数两层if判断就可以了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
const int n=256;
const int maxn=10001;
double mass[n];


int  main()
{
    memset(mass,0,256);
    mass['C']=12.01;
    mass['H']=1.008;
    mass['O']=16.00;
    mass['N']=14.01;
    int t;
    cin>>t;
    while(t--)
    {
        string str;
        cin>>str;
        double sum = 0;
        double temp;
        for(int i=0; i&lt;str.size(); i++){
            if(mass[str[i]]){
                    if(str[i+1]>='1'&amp;&amp;str[i+1]&lt;='9'){
                        if(str[i+2]>='0'&amp;&amp;str[i+2]&lt;='9'){
                            temp=(str[i+1]-'0')*10+str[i+2]-'0';
                            sum +=temp*mass[str[i]];
                            i+=2;
                        }
                        else{
                            temp=str[i+1]-'0';
                            sum +=temp*mass[str[i]];
                            i++;
                        }
                    }
                    else{
                        sum +=mass[str[i]];
                    }
                }
        }
        printf("%.3f\n",sum);
    }

    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date><![CDATA[2019-02-06 03:18:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-06 03:18:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[molar-mass-uva-1586]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e5%ad%a6"><![CDATA[数学]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Digit Counting UVA - 1225</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/08/digit-counting-uva-1225/</link>
		<pubDate>Fri, 08 Feb 2019 12:22:47 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p> Trung is bored with his mathematics homeworks. He takes a piece of chalk and starts writing a sequence of consecutive integers starting with 1 to N (1 &lt; N &lt; 10000). After that, he counts the number of times each digit (0 to 9) appears in the sequence. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, with N = 13, the sequence is: 12345678910111213 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this sequence, 0 appears once, 1 appears 6 times, 2 appears 2 times, 3 appears 3 times, and each digit from 4 to 9 appears once. After playing for a while, Trung gets bored again. He now wants to write a program to do this for him. Your task is to help him with writing this program. Input The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets. For each test case, there is one single line containing the number N. Output For each test case, write sequentially in one line the number of digit 0, 1, . . . 9 separated by a space. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 2 3 13</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 0 1 1 1 0 0 0 0 0 0 1 6 2 2 1 1 1 1 1 1 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>问题链接：https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3666</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>问题：输入一个n将1到n，n个数字每个连在一起，统计1~9每种数字出现的次数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.紫书上的思路是打表：由于n的值比较小。令c[n][k]表示前n个数字写在一起，k(k= 0~9)总共出现几次，则有c[n+1][k] = c[n][k]+x,其中x是在n+1中出现的次数。提前计算最后需要的时候直接输出结果即可</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.我的思路，没输入一个n计算一次，通过while与%取出每一位数字，再计算次数</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N=10;
int a[N]={0};

int  main(){
int t;
cin>>t;
while(t--){
    int n;
    int now;
    cin>>n;
    memset(a,0,sizeof(a));

    for(int i=1; i&lt;=n; i++){
        now=i;
        while(now){
            a[now%10]++;
            now/=10;
        }
    }

for(int i=0; i&lt;N; i++){
    i==0?cout&lt;&lt;a[i]:cout&lt;&lt;" "&lt;&lt;a[i];
}
cout&lt;&lt;endl;
}

return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2019-02-08 12:22:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-08 12:22:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[digit-counting-uva-1225]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e5%ad%a6"><![CDATA[数学]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>常用的数学函数以及注意点</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/10/%e5%b8%b8%e7%94%a8%e7%9a%84%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0%e4%bb%a5%e5%8f%8a%e6%b3%a8%e6%84%8f%e7%82%b9/</link>
		<pubDate>Sun, 10 Feb 2019 12:17:16 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=395</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>一.三角函数</p>
<!-- /wp:paragraph -->

<p><br /><br /><!--StartFragment--></p>

<!-- wp:code -->
<pre class="wp-block-code"><code>double cos(); //余弦函数

double sin(); //正弦函数

double tan(); //正切函数

double acos(double x) //返回x的反余弦cos-1(x)值,x为弧度 

double asin(double x) //返回x的反正弦sin-1(x)值,x为弧度 

double atan(double x) //返回x的反正切tan-1(x)值,x为弧度 

double atan2(double y,double x) //返回y/x的反正切tan-1(x)值,y的x为弧度 </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>注意：double PI = acos(-1.0); //取pi值得技巧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>二.反三角函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>三.计算函数</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">开方函数：sqrt<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>计算平方和：hypot</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>两点欧几里得距离函数：dist</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//写法一
double dist(double x1,double y1,double x2,double y2){
    double dx = x1 - x2;
    double dy = y1 - y2;
return hypot(dx,dy);
}
</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//写法二
double dist(double x1,double y1,double x2,double y2){
    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>阶层：factorial </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意：因为数据类型是 ll 所以需要小心数据溢出的情况</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>long long factorial(int n){
    long long m = 1;
for(int i=1; i&lt;=n; i++){
    m*=i;
}
    return m;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>组合数：C</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//可能造成溢出的写法
long long C(int n,int m){
    return factorial(n)/factorial(m)*factorial(n-m);
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>改善方法：n!/m!=(m+1)(m+2)...(n-1)n。</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>long long C（int n,int m){
if( m &lt; n-m ) m = n-m;
    long long ans = 1;
for(int i = m+1; i &lt;= n; i++) ans*=i;
for(int i = 1; i &lt;= n-m; i++) ans/=i;
return ans;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>绝对值：abs();</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>double log(double x) //返回logex的值 

double log10(double x) //返回log10x的值 
</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int atoi(char *nptr) 
//将字符串nptr转换成整型数, 并返回这个数,错误返回0 </code></pre>
<!-- /wp:code -->

<!-- wp:embed {"url":"http://cbbbbbb.telstudy.xyz/index.php/2018/12/22/atoi-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E5%9E%8B%E6%95%B0/","type":"rich","providerNameSlug":"moonl-1-ght","className":""} -->
<figure class="wp-block-embed is-type-rich is-provider-moonl-1-ght"><div class="wp-block-embed__wrapper">
http://cbbbbbb.telstudy.xyz/index.php/2018/12/22/atoi-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E5%9E%8B%E6%95%B0/
</div></figure>
<!-- /wp:embed -->

<!-- wp:code -->
<pre class="wp-block-code"><code>double ceil(double x) //返回不小于x的最小整数 

double floor(double x) //返回不大于x的最大整数 

void srand(unsigned seed) //初始化随机数发生器</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>注意：好像不每次初始化随机数，随机数的话每次都相同</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date><![CDATA[2019-02-10 12:17:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-10 12:17:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b8%b8%e7%94%a8%e7%9a%84%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0%e4%bb%a5%e5%8f%8a%e6%b3%a8%e6%84%8f%e7%82%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="js%e6%95%99%e7%a8%8b"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4dd2159e4e2d3b129d033be932e0100e]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="OMoWGQuGXh"><a href="http://cbbbbbb.telstudy.xyz/index.php/2018/12/22/atoi-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e5%9e%8b%e6%95%b0/">atoi——把字符串转换成整型数</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://cbbbbbb.telstudy.xyz/index.php/2018/12/22/atoi-%e6%8a%8a%e5%ad%97%e7%ac%a6%e4%b8%b2%e8%bd%ac%e6%8d%a2%e6%88%90%e6%95%b4%e5%9e%8b%e6%95%b0/embed/#?secret=OMoWGQuGXh" data-secret="OMoWGQuGXh" width="600" height="338" title="《atoi——把字符串转换成整型数》—Moonl1ght" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_4dd2159e4e2d3b129d033be932e0100e]]></wp:meta_key>
		<wp:meta_value><![CDATA[1549803104]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6fce6444453336e544855a8fc796d834]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>C. Trailing Loves (or L&#039;oeufs?)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/11/c-trailing-loves-or-loeufs/</link>
		<pubDate>Mon, 11 Feb 2019 09:16:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aki is fond of numbers, especially those with trailing zeros. For example, the number&nbsp;92009200&nbsp;has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given two integers&nbsp;nn&nbsp;and&nbsp;bb&nbsp;(in decimal notation), your task is to calculate the number of trailing zero digits in the&nbsp;bb-ary (in the base/radix of&nbsp;bb) representation of&nbsp;n!n!&nbsp;(<a href="https://en.wikipedia.org/wiki/Factorial">factorial</a>&nbsp;of&nbsp;nn).Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The only line of the input contains two integers&nbsp;nn&nbsp;and&nbsp;bb&nbsp;(1≤n≤10181≤n≤1018,&nbsp;2≤b≤10122≤b≤1012).Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Print an only integer&nbsp;— the number of trailing zero digits in the&nbsp;bb-ary representation of&nbsp;n!n!ExamplesinputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6 9<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>outputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>inputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">38 11<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>outputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>inputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5 2<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>outputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>inputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5 10<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>outputCopy</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Note</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the first example,&nbsp;6!(10)=720(10)=880(9)6!(10)=720(10)=880(9).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the third and fourth example,&nbsp;5!(10)=120(10)=1111000(2)5!(10)=120(10)=1111000(2).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The representation of the number&nbsp;xx&nbsp;in the&nbsp;bb-ary base is&nbsp;d1,d2,…,dkd1,d2,…,dk&nbsp;if&nbsp;x=d1bk−1+d2bk−2+…+dkb0x=d1bk−1+d2bk−2+…+dkb0, where&nbsp;didi&nbsp;are integers and&nbsp;0≤di≤b−10≤di≤b−1. For example, the number&nbsp;720720&nbsp;from the first example is represented as&nbsp;880(9)880(9)&nbsp;since&nbsp;720=8⋅92+8⋅9+0⋅1720=8⋅92+8⋅9+0⋅1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can read more about bases <a href="https://en.wikipedia.org/wiki/Radix">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目来源：<a href="https://codeforces.com/contest/1114/problem/C">https://codeforces.com/contest/1114/problem/C</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：输入n与r，求解n！在r进制下末尾0的个数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（错误）在比赛中我是按照题意一步一步的做，计算阶乘取余计数，代码如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;

ll fact (ll n)
{
    ll m=1;
    for(int i=1; i&lt;=n; i++)
    {
        m*=i;
    }
    return m;
}
int main()
{
    ll r,n;
    stack&lt;int> s;
    cin>>n>>r;
    n=fact(n);
    ll t = n;
    int cnt=0;
    while(n)
    {
        cnt++;
        s.push(n%r);
        n/=r;
    }
    cnt-=1;
    ll sum = 0;
    while(!s.empty())
    {
        //cout&lt;&lt;s.top()&lt;&lt;" ";
        sum += s.top()*pow(r,cnt);

        if(sum == t)
        {
            break;
        }
        cnt--;
        s.pop();
    }
    cout&lt;&lt;cnt&lt;&lt;endl;

    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>错误的原因：应该是阶乘的数据太大了直接爆了，所以在38 11该样例直接输出-1了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>求n!在b进制下末尾0的个数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>思路：等价于n!%(b^k)==0的最大k</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>将b分解为若干素数乘积，记录每个素数含多少次方&nbsp;b = p1^y1·p2^y2·…·pm^ym.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>然后求n!种每个素数含多少次方n ! = p1^x1·p2^x2·…·pm^xm·</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>首先答案最小值ans必须赋很大1e18这样子，因为末尾的0个数可能非常非常多，赋个1&lt;&lt;50这样子都不行。</h2>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;

long long n,b;
#define endl '\n'
void input(){
    cin >> n >>b;
}

void solve(){
    ll ans = 1000000000000000000ll;
    for(ll i=2; i&lt;=b; i++){
        if(1ll * i * i > b) i = b;
        int cnt = 0;
        while(b % i==0){
            b/=i;
            cnt++;
        }
        if( cnt == 0){
            continue;
        }
        ll tmp = 0, mul =1;
        while(mul &lt;= n / i){
            mul *=i;
            tmp +=n /mul;
        }
        ans = min(ans,tmp/cnt);
    }
    cout &lt;&lt; ans &lt;&lt; endl;
}
int  main(int argc, char* argv[]){
       std::ios::sync_with_stdio(false);
   cin.tie(0);
//C++的输入输出的兼容性,使得c++的速度和c一样
    input(); solve(); return 0;
return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2019-02-11 09:16:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-11 09:16:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-trailing-loves-or-loeufs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019.2.11rating 题解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/12/2019-2-11rating-%e9%a2%98%e8%a7%a3/</link>
		<pubDate>Tue, 12 Feb 2019 06:03:51 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>A - キャンディーと2人の子供/ Fighting over Candies</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem">链接：a题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：将三份糖果分给两个人，要求两个人分到的糖果数相等</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>法1：排序后解答</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
int main(){
    int a[3];
for(int i=0; i&lt;3; i++){
    cin>>a[i];
}
sort(a,a+3);
a[0]+a[1]==a[2]?cout&lt;&lt;"Yes"&lt;&lt;endl:cout&lt;&lt;"No"&lt;&lt;endl;
    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>法二：直接写出三种可能</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    int a,b,c;
    cin>>a>>b>>c;
    if(a+b==c||a+c==b||b+c==a){
        cout&lt;&lt;"Yes"&lt;&lt;endl;
    }
    else{
        cout&lt;&lt;"No"&lt;&lt;endl;
    }
return 0;
}

</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="problem-title">B - すぬけ君の涂り絵2 イージー/ Snuke's Coloring 2 (ABC Edit)</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/problem/584986/origin" target="_blank" rel="noreferrer noopener">AtCoder - 2145&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem/B">链接：b题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：在坐标轴上取一点 （w , h ),以 y轴 和 x轴 各为一条边，得一个矩形，输入n个点图色（题目有对这n个点分别有四种要求，即用a进行判断选择）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：max，min函数的运用，s和t是原点坐标，通过判断点的位置，判断涂色位置</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>max与min的作用如其意思返回两个之中的最大值</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

#include &lt;bits/stdc++.h>
using namespace std;

int main() {
  int W, H, N;
  cin >> W >> H >> N;

  int s = 0, t = 0;//坐标原点
  for (int i = 0; i &lt; N; i++) {
    int x, y, a;
    cin >> x >> y >> a;

    if (a == 1) s = max(s, x);
    if (a == 2) W = min(W, x);
    if (a == 3) t = max(t, y);
    if (a == 4) H = min(H, y);

  }

  if (W &lt;= s || H &lt;= t) cout &lt;&lt; 0 &lt;&lt; endl;
  else cout &lt;&lt; (W - s) * (H - t) &lt;&lt; endl;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>C - 一维反转/ 1D反转</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem/C">c题：链接</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：一维的黑白棋，可以将B和W分别看作黑棋和白棋</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例子：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>BWBBWB</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>下最左或者最右是一样的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>W</strong><del>B</del>WBBWB(加粗为下的，划线为改变的棋子</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>就变成 WWWBBWB</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果在最左下B</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>就会变成BBBBBBWB</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：判断前后紧邻的棋子是否相同</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    string s;
    cin>>s;
    if(s.find('W')==-1||s.find('B')==-1){
        cout&lt;&lt;"0"&lt;&lt;endl;
    }//这是只存在单一棋子的情况
else{
    int cnt=0;
        for(int i=0; i&lt;s.size()-1; i++){
            if(s[i]!=s[i+1])
                cnt++;//如果前后不同就要下一个棋子使其相同，故步数加一
        }
        cout&lt;&lt;cnt&lt;&lt;endl;
}
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="problem-title">E - AtCoder ***比赛</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem/E">链接：E题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：输出三个单词的手字母</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：空格符是字符串输入的结束符所以就变得很简单</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>string如果没有用万能函数库的话就要加头文件#include&lt;string&gt;</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    string a,b,c;
    cin>>a>>b>>c;
    cout&lt;&lt;a[0]&lt;&lt;b[0]&lt;&lt;c[0]&lt;&lt;endl;
return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>F - 在a和b之间......</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem/F">链接：F题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：（题意很直接了） 给出非负整数<em>a</em>和<em>b</em>（<em>a</em>≤<em>b</em>）和正整数<em>&nbsp;x</em>。在<em>&nbsp;a</em>和<em>&nbsp;b</em>之间的整数（包括两者）中，有多少可被<em>&nbsp;x</em>整除？ </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.用循环计数，看到样本输入四我就放弃这种思路了，估计会超时,</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>特意写了一个，没提交试试，应该是错的，毕竟这么大<br><br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":403} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/02/QQ图片20190212135100.png" alt="" class="wp-image-403"/></figure>
<!-- /wp:image -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    ll a,b,x;
    cin>>a>>b>>x;
    ll cnt=0;
    for(int i=a; i&lt;=b; i++){
        i%x==0?cnt++:cnt=cnt;
    }
    cout&lt;&lt;cnt;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>2.在做到数据大的题目就要先考虑如何在过程中减小数据的大小</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b以内能被x整除以及a-1内能被x整除的数字相减便是之间的，a是否为0分类讨论一下，记住a和b都要ll，就在这wa了一次</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
#define endl '\n'
int  main(){
std::ios::sync_with_stdio(false);
cin.tie(0);//加速操作，怕题目在时间上有要求
    ll a,b,x;
    cin>>a>>b>>x;
    a!=0?cout &lt;&lt; b / x - (a - 1) / x &lt;&lt; endl:cout &lt;&lt; b / x + 1 &lt;&lt; endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>G - 盒子和糖果</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://cn.vjudge.net/problem/AtCoder-2152" target="_blank">链接：G 题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：输入n以及x，然后再输入n个盒子中的糖果数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>多次执行以下操作：</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>选择一个至少包含一个糖果的盒子，然后在所选盒子中吃一个糖果。</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>他的目标如下：</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>任何两个相邻的盒子总共最多包含<em>x个</em>糖果</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>题解：糖果数差值即为需要进行的步数（一种是与最大值的差值一种是与左右的差值）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>有两种想法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>法一是数组，for循环里面进行判断max(a[i],a[i+1])和max(a[i-1],a[i])然后再进行步骤计算</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>法二是每一步进行判断，如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
#define maxn 1000001
int main()
{
    int n,x;
    cin>>n>>x;

    ll a,b,cnt=0;//记录操作步数
    cin>>a;//开头第一盒糖果
	if(a>x){
		cnt+=a-x;
		a=x;
	}
	for(int i=1;i&lt;n;i++)
	{
		cin>>b;
		if((a+b)>x)
		{
			cnt+=a+b-x;
			a=x-a;
		}
		else {
                a=b;
        }
	}
	cout&lt;&lt;cnt&lt;&lt;endl;
	return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="problem-title">H - 普通游戏</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/contest/283118#problem/H">链接：H题</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解： &nbsp;遍历字符串s的每一个，左右字符相等的话就看下一个字符，不等的话就删除这一个字符，然后接下一个人。如果遍历没有可以删除的字符的话或者字符串长度小于3，就说明这个人输了 </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2019-02-12 06:03:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-12 06:03:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-2-11rating-%e9%a2%98%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[403]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Where is the Marble? UVA - 10474</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/19/where-is-the-marble-uva-10474/</link>
		<pubDate>Tue, 19 Feb 2019 08:16:55 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=407</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>介绍：紫书stl入门习题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/problem/UVA-10474">链接：https://cn.vjudge.net/problem/UVA-10474</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：有n个大理石上标有数字，有q个问题，排序后回答每个问题数字的位置</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：主要是考察对lower_bound和sort基本stl函数的使用</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>lower_bound:作用是查找大于或者等于x的一个位置</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意！返回的是地址而不是数组的下标或者其他什么，所以如果你需要得到下标可以这样：lower_bound(a,a+n,x)-a</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>sort:排序函数，原理类似于快排</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>代码：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main()
{
    int n,q;//q是问题个数
    int cnt=0;
    while( cin>>n>>q&amp;&amp;n){
    int *a=(int *)malloc(sizeof(int)*n);//储存石头上的数字
    for(int i=0; i&lt;n; i++)
    {
        cin>>a[i];
    }
    //
    sort(a,a+n);//排序
    cout&lt;&lt;"CASE# "&lt;&lt;++cnt&lt;&lt;":"&lt;&lt;endl;
    int x;
    for(int i=0; i&lt;q; i++)
    {
        cin>>x;
        int p= lower_bound(a,a+n,x)-a;
//要判断是否查找成功了
        a[p]==x?cout&lt;&lt;x&lt;&lt;" found at "&lt;&lt;lower_bound(a,a+n,x)-a+1&lt;&lt;endl:cout&lt;&lt;x&lt;&lt;" not found"&lt;&lt;endl;
    }
    free(a);
}
return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2019-02-19 08:16:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-19 08:16:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[where-is-the-marble-uva-10474]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e5%ad%a6"><![CDATA[数学]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/2/20rating赛题解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/20/2019-2-20rating%e8%b5%9b%e9%a2%98%e8%a7%a3/</link>
		<pubDate>Wed, 20 Feb 2019 16:07:06 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="problem-title"></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>a题链接：https://vjudge.net/problem/728398/origin</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="problem-title"><a rel="noreferrer noopener" href="https://vjudge.net/problem/AtCoder-2346" target="_blank">A - No Need</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>题意：输入n，k，n表示n张卡片，k是判断子集是否为good子集的一个数值</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来一行输入n个卡片每个卡片的值</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>求解的是这n个卡牌上的无用的数字有几个然后输出</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：在看到输入和输出的时候就让我联想到uva的这一题—&gt;赋上链接</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"http://cbbbbbb.telstudy.xyz/index.php/2019/02/19/where-is-the-marble-uva-10474/","type":"rich","providerNameSlug":"moonl-1-ght","className":""} -->
<figure class="wp-block-embed is-type-rich is-provider-moonl-1-ght"><div class="wp-block-embed__wrapper">
http://cbbbbbb.telstudy.xyz/index.php/2019/02/19/where-is-the-marble-uva-10474/
</div></figure>
<!-- /wp:embed -->

<!-- wp:paragraph -->
<p>1.理解什么是Good子集？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>若该子集之和大于所输入的k值则说明该子集为Good集</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.什么是不必要的卡（无用的数）？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在这个数字或者说这个卡牌所在的所有good子集当中，将这个数字删除仍是good子集（即删除这个数字仍然满足sum&gt;k)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.我们首先肯定是想很简单的求和</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以这么想假设这个数字是必须数设为x那么比他大的数字加上去肯定是大的，所以比他大的数字肯定是必须的,即如果一个数不是无用数则大于他的所有数都不是</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可以转化为这个不等式sum+a[i]&lt;k</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>代码</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 5050
int a[N]={0};
int  main(){
    ll n,k;
    cin>>n>>k;
    for(int i=0; i&lt;n; i++){
        cin>>a[i];
    }
    sort(a,a+n);//排序，容易知道一定是最小的那几个是不需要的
    ll sum = 0;
    ll p = n;

    for(ll i=n-1; i>=0; i--){
        if(sum+a[i]&lt;k){
            sum +=a[i];
        }
        else{
            p = i;
        }
    }
    cout&lt;&lt;p&lt;&lt;endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2343" target="_blank" rel="noreferrer noopener">B - HonestOrDishonest</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/728396/origin" target="_blank">AtCoder - 2343&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：输入两个字符相等则输出H不相等则输出D</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
char a,b;
cin>>a>>b;
a==b?cout&lt;&lt;"H":cout&lt;&lt;"D";
return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2331" target="_blank" rel="noreferrer noopener">C - 餐厅</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/658895/origin" target="_blank">AtCoder - 2331&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：翻译有点乱就顺手写一下题意，买n份餐点每份会需要付800块，每15份商家会给你200块肥胖补偿费</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：依题意解答即可</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    ll n;
    cin>>n;
    cout&lt;&lt;n*800-n/15*200&lt;&lt;endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2345" target="_blank" rel="noreferrer noopener">D - 回家</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/716940/origin" target="_blank">AtCoder - 2345&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：在一维横纵上进行移动可以进行左移和右移，从0开始移动到输入的x位置最少需要几秒，注意你的移动距离与你的秒数有关</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 如果前t分钟一直向左走，加起来的路程如果恰好等于x，那一定就是时间t最短。 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：逆向思维从x点到0点，循环就完事惹</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    ll x;
    ll i=0;
    cin>>x;
    while(x>0){
        i++;
        x-=i;
    }
    cout&lt;&lt;i&lt;&lt;endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2332" target="_blank" rel="noreferrer noopener">F - Training Camp</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/662901/origin" target="_blank">AtCoder - 2332&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：每次力量乘以i</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：输入n求解n阶乘mod1e9+7，就是会爆ll的题目了，每次乘取余就好了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
ll n;
ll s=1;
cin>>n;
for(ll i=1; i&lt;=n; i++){
    s*=i;
    s%=1000000007;
}
cout&lt;&lt;s&lt;&lt;endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2344" target="_blank" rel="noreferrer noopener">G - NarrowRectanglesEasy</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/716946/origin" target="_blank">AtCoder - 2344&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：求解两个矩形接触所需要移动的距离</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：主要是对a和b+w之间大小的判断来确定两个矩形的位置，stl库的swap一下就好惹</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    ll w,a,b;
    cin>>w>>a>>b;
   if(a>b){
    swap(a,b);
   }
   a+w&lt;b?cout&lt;&lt;b-a-w&lt;&lt;endl:cout&lt;&lt;0&lt;&lt;endl;

return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 id="problem-title"><a href="https://vjudge.net/problem/AtCoder-2333" target="_blank" rel="noreferrer noopener">H - Scc拼图</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://vjudge.net/problem/656360/origin" target="_blank">AtCoder - 2333&nbsp;</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意： 找到<code>Scc</code>Snuke具有<em>N</em><code>S</code>形件和<em>M</em><code>c</code>形件时可以创建的最大组数 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意样例1的解释，是一个很好明白题目的途径，如下</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>将两个<code>c</code>形状组合成一个单<code>S</code>件</li><li>创建两个<code>Scc</code>组，每个组由一个<code>S</code>形状的片段和两个<code>c</code>形状的片段组成</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>题解：先算除能组成几个s，然后剩下的再去创建scc组，注意！是剩下的部件，这样子算才是最大组数</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
int  main(){
    ll n,m;
    cin>>n>>m;
    //n个s形状，m个c形状
    cout&lt;&lt;min(m/2,n)+(m-min(m/2,n)*2)/4&lt;&lt;endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>对以上有疑问的地方欢迎在本条文章下进行回复提出讨论，特此感谢</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date><![CDATA[2019-02-20 16:07:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-20 16:07:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-2-20rating%e8%b5%9b%e9%a2%98%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95"><![CDATA[高精]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e634afcc29ceb6d35655426a424f0f6a]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="xk5D2JcU50"><a href="http://cbbbbbb.telstudy.xyz/index.php/2019/02/19/where-is-the-marble-uva-10474/">Where is the Marble? UVA &#8211; 10474</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://cbbbbbb.telstudy.xyz/index.php/2019/02/19/where-is-the-marble-uva-10474/embed/#?secret=xk5D2JcU50" data-secret="xk5D2JcU50" width="600" height="338" title="《Where is the Marble? UVA &#8211; 10474》—Moonl1ght" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_e634afcc29ceb6d35655426a424f0f6a]]></wp:meta_key>
		<wp:meta_value><![CDATA[1550752597]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1166290a4678d4fab1472c1a7afb26d7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>poj-1226</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/26/poj-1226/</link>
		<pubDate>Tue, 26 Feb 2019 15:26:54 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>链接：https://vjudge.net/problem/POJ-1226</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意： <br>给你一些串,问你这些串中出现次数最多子串的长度,反向出现的也算 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题过程中希望实现的操作：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）string按长度进行排序</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）字符串翻转（无意中翻到的er，发现还挺好用的）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include &lt;string>
#include &lt;algorithm>
using namespace std;
int main(int argc, char*argv[])
{
string str = "song";
reverse(str.begin(), str.end());
//利用string中的函数直接进行翻转
return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>3）思考如何将字符串复制排序，以为有跟strcpy一样的函数呢<br>C++中的string是字符串类，它的对象就相当于基本类型int的变量一样，使用起来十分方便，用=号就能把一个对象的值赋给另一个对象</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4）遍历可能的子串长度，对每个字符串进行查找，明天写代码</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>错误代码1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对0尾情况无法处理，还用了vector，自己都感动自己了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
#include &lt;cmath>
#include &lt;algorithm>
#include &lt;vector>

using namespace std;


int main()
{
    int t;
    cin >> t;
int i;
    while (t--)
    {
        std::vector&lt;int> n;
        string x;
        cin>>x;
        i= x[0]=='-' ? 1 : 0;
        if(i==1)
        {

            cout&lt;&lt;"-";
        }
        for(; i&lt;x.size(); i++)
           n.push_back(x[i] - '0');
        i = x[0]=='-' ? 1 : 0;
        std::reverse(n.begin()+i , n.end());
for(std::vector&lt;int>::iterator it=n.begin(); it!=n.end(); ++it )
    cout &lt;&lt; *it;
cout&lt;&lt;endl;

    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>错误代码2</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.前后翻转错误 2.负数处理不够好 3.0尾无法正确处理</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
#include &lt;cmath>
#include &lt;algorithm>
using namespace std;


int main()
{
    int t;
    cin >> t;
    string s;
    while (t--)
    {

        cin >> s;
        int i = 0;
        char t;
        if(s[0] == '-')
        {
            i++;
        }
        for(; i &lt;= s.size() / 2+1; t = s[i], s[i] = s[s.size() - 1 - i], s[s.size() - 1 - i] = t, i++);
        for(int i=0; i&lt;s.size(); i++)
            cout&lt;&lt;s[i];
        cout&lt;&lt;endl;
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2019-02-26 15:26:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-26 15:26:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poj-1226]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="bfs%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[广搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019/2/27日随笔</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/27/2019-2-27%e6%97%a5%e9%9a%8f%e7%ac%94/</link>
		<pubDate>Wed, 27 Feb 2019 15:18:42 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>人难免会丧，最近感觉很乱，做很多事情的时候不知道从什么地方入手，甚至懒得去做去完成，以至于如今的我与周围人的水平在渐渐地拉大</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>偶尔会想t大的少波老师这个时候会在干嘛呢？在紫操上打球亦或者是与永威大佬谈笑风生，也便是如此感受到自身的落寞，或者说是落魄吧，我真的是不如人的地方太多了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>没有自制力，没有高智商，没有拼搏的奋进，没有坚定目标的追求，可能是我的生活太过于安逸，而我的一切也都容易满足了吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>便是意识到如此，试着去改变一下，慢慢的理清去做什么</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>刘汝佳的一天无数道题，曾经我也想学习，却发现是无法触及的一个壁沿，也只好笑笑</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.看北京大学c++数据结构课程，尽量做到一天3节以上，周末多一点</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.现在能去实验室了，有一个比较好的环境，电脑放好，多去，多做事</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.poj的解题 ，其实不限制于poj，一天五道水题3道b题1道c题，做好解题过程的分析和题解，不要急静下心来，想想自己学习到了什么</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4想报名ccf，9月份那一场</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>去追他们，去和他们见一次面去打一次球，去跟咏絮再打一次要求</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>书记问我为什么没入团？这一回我觉得我回答的很好了，没什么理由就是成绩差</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我啊，一个平凡的人。只能多加加油</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5每天的作业都要完成并预习，一定！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>晚安，这美好的世界</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date><![CDATA[2019-02-27 15:18:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-27 15:18:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-2-27%e6%97%a5%e9%9a%8f%e7%ac%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>pat 1003我要通过</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/27/pat-1003%e6%88%91%e8%a6%81%e9%80%9a%e8%bf%87/</link>
		<pubDate>Wed, 27 Feb 2019 23:46:27 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目链接</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题过程中的学习：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）如何读取一行的所有字符（包括空格）到字符串strign之中</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>运用getline函数</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using namespace std;
string s;
getline（cin, s);</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>2)如何正确使用find函数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>find函数的返回值是什么？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>返回找到的元素位置的迭代器或指针 ，找不到就返回超出数组尾部的第一个位置</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>find的主要作用是查找字符串中字符或者说字符子串出现的位置而rfind则是反向查找</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.理解题目的要求</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>    1）必须仅有PAT这三种字符，不可以包含其他字符（这个很好理解</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>    2）xPATx的字符串可以获得正确但x只能都是A，或者都是空格</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>    3）如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解：第三个比较不好理解，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>他的意思是首先你的aPbTc要满足条件，然后aPbATca才算满足条件</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>那我们先按照他说的写出几个字符   </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>不妨假设：a=A b=A c=A</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>即APATA是正确的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>所以APAATAA也是正确的</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>（注只考虑单A情况）</li><li>设a，b，c均为数字表示各个部位字符个数</li><li>p之前的字符个数 a</li><li>p与t之间的字符个数即为b</li><li>t之后的字符个数即为 c+a</li><li>（关键）又因为需要满足xPATx的条件才算正确的，所以a*(b+1)==c+a==2*a==2*c才算是正确</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>多写几个字符串出来你会发现规律，就是p前面的字符个数乘以P与T之间的字符个数会等于T之后的字符个数，于是可以成为判定条件</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
using namespace std;
int main() {
int n;
cin>>n;getchar();
while(n--){

    int an=0,bn=0,cn=0;//分别计算p前面的字符个数，p与t之间的字符个数，t之后的字符个数
    int p=0,t=0,a=0,rp=1;//计算各字符的个数
    bool flat = true;
    for(char s; s=getchar(),s!='\n'; ){
        s== 'P'?p++, rp=2:s=='A'? a++: s=='T'? t++,rp = 3:flat=false;//如果输入其他字符则不符合条件，则输出答案错误通过flat进行判断

        //1，2，3表示字符分别在哪个段
        switch (rp){
        case 1:
            an++;
            break;
        case 2:
            if(s!='P')
            bn++;
            break;
        case 3:
            if(s!='T')
            cn++;
            break;
        }
    }
    if(flat &amp;&amp; p==1 &amp;&amp; t==1 &amp;&amp; a &amp;&amp; an*bn==cn ){
        cout&lt;&lt;"YES"&lt;&lt;endl;
    }
    else{
        cout&lt;&lt;"NO"&lt;&lt;endl;
    }
}
	return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2019-02-27 23:46:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-27 23:46:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pat-1003%e6%88%91%e8%a6%81%e9%80%9a%e8%bf%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>别人写的很棒的算法</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/28/%e5%88%ab%e4%ba%ba%e5%86%99%e7%9a%84%e5%be%88%e6%a3%92%e7%9a%84%e7%ae%97%e6%b3%95/</link>
		<pubDate>Thu, 28 Feb 2019 00:40:14 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=426</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>1.倍增算法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>链接：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://blog.csdn.net/dong_qian/article/details/81702697">https://blog.csdn.net/dong_qian/article/details/81702697</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://blog.csdn.net/MikeJackSTG/article/details/81806120">https://blog.csdn.net/MikeJackSTG/article/details/81806120</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>倍增，<a href="https://www.baidu.com/s?wd=%E9%A1%BE%E5%90%8D%E6%80%9D%E4%B9%89&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noreferrer noopener">顾名思义</a>就是一倍一倍的增加。举个例子你每次可以跳2的k次方步。现在你要跳到距离7步的地方。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>跳8步 跳过了（不跳）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>跳4步 没跳到（跳）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>跳2步 没跳到 （跳）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>跳1步 跳到 （停）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这里就只跳了3次 比普通的7次跳发优化了4次；</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 00:40:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 00:40:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%ab%e4%ba%ba%e5%86%99%e7%9a%84%e5%be%88%e6%a3%92%e7%9a%84%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/28/429/</link>
		<pubDate>Thu, 28 Feb 2019 09:30:04 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>1）基数排序（桶排序）</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li> 1.首先根据个位数的数值，在走访数值时将它们分配至编号0到9的桶子中：  </li><li> 2.接下来将这些桶子中的数值重新串接起来  </li><li> 3.接着再进行一次分配，这次是根据十位数来分配： </li><li>... ...</li><li>... ...</li><li>n. 接着再进行一次分配，这次是根据k位数来分配：//以此类推  </li><li></li></ul>
<!-- /wp:list -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p> <br>第一步<br>以LSD为例，假设原来有一串数值如下所示：<br>73, 22, 93, 43, 55, 14, 28, 65, 39, 81<br>首先根据个位数的数值，在走访数值时将它们分配至编号0到9的桶子中：<br>0<br>1 81<br>2 22<br>3 73 93 43<br>4 14<br>5 55 65<br>6<br>7<br>8 28<br>9 39<br><br>第二步<br>接下来将这些桶子中的数值重新串接起来，成为以下的数列：<br>81, 22, 73, 93, 43, 14, 55, 65, 28, 39<br>接着再进行一次分配，这次是根据十位数来分配：<br>0<br>1 14<br>2 22 28<br>3 39<br>4 43<br>5 55<br>6 65<br>7 73<br>8 81<br>9 93<br><br>第三步<br>接下来将这些桶子中的数值重新串接起来，成为以下的数列：<br>14, 22, 28, 39, 43, 55, 65, 73, 81, 93 </p><p></p><cite>摘自百度</cite></blockquote>
<!-- /wp:quote -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 09:30:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 09:30:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[429]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="js%e6%95%99%e7%a8%8b"><![CDATA[javascript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>模板01</title>
		<link>http://yx.telstudy.xyz/index.php/2019/02/28/%e6%a8%a1%e6%9d%bf01/</link>
		<pubDate>Thu, 28 Feb 2019 08:17:18 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
typedef long long ll;
ll mod = 1e+7;
#define maxn 100
int dp[1010];
int w[1010];
int maxbit(const int *a,int n)
{
    //计算数组中最大数字的位数
    int m = abs(a[0]);
    for(int i=0; i&lt;n; i++)
    {
        m = max(m,abs(a[i]));
    }
    int t = m;
    if(t==0)
    {
        return 1;
    }
    int cnt=0;
    while(t!=0)
    {
        t/=10;
        cnt++;
    }
    return cnt;
}

ll Factre(ll n,ll mod)
{
    ll s=1;//n阶乘取余
    for(ll i=1; i&lt;=n; i++)
    {
        s*=i%mod;
        s=s%mod;
    }
    return s;
}
ll bigfactre(ll n,ll mod)
{
//超大数阶乘取余
    if(n >= mod)
        puts("0");//此处mod可以改
    else                  // 2009,7*7*41=2009;
    {
        ll ans = 1;
        for(ll i = n; i>1; i--)
        {
            ans = (ans*(i%mod))%mod;//ans=(ans%mod*i%mod)%mod;
        }

    }
}
ll pow_mod(ll a,ll b,ll c){
//快速幂取模 a^b % c
    ll ans = 1;
    ll base = a%c;
    while(b){
        if(b &amp; 1) ans = (ans*base)%c;
        base = (base*base)%c;
        b >>= 1;
    }
    return ans;
}
ll dp01(int n,int w){
    //一维数组,动态规划,01背包就是在给定背包容积和物品的质量和价值后，告知每个物品只能选一次，问背包可以装的最多的价值是多少的一类问题
  for(int i=0;i&lt;n;i++)
  for(int j=W;j>=w[i];j--)//这里要记住，是j=w,j--，后面在处理完全背包问题时，就会反过来，在这里不在多说，只是提醒一下
  dp[j]=max(dp[j],dp[j-w[i]]+v[i]);//dp[i][j]表示的是第i个物品在容积为j时的价值。
  return dp[w];
 
}

int main()
{
    return 0;
}

</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date><![CDATA[2019-02-28 08:17:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 08:17:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a8%a1%e6%9d%bf01]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>《C++面向对象程序设计》第一章</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/03/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0/</link>
		<pubDate>Sun, 03 Mar 2019 03:25:16 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://cbbbbbb.telstudy.xyz/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>一下部分解答非最简或最优解，尽力更新~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

6-1&nbsp;工作备忘录的生成（链表）&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>每天都要处理很多事务，为了更好地安排工作，希望在每天开始工作前，根据工作记录，生成工作备忘录。首先输入工作记录数（大于0的一个整数），再逐条输入各条工作记录，每条工作记录包括：工作名，开始时间，结束时间。假设每项工作的开始时间均小于它的结束时间，并且各项工作的开始时间互不相同。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我们的工作是需要把这些工作记录按开始时间排序并输出，在输出时，如果某项工作与若干项工作冲突（在做该项工作时，需要同时做其它工作），则在该工作名前加'*'。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Node* add(Node *, Node *);
void display(Node *);
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include &lt;string>
using namespace std;
struct Node{
    string name;
    int start;
    int end;
    Node *next;
};
Node* add(Node *, Node *);
void display(Node *);
bool check(Node *head)
{
    if(head==NULL || head->next==NULL) return true;
    Node *p=head->next;
    if(head->start > p->start) return false;
    return check(p);
}
int main()
{
    Node *head=NULL, *p;
    int i, repeat;
    cin>>repeat;
    for(i=0;i&lt;repeat;i++){
        p = new Node;
        cin>>p->name>>p->start>>p->end;
        p->next=NULL;
        head = add(head, p);
    }
    if(!check(head)) cout&lt;&lt;"ERROR"&lt;&lt;endl;
    display(head);
    return 0;
}

/* 请在这里填写答案 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>4
aaa 19 20
ccc 169 200
ddd 153 170
bbb 20 111
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>aaa 19 20
bbb 20 111
*ddd 153 170
*ccc 169 200</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：1.add函数主要是对链表排序的，分为三类</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）当是第一个输入时，前为null后也为null</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）当是第二个输入时，且前一个的开始时间比要输入的开始时间要晚，就应该插到第一个的前面</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3）剩下得情况就是插在两个的中间</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2display主要功能是输出用的，输出*有两种情况，一个是题目中的情况即结束时间大于下一个的开始时间，另一个是存在一个时间包含接下来的时间，即大区间包含小区间</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":437} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-1-846x1024.png" alt="" class="wp-image-437"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-2&nbsp;函数调用&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>编写三个函数：求两个整数的最大值、最小值、和。分别用这三个函数作为实参，再写一个计算函数compute，对两个整数进行各种计算。其中一个形参为指向具体算法函数的指针。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int max(int a, int b);
int min(int a, int b);
int sum(int a, int b);
int compute(int a, int b, int(*func)(int, int));
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>在这里给出函数被调用进行测试的例子。例如：
#include &lt;iostream>
using namespace std;

int max(int a, int b);
int min(int a, int b);
int sum(int a, int b);
int compute(int a, int b, int(*func)(int, int));

int main()
{
int a, b, res;
 cin >> a >> b;
res = compute(a, b, &amp; max);
cout &lt;&lt; "Max of " &lt;&lt; a &lt;&lt; " and " &lt;&lt; b &lt;&lt; " is " &lt;&lt; res &lt;&lt; endl;
res = compute(a, b, &amp; min);
cout &lt;&lt; "Min of " &lt;&lt; a &lt;&lt; " and " &lt;&lt; b &lt;&lt; " is " &lt;&lt; res &lt;&lt; endl;
res = compute(a, b, &amp; sum);
cout &lt;&lt; "Sum of " &lt;&lt; a &lt;&lt; " and " &lt;&lt; b &lt;&lt; " is " &lt;&lt; res &lt;&lt; endl;
return 0;
}

/* 请在这里填写答案 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3 5
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Max of 3 and 5 is 5
Min of 3 and 5 is 3
Sum of 3 and 5 is 8</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":438} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-2-1024x970.png" alt="" class="wp-image-438"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-3&nbsp;函数指针（理科实验班）&nbsp;（7 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>梦山高中现需要将某普通班的最优秀学生调整入理科实验班。为此，将从两个方面考察学生，一是数学和英语两门课的总分；另一个是所有四门课的总分。分别找出两科总分和全科总分的第一名，并从中决定调整人选。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入将首先输入学生数n, (n为不超过80的正整数);接下来依次输入各位学生的学号，数学、英语、语文、理科综合成绩。学号及四科成绩均为不超过３００的正整数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出时：第一行输出两科总分第一的学号，第二行输出四科总分第一的学号。　约定在两位学生成绩相同时，优先选择学号较小的学生；各位学生的学号均不相同。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
const int N=80;
struct Student{
  int num;
  int score[4];
};

/* 请在这里填写答案 */

int main()
{
  int i, j, k, n;
  bool s2(const Student &amp;, const Student &amp;);
  bool s4(const Student &amp;, const Student &amp;);
  Student st[N];
   cin>>n;
   for(i=0;i&lt;n;i++){
      cin>>st[i].num;
      for(j=0;j&lt;4;j++) cin>>st[i].score[j];
    }
   cout&lt;&lt;select(st, n, s2)&lt;&lt;endl;
   cout&lt;&lt;select(st, n, s4)&lt;&lt;endl;
}


</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3
6 148 150 120 252
5 148 150 117 260
7 145 148 128 287
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>5
7
</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":459} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-2-1024x903.png" alt="" class="wp-image-459"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p> 6-4&nbsp;二维数组（海绵城市）&nbsp;（7 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>根据海绵城市建设指挥部要求，怡山小学将对校内道路进行改造，铺设透水砖。这样有些道路将不能通行。为了不妨碍假期少先队的校内活动安排，大队宣传委员小黄需要知道一些关键的活动地点是否可以到达。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>已知校内一共有20处建筑，分别标为1号楼，２号楼，......，２０号楼。有些楼之间有道路连接，道路是双向的，如果Ａ楼与Ｂ楼间有道路，那么既可以从Ａ楼到Ｂ楼，也可以从Ｂ楼到Ａ楼。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>首先将输入校内的道路数n, 接下来分n行输入各条道路的信息，每行有两个整数（均在１和２０之间），代表这两座楼之间有道路连接。　接下来输入查询数m, 然后分m行输入要查询的楼间连路信息，每行有两个整数（均在１和２０之间）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果两楼之间可以通过一条路径到达（中途有可能经过其它楼），则输出两楼是连接的，否则输出两楼是断开的。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>完成查询两建筑是否连通的函数test</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
const int N=21;

/* 请在这里填写答案 */

int main()
{
  int a[N][N]={0}, n, m, i, j, k;
  cin>>n;
  for(i=0;i&lt;n;i++){
    cin>>j>>k;
    a[j][k]=a[k][j]=1;
  }
  cin>>m;
  for(i=0;i&lt;m;i++){
    cin>>j>>k;
    cout&lt;&lt;j&lt;&lt;'-'&lt;&lt;k&lt;&lt;' ';
    if(test(a, j, k)) cout&lt;&lt;"connected"&lt;&lt;endl; else cout&lt;&lt;"disconnected"&lt;&lt;endl;
  }	
  return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>2
1 2
2 3
2
1 3
1 4
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1-3 connected
1-4 disconnected</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解:入门图论，无向图判断两点是否链接</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":450} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-1-1-1014x1024.png" alt="" class="wp-image-450"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-5&nbsp;引用作函数形参交换两个整数&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>设计一个void类型的函数Swap，该函数有两个引用类型的参数，函数功能为实现两个整数交换的操作。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;

/* 请在这里填写答案 */

int main()
{
    int a, b;

    cin >> a >> b;

    Swap(a, b);

    cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; endl;

    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3 5
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>5 3</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:gallery {"ids":[439]} -->
<ul class="wp-block-gallery columns-1 is-cropped"><li class="blocks-gallery-item"><figure><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-3-1024x835.png" alt="" data-id="439" data-link="http://cbbbbbb.telstudy.xyz/?attachment_id=439" class="wp-image-439"/></figure></li></ul>
<!-- /wp:gallery -->

<!-- wp:paragraph -->
<p>

6-6&nbsp;函数重载实现两数相加&nbsp;（15 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>设计一个重载函数add，该函数有两个参数，可以实现两个类型相同的参数相加的操作，函数返回相加的结果。两个参数可以是整数、实数和字符串，但必须保证两个参数类型相同。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
#include &lt;iomanip>
using namespace std;

/* 请在这里填写答案 */


int main()
{
    int a, b;
    double c, d;
    string s1, s2;

    cin >> a >> b;
    cin >> c >> d;
    cin >> s1 >> s2;

    cout &lt;&lt; add(a, b) &lt;&lt; endl;
    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; add(c, d) &lt;&lt; endl;
    cout &lt;&lt; add(s1, s2) &lt;&lt; endl;

    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3 5
3.3333 5.555555
hello world
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>8
8.89
helloworld</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：通过类定义完成重载，但是应该不是这么做，理论上string是可以直接相加的，但是编译两个函数存在时一直编译不通过</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":440} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-4-1024x287.png" alt="" class="wp-image-440"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-7&nbsp;带默认形参值的函数&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>设计一个带默认形参值的函数add，该函数有三个参数，可以实现三个整数类型的参数相加的操作，函数返回相加的结果。默认形参值从右至左分别是30、20。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;

/* 请在这里填写答案 */


int main()
{
    int a, b, c;

    cin >> a >> b >> c;

    cout &lt;&lt; add(a) &lt;&lt; endl;
    cout &lt;&lt; add(a, b) &lt;&lt; endl;
    cout &lt;&lt; add(a, b, c) &lt;&lt; endl;

    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1 2 3
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>51
33
6
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：正规的函数重载</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":441} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-5-1024x967.png" alt="" class="wp-image-441"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-8&nbsp;使用动态内存分配的冒泡排序&nbsp;（20 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>编程实现冒泡排序函数int* bubble_sort(int n);。其中n为数组长度（1≤n≤1000）。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义如下：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int* bubble_sort(int n);/* 对长度为n的数组arr执行冒泡排序 */
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>请实现bubble_sort函数，使排序后的数据从小到大排列。要求在bubble_sort函数内使用动态内存分配方式分配一个大小为n的数组，再读入待排序数据，排序完成后返回数组。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;

int* bubble_sort(int n);/* 对长度为n的数组执行冒泡排序 */

int main()
{
    int n;
    cin >> n;
    int* a = bubble_sort(n);
    for (int i = 0; i &lt; n; i++) {
    	cout &lt;&lt; a[i];
    	if (i &lt; n - 1)cout &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    return 0;
}

/* 你的代码将嵌在这里 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>10
15168 28139 13714 27801 22208 32524 21653 8353 28341 25922
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>8353 13714 15168 21653 22208 25922 27801 28139 28341 32524</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：直接使用sort函数排序，记得头文件，new是c++中申请动态内存的函数</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":442} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-6-917x1024.png" alt="" class="wp-image-442"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

6-9&nbsp;逆序字符串&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>设计一个void类型的函数reverse_string，其功能是将一个给定的字符串逆序。例如，给定字符串为“hello”，逆序后为“olleh”。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义如下：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/* 函数原型参见main函数 */
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using namespace std;

/* 你的代码将嵌在这里 */

int main(int argc, char const *argv[])
{
    string str;
    getline(cin, str);		//输入字符串
    reverse_string(str); 	//逆序字符串str
    cout &lt;&lt; str &lt;&lt; endl;	//输出逆序后的字符串
    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>hello
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>olleh</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：string函数库中存在reverse函数可直接对字符串进行翻转，这里用不了，就用for逐个替换了</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":443} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-7-1024x834.png" alt="" class="wp-image-443"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

7-1&nbsp;时间换算&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入一个正整数 repeat (0&lt;repeat&lt;10)，做 repeat 次下列运算：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入一个时间数值，再输入秒数 n，输出该时间再过 n 秒后的时间值，时间的表示形式为时:分:秒，超过 24 时从 0 时重新开始计时。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出格式： printf("time: %d:%d:%d\n", );</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入输出示例：括号内为说明，无需输入输出</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3	   (repeat=3)
0:0:1
59	   (秒数n=59)
11:59:40   
30	   (秒数n=30)
23:59:40   
301	   (秒数n=301)
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>time: 0:1:0	   (0:0:01加上59秒的新时间)   
time: 12:0:10	   (11:59:40加上30秒的新时间)
time: 0:4:41	   (23:59:40加上301秒的新时间)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：考察对取余%和除/符号的应用和了解</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":445} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-8-847x1024.png" alt="" class="wp-image-445"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

7-2&nbsp;查找单价最高和最低的书籍&nbsp;（10 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>编写程序，从键盘输入 n (n&lt;10)本书的名称和定价并存入结构数组中，查找并输出其中定价最高和最低的书的名称和定价。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出格式语句：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>printf("highest price: %.1f, %s\n", );</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>printf("lowest price: %.1f, %s\n",);</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入输出示例：括号内为说明，无需输入输出</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3	(n=3)
Programming in C
21.5
Programming in VB
18.5
Programming in Delphi
25
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>highest price: 25.0, Programming in Delphi 
lowest price: 18.5, Programming in VB </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：wa了好几次，忘记了在输入数字后有空格会影响字符串的输入，</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//能够避免空格影响输入整行字符串的方法-》》》》替代gets
getline(cin,a[i]);</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":444} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-9-622x1024.png" alt="" class="wp-image-444"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>

7-3&nbsp;二进制数转十进制数&nbsp;（20 分）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入仅由0和1构成的整数（即“二进制”数）, 输出该数对应的十进制数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输入仅由0和1构成的整数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输出相应的十进制数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出一组输入。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>101100
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出相应的输出。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>44</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：注意字符的存储顺序</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":446} -->
<figure class="wp-block-image"><img src="http://cbbbbbb.telstudy.xyz/wp-content/uploads/2019/03/carbon-10-868x1024.png" alt="" class="wp-image-446"/></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 03:25:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 03:25:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%80%e7%ab%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[459]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[127]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷P1002 过河卒</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/07/%e6%b4%9b%e8%b0%b7p1002-%e8%bf%87%e6%b2%b3%e5%8d%92/</link>
		<pubDate>Thu, 07 Mar 2019 22:56:43 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>棋盘上A<em>A</em>点有一个过河卒，需要走到目标B<em>B</em>点。卒行走的规则：可以向下、或者向右。同时在棋盘上C<em>C</em>点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>棋盘用坐标表示，A<em>A</em>点(0, 0)(0,0)、B<em>B</em>点(n, m)(<em>n</em>,<em>m</em>)(n<em>n</em>,&nbsp;m<em>m</em>为不超过2020的整数)，同样马的位置坐标是需要给出的。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>现在要求你计算出卒从A<em>A</em>点能够到达B<em>B</em>点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一行四个数据，分别表示B<em>B</em>点坐标和马的坐标。<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一个数据，表示所有的路径条数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6 6 3 3
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6
</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>结果可能很大！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：个人感觉题挺坑的，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.首先马走日，中国银给中国银出的题，就用中国银的思想嘛~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.第二马所在的位置也是不能过的不要漏了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.结果可能会很大，所以long long</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4.还要防止数组越界，所以开大一点点</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5.为什么说开大一点点呢，因为全局变量开太多的话，会导致re</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（百度抄了一句话， re可能是<br><strong>栈溢出。一般是由于无限递归或者在函数里使用了太大的数组变量的原因。&nbsp;</strong> ）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
typedef long long ll;
using namespace std;
ll a,b,x,y,m[23][23],w[23][23];


void Calculation(ll a,ll b,ll x,ll y){
    m[x][y]=1;//马所在以及所能到达的位置都标记1
	m[x-1][y+2]=1;
	m[x-1][y-2]=1;
	m[x+1][y+2]=1;
	m[x+1][y-2]=1;
	m[x+2][y+1]=1;
	m[x+2][y-1]=1;
	m[x-2][y+1]=1;
	m[x-2][y-1]=1;//对不能通行的位置进行标记
	w[1][0]=1;//将此作为开始位置，等于整个位置向左移了一格
	for(int i=1; i&lt;=a+1; ++i){
		for(int j=1; j&lt;=b+1; ++j){
			w[i][j] = w[i-1][j] + w[i][j-1];
			if(m[i-1][j-1]){
				w[i][j]=0;
//如果m二维数组是1的话则说明该位置因为马不能经过
//为什么要i-1，j-1呢？是因为我们后来把w从（1，0）进行开始，而m二维数组未发生改变
	}
		}
	}
	cout&lt;&lt;w[a+1][b+1]&lt;&lt;endl;
}

int main(){
	cin>>a>>b>>x>>y;
	Calculation(a,b,x,y);
	return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date><![CDATA[2019-03-07 22:56:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 22:56:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b4%9b%e8%b0%b7p1002-%e8%bf%87%e6%b2%b3%e5%8d%92]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷 p1003 铺地毯</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/09/p1003-%e9%93%ba%e5%9c%b0%e6%af%af/</link>
		<pubDate>Sat, 09 Mar 2019 03:19:51 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1003">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有&nbsp;n<em>n</em>&nbsp;张地毯，编号从&nbsp;11&nbsp;到n<em>n</em>。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入共n+2<em>n</em>+2行</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第一行，一个整数n<em>n</em>，表示总共有n<em>n</em>张地毯</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来的n<em>n</em>行中，第&nbsp;i+1<em>i</em>+1行表示编号i<em>i</em>的地毯的信息，包含四个正整数a ,b ,g ,k<em>a</em>,<em>b</em>,<em>g</em>,<em>k</em>&nbsp;，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标(a,b)(<em>a</em>,<em>b</em>)以及地毯在x<em>x</em>轴和y<em>y</em>轴方向的长度</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第n+2<em>n</em>+2行包含两个正整数x<em>x</em>和y<em>y</em>，表示所求的地面的点的坐标(x,y)(<em>x</em>,<em>y</em>)<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出共11行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出-1−1</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3
1 0 2 3
0 2 3 3
2 1 3 3
2 2
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3

</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输入样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3
1 0 2 3
0 2 3 3
2 1 3 3
4 5</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">-1</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>【样例解释1】</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如下图，11&nbsp;号地毯用实线表示，22&nbsp;号地毯用虚线表示，33&nbsp;号用双实线表示，覆盖点(2,2)(2,2)的最上面一张地毯是&nbsp;33&nbsp;号地毯。</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://cdn.luogu.org/upload/pic/100.png" alt=""/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>【数据范围】</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于30% 的数据，有&nbsp;n ≤2<em>n</em>≤2&nbsp;；<br>对于50% 的数据，0 ≤a, b, g, k≤1000≤<em>a</em>,<em>b</em>,<em>g</em>,<em>k</em>≤100；<br>对于100%的数据，有&nbsp;0 ≤n ≤10,0000≤<em>n</em>≤10,000&nbsp;，0≤a, b, g, k ≤100,0000≤<em>a</em>,<em>b</em>,<em>g</em>,<em>k</em>≤100,000。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>noip2011提高组day1第1题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 1.先理解好题目的意思，按顺序铺地毯，地毯铺的位置可能不同，可能有部分重叠，可能完全不重叠</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.注意数据范围~~~~开的数组大小。。。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.最后求解的是那个点最上方的地毯序号，是第几次朴(/≧▽≦)/的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我的第一次代码（mle，五十分），</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>mle的思路是把每个数组当作坐标轴上的每个点进行赋值，不行~题目卡数据惹</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
using namespace std;
int a[10001][10001]={0};
int main(){
    int n;
    cin>>n;
        int x,y;
    int l,h;
    for(int i=1; i&lt;=n; i++){
        cin>>x>>y>>l>>h;
        for(int p=x; p&lt;=x+l; p++){
            for(int q=y; q&lt;=y+h; q++){
                a[p][q]=i;
            }
        }
    }
    int u,v;
    cin>>u>>v;
    a[u][v]==0?cout&lt;&lt;"-1"&lt;&lt;endl:cout&lt;&lt;a[u][v]&lt;&lt;endl;

    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>ac代码</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
using namespace std;
int a[10001][4];
int main()
{
    int n;
    cin>>n;
    //[1]·[2] 是地毯左下角坐标，[3]·[4]是长宽
    for(int i=0; i&lt;n; i++)
    {
        cin>>a[i][0]>>a[i][1]>>a[i][2]>>a[i][3];
        a[i][2]+=a[i][0];
        a[i][3]+=a[i][1];
    }//这一行上的四个值就都是这个地毯的信息了
    int x,y;
    cin>>x>>y;
    bool f=false;
    int i;
    for(i=n-1; i>=0; i--)
    {
        if(a[i][0]&lt;=x&amp;&amp;a[i][1]&lt;=y&amp;&amp;x&lt;=a[i][2]&amp;&amp;y&lt;=a[i][3])
        {
            f=true;
            break;
        }
    }
    f==true?cout&lt;&lt;i+1&lt;&lt;endl:cout&lt;&lt;"-1"&lt;&lt;endl;
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date><![CDATA[2019-03-09 03:19:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-09 03:19:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1003-%e9%93%ba%e5%9c%b0%e6%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷 P1007 独木桥</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/09/%e6%b4%9b%e8%b0%b7-p1007-%e7%8b%ac%e6%9c%a8%e6%a1%a5/</link>
		<pubDate>Sat, 09 Mar 2019 08:19:33 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1007">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这个其实最主要的是思维的难度而不是算法的难度，在正面相遇的时候会回头，可以理解成继续往前走下去而不存在回头，最后总的结果是相同的，因为走出桥可以0也可以是l+1，再加上速度都是1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ac代码</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;cstdio>
using namespace std;
int main()
{
    int n,l,p,maxv=0,minv=0;
    scanf("%d%d",&amp;l,&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf("%d",&amp;p);
        maxv=max(maxv,max(l-p+1,p));
        minv=max(minv,min(l-p+1,p));//从最小的路径中找出最大的
    }
    printf("%d %d",minv,maxv);
    return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date><![CDATA[2019-03-09 08:19:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-09 08:19:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b4%9b%e8%b0%b7-p1007-%e7%8b%ac%e6%9c%a8%e6%a1%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷 P1008 三连击</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/09/%e6%b4%9b%e8%b0%b7-p1008-%e4%b8%89%e8%bf%9e%e5%87%bb/</link>
		<pubDate>Sat, 09 Mar 2019 08:41:07 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=471</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1008">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：这题挺有意思的，只能出现1~9，还要三个数字，等于每个数字都出现过一遍了~</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意1.循环优化2. <br>只能出现1~9，还要三个数字，等于每个数字都出现过一遍了~ </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
using namespace std;
int main(){
    //因为是三位数所以最大值都不会超过10000
    int x=100;
    for(int i=192; i&lt;=333; i++){

        if((i%10+i/10%10+i/100+2*i%10+2*i/10%10+2*i/100+3*i%10+3*i/10%10+3*i/100==1+2+3+4+5+6+7+8+9)&amp;&amp;(i%10)*(i/10%10)*(i/100)*(2*i%10)*(2*i/10%10)*(2*i/100)*(3*i%10)*(3*i/10%10)*(3*i/100)==1*2*3*4*5*6*7*8*9){
            cout&lt;&lt;i&lt;&lt;" "&lt;&lt;i*2&lt;&lt;" "&lt;&lt;i*3&lt;&lt;endl;
        }
    }
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date><![CDATA[2019-03-09 08:41:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-09 08:41:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b4%9b%e8%b0%b7-p1008-%e4%b8%89%e8%bf%9e%e5%87%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Max Sum Plus Plus HDU - 1024</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/24/max-sum-plus-plus-hdu-1024/</link>
		<pubDate>Sun, 24 Mar 2019 07:25:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=474</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题解参考链接： <br><a href="https://www.cnblogs.com/zhengguiping--9876/p/5349720.html">https://www.cnblogs.com/zhengguiping--9876/p/5349720.html</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目链接：<a href="https://cn.vjudge.net/problem/16215/origin">https://cn.vjudge.net/problem/16215/origin</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：类似于求解最大子序列之和</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意点：<br>1.在题目所给暗示中提及了数据较大，因此考虑到了滚动数组</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>滚动数组：因为动态规划是自下而上一层一层进行计算的，所以每次实际上使用到的只有两层数组，因此 通过异或实现动态数组</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>异或：k=1^k(这会是0，下回是1，下回再是0，如此一直滚动下去，节省了较多的空间（灵魂画图~不知道能不能帮助理解</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":475} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/03/无标题-1024x576.png" alt="" class="wp-image-475"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>2动态编程~~~不就是动态规划么</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3.数据不需要使用long long类型，使用ll会导致超时</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ac代码：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;algorithm>
#include &lt;cstring>
#include &lt;string>

using namespace std;
typedef long long ll;
#define N 1000050

int n, m, dp[2][N], a[N];
int main()
{
    while(cin >> m >>n)
    {
            memset( dp, 0, sizeof(dp));
            memset( a, 0, sizeof(a));
            //对数组进行清零

            for(int i=1; i&lt;=n; i++)
                cin >>a[i];

            int maxx, ans,k;

            k=0;

            for(int i=1; i&lt;=m; i++)
            {
                k = k^1; //猜测实现两层数组的存放
                //C++中^符号表示：按位异或运算符。
                dp[k][i] = dp[k^1][i-1]+a[i];
                //题解：选择 i个数字，分成i段，所以只能自己成一段，那么只能这样写
                maxx = dp[k^1][i-1];//每行第一个索性设为最大值
                ans = dp[k][i];

                for(int j=i+1; j&lt;=n; j++)
                {
                    maxx = max(maxx,dp[k^1][j-1]);
                    dp[k][j] = max(maxx +a[j],dp[k][j-1]+a[j]);
                    ans = max(dp[k][j],ans);
                }
            }

        cout&lt;&lt;ans&lt;&lt;endl;
    }

    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2019-03-24 07:25:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-24 07:25:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[max-sum-plus-plus-hdu-1024]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[475]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CF110A Nearly Lucky Number</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/26/cf110a-nearly-lucky-number/</link>
		<pubDate>Tue, 26 Mar 2019 11:04:53 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=484</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="http://codeforces.com/problemset/problem/110/A">http://codeforces.com/problemset/problem/110/A</a>传送门</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解释：这是cf上的一题a题，在洛谷上被分类成入门级别的难度，代码难度不高但是对对题目的理解能力要求比较高，或者说这题比较坑</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果一个数仅包含4和7，那么它就是一个"幸运数字"。 如果一个数<strong>本身不是</strong>幸运数，但是它所含有的数字4和7的个数之和为一个"幸运数字"，那么它就是一个"类幸运数字"。 给您一个数，请编程判断它是不是"类幸运数字"。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>输入格式</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>一行一个整数N(N在64位整数(long long / int64)范围内)。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>输出格式</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>一行一个字符串，如果N是"类幸运数字"则输出"YES"，否则输出"NO"。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">40047
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">NO
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输入样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">7747774
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">YES
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输入样例#3：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1000000000000000000
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#3：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">NO<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>题解：思路上没有难度，但要注意你所判断的是否是“类幸运数字”，而不是“幸运数字”，也就是说你其实可以不用管是否是幸运数字</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
int main()
{
    string s;
    cin >> s;
    int num = 0;
    bool f = true;
    for(int i=0; i&lt;s.size(); i++)
    {
        if( s[i] == '4'|| s[i] == '7')
            num ++;
    }
     num == 4 || num == 7 ? cout &lt;&lt; "YES" &lt;&lt; endl : cout&lt;&lt;"NO" &lt;&lt; endl;
//因为s的长度有限制所以直接判断是否4个或者7个就可以了，4和7才是幸运数字
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>484</wp:post_id>
		<wp:post_date><![CDATA[2019-03-26 11:04:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-26 11:04:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cf110a-nearly-lucky-number]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1005 矩阵取数游戏</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/26/p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f/</link>
		<pubDate>Tue, 26 Mar 2019 12:49:33 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=489</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>传送门：<a href="https://www.luogu.org/problemnew/show/P1005">https://www.luogu.org/problemnew/show/P1005</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的n \times m<em>n</em>×<em>m</em>的矩阵，矩阵中的每个元素a_{i,j}<em>a</em><em>i</em>,<em>j</em>​均为非负整数。游戏规则如下：</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>每次取数时须从每行各取走一个元素，共n<em>n</em>个。经过m<em>m</em>次后取完矩阵内所有元素；</li><li>每次取走的各个元素只能是该元素所在行的行首或行尾；</li><li>每次取数都有一个得分值，为每行取数的得分之和，每行取数的得分 = 被取走的元素值\times 2^i×2<em>i</em>，其中i<em>i</em>表示第i<em>i</em>次取数（从11开始编号）；</li><li>游戏结束总得分为m<em>m</em>次取数得分之和。</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>帅帅想请你帮忙写一个程序，对于任意矩阵，可以求出取数后的最大得分。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入文件包括n+1<em>n</em>+1行：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第11行为两个用空格隔开的整数n<em>n</em>和m<em>m</em>。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第2\backsim n+12∽<em>n</em>+1行为n \times m<em>n</em>×<em>m</em>矩阵，其中每行有m<em>m</em>个用单个空格隔开的非负整数。<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出文件仅包含11行，为一个整数，即输入矩阵取数后的最大得分。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 3 <br>1 2 3 <br>3 4 2 </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">82</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>NOIP 2007 提高第三题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>数据范围：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>60%的数据满足：1\le n, m \le 301≤<em>n</em>,<em>m</em>≤30，答案不超过10^{16}1016<br>100%的数据满足：1\le n, m \le 801≤<em>n</em>,<em>m</em>≤80，0 \le a_{i,j} \le 10000≤<em>ai</em>,<em>j</em>​≤1000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：（到目前为止对该题的熟练程度和理解程度尚不够，以后会对题解加以修改以及补充）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意点：数据真的很大，大到要自己写重载运算符</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>对于每行越后取 <strong>大的数字</strong> 所能得到的和才最大（以下参考自 <br> <a href="https://www.luogu.org/space/show?uid=14908">Jack_Homes_Huang</a>  在洛谷所写题解）</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>状态</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>我们用f_{i,j} </li><li><em>fi</em>,<em>j</em>​表示区间<strong>变为</strong>[i,j][<em>i</em>,<em>j</em>]时，获得的最大分数。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>转移</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li> 当区间变为[i,j][<em>i</em>,<em>j</em>]时，上一次取数的时候区间一定是[i-1,j][<em>i</em>−1,<em>j</em>]或[i,j+1][<em>i</em>,<em>j</em>+1]</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p> 从这两个状态转移即可。在第m-j+i-1<em>和 m</em>−<em>j</em>+<em>i</em>−1 次取走了A_[i-1,j] <em>A [i</em>−1, <em>j]</em>​或A_[i,j+1]<em>A[i</em>,<em>j</em>+1]​即： </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":490} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204615.png" alt="" class="wp-image-490"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>终值（答案）</h3>
<!-- /wp:heading -->

<!-- wp:image {"id":491} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/03/QQ图片20190326204659.png" alt="" class="wp-image-491"/></figure>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li></li><li>因为题目中说要取完，但是空区间是DP不出来的，然后就得手动模拟每个长度为11的区间。即：</li><li>Ans=max_{i \leq m}\{f_{i,i}+A_{i,i} \cdot 2^m\}<em>Ans</em>=<em>maxi</em>≤<em>m</em>​{<em>fi</em>,<em>i</em>​+<em>Ai</em>,<em>i</em>​⋅2<em>m</em>}</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include&lt;cstdio>
#include&lt;cstring>
#include&lt;cmath>
#include&lt;algorithm>

using namespace std;

const int maxn = 85, mod = 10000;//这里mod的应该是高精度压缩大法

int n,m;
int arr[maxn];

struct hp
{
    int p[505],len;

    hp()
    {
        memset(p, 0, sizeof (p));//对p数组进行清空
        len = 0;//长度
    }
    //构造一个高精度变量
    void print()//最后结果的输出函数
    {
        printf("%d",p[len]);
        for(int i = len-1; i>0; i-- )
        {
            if(p[i] == 0)
            {
                cout&lt;&lt;"0000";
                continue;
            }

        for(int k = 10; k * p[i] &lt; mod; k*=10)
            cout&lt;&lt;"0";
        cout&lt;&lt;p[i];
        }
    } //四位压缩输出
} f[maxn][maxn], base[maxn], ans;

hp operator + (const hp &amp;a,const hp &amp;b)
{
    hp c;
    c.len = max(a.len,b.len);//寻找较长的数字
    int x = 0;
    for(int i = 1; i &lt;= c.len; i++)
    {
        c.p[i] = a.p[i] + b.p[i] + x;
        x = c.p[i] / mod;
        c.p[i] %= mod;
    }
    if(x > 0)
    {
        c.p[++c.len] = x;
    }
    return c;
} // 加法的高精度运算

hp operator * (const hp &amp;a,const int &amp;b)
{
    hp c;
    c.len = a.len;
    int x = 0;
    for(int i = 1; i &lt;= c.len; i++)
    {
        c.p[i] = a.p[i] * b + x;
        x = c.p[i] / mod;
        c.p[i] %= mod;
    }
    while(x > 0)
        c.p[++c.len] = x % mod, x/=mod;

    return c;
} //高精度 *单精度

hp max(const hp &amp;a, const hp &amp;b)
{
    if(a.len > b.len)
        return a;
    else if (a.len &lt; b.len)
        return b;
    for(int i = a.len; i > 0; i--)
        if(a.p[i] > b.p[i])
            return a;
        else if(a.p[i] &lt; b.p[i])
            return b;
    return a;
}//大数比较取最大值，比较两个数字的最大值，先从长度开始比较，然后比较大小，从最大位开始比较

void basetwo()
{
    base[0].p[1] = 1,base[0].len = 1;
    for(int i = 1; i &lt;= m + 2; i++)
    {
        base[i] = base[i - 1] * 2;
    }
}//预处理出二的幂

int main()
{
    cin>>n>>m;
    basetwo();
    while(n--)
    {
        memset(f, 0, sizeof(f));
        for(int i = 1; i &lt;= m; i++)
            cin>>arr[i];
        for(int i = 1; i &lt;= m; i++)
            for(int j = m; j >= i; j--) {
                    //动态规划的动态转移方程
                    //因为每次只取最前面或者最后面的数字
                f[i][j] = max(f[i][j], f[i - 1][j] + base[m - j + i - 1] * arr[i - 1]);
                f[i][j] = max(f[i][j], f[i][j + 1] + base[m - j + i - 1] * arr[j + 1]);
            }
        hp Max;
        for(int i = 1; i &lt;= m; i++)
            Max = max(Max, f[i][i] + base[m] * arr[i]);
        ans = ans + Max; // 结果记录到总答案中
    }
    ans.print();//输出
return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date><![CDATA[2019-03-26 12:49:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-26 12:49:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[491]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>《C++面向对象程序设计》第三章判断选择解析</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/28/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%89%e7%ab%a0%e5%88%a4%e6%96%ad%e9%80%89%e6%8b%a9%e8%a7%a3%e6%9e%90/</link>
		<pubDate>Thu, 28 Mar 2019 00:09:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=497</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

1-1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>虚函数是用virtual 关键字说明的成员函数。&nbsp;(&nbsp;F ) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解： 因为基类中可以利用virtual关键字来声明虚函数，但派生类中定义相同原型函数时可不必加virtual说明，直接重写基类中的函数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1-2</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 抽象类是指一些没有说明对象的类 。( F )</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：<strong>抽象基类：</strong>含有纯虚函数的类称为抽象类，抽象类负责接口的定义，而后续的其他类可以覆盖该接口。这种类不能声明对象，只是作为基类为派生类服务

</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <a rel="noreferrer noopener" target="_blank" href="https://www.nowcoder.com/questionTerminal/a6d17dac54c64d4f8712c578ef5d2dc3">https://www.nowcoder.com/questionTerminal/a6d17dac54c64d4f8712c578ef5d2dc3</a><br>来源：牛客网</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>关于虚函数的描述中，（ ）是正确的。
</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>虚函数是一个static类型的成员函数</li><li>虚函数是一个非成员函数</li><li>基类中说明了虚函数后，派生类中将其对应的函数可不必说明为虚函数</li><li>派生类的虚函数与基类的虚函数具有不同的参数个数和类型</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><a href="javascript:void(0)"></a> 正确答案：C </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>A答案：静态成员函数，可以不通过对象来调用，即没有隐藏的this指针。virtual函数一定要通过对象来调用，即有隐藏的this指针。所以虚函数不可以是static的；</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>B答案：这很明显吧，怎么不叫成员函数呢orz；</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>C答案：这个就是虚函数的特性，只要派生类的函数与基类的同原型（函数返回类型、函数名和形参列表），自动转为虚函数，不需要声明virtual； </code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>D答案：参考C答案，如果不同的话就叫作函数重载了.</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解 </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date><![CDATA[2019-03-28 00:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-28 00:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%89%e7%ab%a0%e5%88%a4%e6%96%ad%e9%80%89%e6%8b%a9%e8%a7%a3%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Reverse Number HDU - 1266</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/28/reverse-number-hdu-1266/</link>
		<pubDate>Thu, 28 Mar 2019 12:23:35 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/problem/40583/origin">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题意：给你一个数，对其进行翻转，符号不能翻转，末尾为0不能翻转到第一位，需要保留</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date><![CDATA[2019-03-28 12:23:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-28 12:23:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reverse-number-hdu-1266]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Codeforces Round #549 (Div. 2)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/31/codeforces-round-549-div-2/</link>
		<pubDate>Sun, 31 Mar 2019 02:08:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=505</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>传送门直接点击名字即可</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://codeforces.com/contest/1143/problem/A">A - The Doors</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：0和1分别代表左门和右门，当所有的左门或者右门都打开则视为到达目的，输出最少要打开几扇门</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：应该算简单的模拟题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>误：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>错因分析：我这么写可能有一种情况有一扇左门或者右门在十分后面，该题左门和右门的数量是没有限制和要求的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>8</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 1 1 1 1 0 0 1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>正确的输出应该是7而该程序的输出是4</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>

Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5
1 1 0 0 0
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Answer</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Checker Log</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">wrong answer 1st numbers differ - expected: '2', found: '3'<br>这种也是过不去的</pre>
<!-- /wp:preformatted -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
int main()
{
    long long t, x, a[2] = { 0 , 0 }, f = 0;
    cin >> t;
    for(int i = 1; i &lt;= t; i++)
    {
        cin >> x;
        a[x] ++;
        if( a[x] >= t/2 &amp;&amp; !f)
        {
            f = i;
        }

    }
    if(t==1||t==0){
            cout&lt;&lt;t&lt;&lt;endl;
        return 0;
    }
    if( t%2 == 1)
        cout &lt;&lt; f+1 &lt;&lt; endl;
    else
        cout &lt;&lt; f &lt;&lt; endl;

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>正确：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：找到0或1的最后一个位置比较谁的位置靠前则那即为最小的开门数</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;algorithm>
using namespace std;
int main() {
    int n;
    cin >> n;
    int ans1 = -1, ans2 = -1;
    int x;
    for (int i=1; i &lt;= n; i++)
    {
        cin >> x;
        if(x){
             ans1 = i;
        }
        else{
            ans2 = i;
        }
    }
    cout &lt;&lt; min(ans2, ans1) &lt;&lt; endl;
return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>505</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 02:08:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 02:08:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codeforces-round-549-div-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>验证角谷猜想 HDU - 1279</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/31/%e9%aa%8c%e8%af%81%e8%a7%92%e8%b0%b7%e7%8c%9c%e6%83%b3-hdu-1279/</link>
		<pubDate>Sun, 31 Mar 2019 04:24:59 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1279">传送门（直接点击即可）</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意： 任何一个大于一的自然数，如果是奇数，则乘以三再加一；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>如果是偶数，则除以二；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>得出的结果继续按照前面的规则进行运算，最后必定得到一。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>现在请你编写一个程序验证他的正确性。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>该题题意简单，按要求作答即可，感觉测试数据也不强</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>关键在于输出no number要怎么解决</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
int flat;//设定的全局变量用于考虑no number
int f(int n)
{
//递归
    if(n==1)
    {
        if(flat==0)
            cout &lt;&lt; "No number can be output !" &lt;&lt; endl;
        else
            cout &lt;&lt; endl;
        return n;
    }
    else if( n > 1 &amp;&amp; n%2 )
    {

        if(flat==0)
            cout &lt;&lt; n ;
        else
            cout &lt;&lt; " " &lt;&lt; n;
        flat++;
        return f ( 3 * n + 1 );
    }
    else if(n > 1 &amp;&amp; !(n%2))
    {
        return f ( n / 2 );
    }
    else
    {
        cout &lt;&lt; "No number can be output !" &lt;&lt; endl;//这里防止有小于1的数据出现，单测试数据中应该是没有小于1的，按题意省略也可
        return 0;
    }

}
int main()
{
    int n, x ;
    cin >> n;
    while(n--)
    {   flat = 0;
        cin >> x;

        if(f(x)==1)
        {
            ;//在调用函数的时候输出一同进行
        }
        else if(flat==0){
           cout &lt;&lt; "No number can be output !" &lt;&lt; endl;//else if也可以省略
        }

    }

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 04:24:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 04:24:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%aa%8c%e8%af%81%e8%a7%92%e8%b0%b7%e7%8c%9c%e6%83%b3-hdu-1279]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>回文数猜想 HDU - 1282</title>
		<link>http://yx.telstudy.xyz/index.php/2019/03/31/%e5%9b%9e%e6%96%87%e6%95%b0%e7%8c%9c%e6%83%b3-hdu-1282/</link>
		<pubDate>Sun, 31 Mar 2019 08:07:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=515</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://cn.vjudge.net/problem/37883/origin">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（基本知识） 一个正整数，如果从左向右读（称之为正序数）和从右向左读（称之为倒序数）是一样的，这样的数就叫回文数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>任取一个正整数，如果不是回文数，将该数与他的倒序数相加，若其和不是回文数，则重复上述步骤，一直到获得回文数为止。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如：68变成154（68+86），再变成605（154+451），最后变成1111（605+506），而1111是回文数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>于是有数学家提出一个猜想：不论开始是什么正整数，在经过有限次正序数和倒序数相加的步骤后，都会得到一个回文数。至今为止还不知道这个猜想是对还是错。现在请你编程序验证之。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Input每行一个正整数。 <br>特别说明：输入的数据保证中间结果小于2^31。Output对应每个输入，输出两行，一行是变换的次数，一行是变换的过程。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">27228
37649</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3 27228--->109500--->115401--->219912 2 37649--->132322--->355553<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>题解：我觉得这题主要是考察分模块实现不同功能，如果堆积在一个main里实现会太乱了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;algorithm>
#include &lt;cstring>
#include &lt;cmath>
using namespace std;

int a[1010];
int is ( int n)
{
    int temp = n;
    int t = 0;
    while( temp > 0 )
    {
        t = t*10 + temp%10;
        temp /= 10;
    }
    return t == n;

}//判断是否为回文数

int ca(int x)
{
    //计算倒叙数
    int t = 0;
    while( x > 0 )
    {
        t = t*10 + x%10;
        x/=10;
    }
    return t;
}
int main()
{
    int x, cnt;//cnt用于计算变换次数
    while( cin >> x )
    {
        //由于是多种输入，所以用while
        cnt = 0;
        memset(a,0,1010);
        while(!is(x)){
            a[cnt] = x;
            cnt++;
            x += ca(x);
        }
        a[cnt] = x;
        cout &lt;&lt; cnt &lt;&lt; endl;
        for(int i=0; i&lt;=cnt; i++) {
            i==0 ? cout &lt;&lt; a[i] : cout &lt;&lt; "--->" &lt;&lt; a[i];
        }
        cout &lt;&lt; endl;
    }

}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 08:07:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 08:07:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9b%9e%e6%96%87%e6%95%b0%e7%8c%9c%e6%83%b3-hdu-1282]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>数论专题学习以及题集整理</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/04/%e6%95%b0%e8%ae%ba%e4%b8%93%e9%a2%98%e5%ad%a6%e4%b9%a0%e4%bb%a5%e5%8f%8a%e9%a2%98%e9%9b%86%e6%95%b4%e7%90%86/</link>
		<pubDate>Thu, 04 Apr 2019 01:39:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>P1009 阶乘之和</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1009">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：阶层通常是会涉及到大数的运算，因为阶层的运算中数字增长的速度快</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
using namespace std;
#define maxn 2000
int a[maxn], b[maxn], c[maxn], sum[maxn];

void pplus(int *a,int *c)
{
//两个数字相加
    int t = 0; //进位数
    for(int i = 1; i&lt;=maxn/2; i++)
    {
        //1000位
        c[i] += a[i] + t;
        t = c[i] / 10;
        c[i] %= 10;
    }

}
void cheng(int *a,int e)
{
//所乘数据不会超过int的最大值所以直接用int
    //两个数字相乘
    int t = 0;//同进位数字
    for(int i = 1; i&lt;=maxn/2; i++)
    {
        a[i] = a[i] * e + t;
        t = a[i] / 10;
        a[i] %= 10;
    }
}
//最后a[i]都发生改变变成相乘之后的值

int main()
{
    int n;
    cin >> n;
    a[1] = 1;
    for(int i = 1; i&lt;=n; i++)
    {
        cheng(a,i);
        pplus(a,c);//由于是求阶乘之和
    }
    bool flag = false;
    for(int i=maxn/2; i>=1; i--)
    {
        if(c[i]!=0)
            flag = true;
        if(flag)
            cout &lt;&lt; c[i]; //逆序输出
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>P1010 幂次方</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1010">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：在二次幂的运算中位移运算符和与运算符的时候可以很好加快运算的时间</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&gt;&gt; 位移运算符<br>由于位移运算符在计算的时候是计算的二进制数，所以运算速度十分的快，</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;bits/stdc++.h>
using namespace std;
string re(int x, int i = 0, string s = string("")) {
//右移，幂
	if(x==0)
		return string("0");
	do if(x&amp;1)//先对x是否为偶数或奇数进行判断
	{	
		s = (i==1 ? "2" : "2(" + re(i) + ")" ) + (s == "" ? "" : "+") + s;  	//递归老流氓，计算2次幂不方
	}while(++i,x>>=1);//计算二次幂的次数
	
	return s; 
} 
int main() {
    int x;
	cin>>x;
    cout&lt;&lt;re(x)&lt;&lt;endl;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date><![CDATA[2019-04-04 01:39:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-04 01:39:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e8%ae%ba%e4%b8%93%e9%a2%98%e5%ad%a6%e4%b9%a0%e4%bb%a5%e5%8f%8a%e9%a2%98%e9%9b%86%e6%95%b4%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9c91a60db5727b241d7c338527ad0ff2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>浪潮杯”第九届山东省ACM大学生程序设计竞赛重现赛</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/05/%e6%b5%aa%e6%bd%ae%e6%9d%af%e7%ac%ac%e4%b9%9d%e5%b1%8a%e5%b1%b1%e4%b8%9c%e7%9c%81acm%e5%a4%a7%e5%ad%a6%e7%94%9f%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e7%ab%9e%e8%b5%9b%e9%87%8d%e7%8e%b0/</link>
		<pubDate>Fri, 05 Apr 2019 09:29:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>A</td><td><a rel="noreferrer noopener" href="https://ac.nowcoder.com/acm/contest/123/A" target="_blank">Anagram</a><br></td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>题目大意：由一段文字变化到另一段文字所需要的最小步骤</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> anagram 释义：<br> 由颠倒字母顺序而构成的字</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;cstring>
#include &lt;string>
#include &lt;cstdio>
#include &lt;algorithm>
using namespace std;
int main() {
    string a, b;
    while(cin >> a >> b)
    {
        int len = a.length();
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
//按字母序对字符串进行排序
        int ans =0;//计算变次数
        int t = 0, end1 = len - 1;
        for(int i = 0; i &lt; len; i++) {
            if(a[t]&lt;=b[i]){
                ans += b[i] - a[t++];
            }
            else
            {
                ans += 26 -(a[end1--] - b[i]);
            }
        }
        cout &lt;&lt; ans &lt;&lt;endl;

    }

}
</code></pre>
<!-- /wp:code -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>C</td><td><a href="https://ac.nowcoder.com/acm/contest/123/C" target="_blank" rel="noreferrer noopener">Cities</a></td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>大意：每个城市都能到达，且建桥花费最小</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例如：有 a，b ，c三个城市 a可以到达b，b可以到达c，则a可以到达c</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意 ：例子1：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>//4<br> //1 2 3 4 = 1+2 + 1+3 + 1+4 = 12</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>找出建桥花费最小的城市</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;algorithm>
using namespace std;
typedef long long LL;
#define inf 0x3f3f3f3f
int main()
{
    LL min = inf;
    int t, x, n;
    cin >> t;
    while(t--)
    {
        cin >> n;
        LL sum = 0,minn=inf;
        for(int i=1; i&lt;= n; i++)
        {
            cin >> x;
            sum += x;
            if(x&lt;minn)
            {
                minn=x;
            }
        }
        if(n==1)
            cout &lt;&lt;  0 &lt;&lt; endl;
        else
        {
            sum += 1LL * (n-2) * minn;
            cout &lt;&lt; sum &lt;&lt; endl;
        }
    }
}
//2
//4
//1 2 3 4 = 1+2 + 1+3 + 1+4 = 12
//1
//1       = 0
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date><![CDATA[2019-04-05 09:29:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-05 09:29:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b5%aa%e6%bd%ae%e6%9d%af%e7%ac%ac%e4%b9%9d%e5%b1%8a%e5%b1%b1%e4%b8%9c%e7%9c%81acm%e5%a4%a7%e5%ad%a6%e7%94%9f%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e7%ab%9e%e8%b5%9b%e9%87%8d%e7%8e%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>《C++面向对象程序设计》第三章解题报告</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/09/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%89%e7%ab%a0%e8%a7%a3%e9%a2%98%e6%8a%a5%e5%91%8a/</link>
		<pubDate>Tue, 09 Apr 2019 11:38:50 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>

6-1&nbsp;表彰优秀学生（多态）&nbsp;（20&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>学期结束，班主任决定表彰一批学生，已知该班学生数在6至50人之间，有三类学生：普通生，特招运动员，学科专长生，其中学科专长生不超过5人。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>主函数根据输入的信息，相应建立GroupA, GroupB, GroupC类对象。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>GroupA类是普通生，有2门课程的成绩（均为不超过100的非负整数）；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>GroupB类是特招运动员，有2门课程的成绩（均为不超过100的非负整数），1次运动会的表现分，表现分有：A、B、C、D共4等。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>GroupC类是学科专长生，有5门课程的成绩（均为不超过100的非负整数）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>表彰人员至少符合以下3个条件中的一个：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（1）2门课程平均分在普通生和特招运动员中，名列第一者。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a.该平均分称为获奖线。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>b.存在成绩并列时，则全部表彰，例如某次考试有2人并列第1，则他们全部表彰。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（2）5门课程平均分达到或超过获奖线90%的学科专长生，给予表彰。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（3）2门课程平均分达到或超过获奖线70%的特招运动员，如果其运动会表现分为A，给予表彰。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入格式：每个测试用例占一行，第一项为类型，1为普通生，2为特招运动员，3为学科专长生, 输入0表示输入的结束。第二项是学号，第三项是姓名。对于普通生来说，共输入5项，第4、5项是课程成绩。对于特招运动员来说，共输入6项，第4、5项是课程成绩，第6项是运动会表现。对于学科专长生来说，共输入8项，第4、5、6、7、8项是课程成绩。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出时，打印要表彰的学生的学号和姓名。(输出顺序与要表彰学生的输入前后次序一致)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>以Student为基类，构建GroupA, GroupB和GroupC三个类
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include &lt;string>
using namespace std;

/* 请在这里填写答案 */

int main()
{
    const int Size=50;
    string num, name;
    int i,ty,s1,s2,s3,s4,s5;
    char gs;
    Student *pS[Size];
    int count=0;
    for(i=0;i&lt;Size;i++){
        cin>>ty;
        if(ty==0) break;
        cin>>num>>name>>s1>>s2;
        switch(ty){
             case 1:pS[count++]=new GroupA(num, name, s1, s2); break;
             case 2:cin>>gs; pS[count++]=new GroupB(num, name, s1,s2, gs); break;
             case 3:cin>>s3>>s4>>s5; pS[count++]=new GroupC(num, name, s1,s2,s3,s4,s5); break;
        }			
    }
    for(i=0;i&lt;count;i++) {
        pS[i]->display();
        delete pS[i];
    }
    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1 001 AAAA 96 80
2 009 BBB 82 75 A
1 007 CC 100 99
3 012 CCCC 97 95 90 99 93
1 003 DDD 62 50
1 022 ABCE 78 92
2 010 FFF 45 40 A
3 019 AAA 93 97 94 82 80
0
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>009 BBB
007 CC
012 CCCC</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

/* 请在这里填写答案 */

//输入1是a类学生，2是b类学生，类推
class Student
{
protected :
    string snum;
    string sname;
public:
    static double m;
    /*GroupA(string num,string name,int s1,int s2) {}
      GroupB(string num,string name,int s1,int s2,char gs) {}
      GroupC(string num,string name,int s1,int s2,int s3,int s4,int s5) {}*/
    Student(string num,string name)
    {
        sname = name;
        snum = num;

    };


    virtual void display()=0;
    virtual double Calculation()=0;
        /*表彰人员至少符合以下3个条件中的一个：
        （1）2门课程平均分在普通生和特招运动员中，名列第一者。
        a.该平均分称为获奖线。
        b.存在成绩并列时，则全部表彰，例如某次考试有2人并列第1，则他们全部表彰。
        （2）5门课程平均分达到或超过获奖线90%的学科专长生，给予表彰。
        （3）2门课程平均分达到或超过获奖线70%的特招运动员，如果其运动会表现分为A，给予表彰。*/

        //system,cout&lt;&lt;"error"&lt;&lt;endl;
};
double Student::m=0;
class GroupA: public Student
{

    int as1,as2;//a类普通学生有两门课的成绩
public:
    GroupA(string num,string name,int s1,int s2):Student(num,name)
{
        as1 = s1;
        as2 = s2;
if(Calculation()>Student::m){
    Student::m=Calculation();

}
    }
     virtual double Calculation()
    {
        return (as1+as2)/2;
    }
    virtual void display()
    {
        if(Calculation()==Student::m)
        {
            cout&lt;&lt;snum&lt;&lt;" "&lt;&lt;sname&lt;&lt;endl;
        }

    }
};
class GroupB:public Student
{

    int bs1,bs2;
    char bs3;//运动会的成绩
public:
    GroupB(string num,string name,int s1,int s2,char gs):Student(num,name)
    {
        bs1 = s1;
        bs2 = s2;
        bs3 = gs;
if(Calculation()>Student::m){
    Student::m=Calculation();

}
    }
        virtual double Calculation()
    {
        return (bs1+bs2)/2;
    }
    virtual void display()
    {
        if(Calculation()==Student::m)
        {
            cout&lt;&lt;snum&lt;&lt;" "&lt;&lt;sname&lt;&lt;endl;
        }
        else  if(Calculation()>=Student::m*0.7&amp;&amp;bs3=='A')
        {
            cout&lt;&lt;snum&lt;&lt;" "&lt;&lt;sname&lt;&lt;endl;
        }
    }

};
class GroupC:public Student
{

    int cs1,cs2,cs3,cs4,cs5;
public:
    GroupC(string num,string name,int s1,int s2,int s3,int s4,int s5):Student(num,name)
    {
        snum = num;
        sname = name;
        cs1 = s1;
        cs2 = s2;
        cs3 = s3;
        cs4 = s4;
        cs5 = s5;

    }
    virtual double Calculation()
    {
        return (cs1+cs2+cs3+cs4+cs5)/5;
    }
    virtual void display()
    {
        if(Calculation()>=Student::m*0.9)
        {
            cout&lt;&lt;snum&lt;&lt;" "&lt;&lt;sname&lt;&lt;endl;
        }

    }
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>

6-2&nbsp;狗的继承&nbsp;（10&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>完成两个类，一个类Animal，表示动物类，有一个成员表示年龄。一个类Dog，继承自Animal，有一个新的数据成员表示颜色，合理设计这两个类，使得测试程序可以运行并得到正确的结果。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>按照要求实现类</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/* 请在这里填写答案 */

int main(){
	Animal ani(5);
	cout&lt;&lt;"age of ani:"&lt;&lt;ani.getAge()&lt;&lt;endl;
	Dog dog(5,"black");
	cout&lt;&lt;"infor of dog:"&lt;&lt;endl;
	dog.showInfor();
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>无</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>age of ani:5
infor of dog:
age:5
color:black</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using std::string;
using namespace std;
class Animal {
		int age;
	public:

		Animal(int a) {
			age = a;

		}
		int getAge() {
			return age;
		}
};
class Dog {
		string color;
		int age;
	public:
		Dog ( int rage, string rcolor) : age(rage), color(rcolor) {
		}
		void showInfor() {
			cout &lt;&lt; "age:" &lt;&lt; age &lt;&lt; endl;
			cout &lt;&lt; "color:" &lt;&lt; color &lt;&lt; endl;
		}
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>

6-3&nbsp;写出派生类构造方法（C++）&nbsp;（5&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>裁判测试程序样例中展示的是一段定义基类<code>People</code>、派生类<code>Student</code>以及测试两个类的相关C++代码，其中缺失了部分代码，请补充完整，以保证测试程序正常运行。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>提示：
观察类的定义和main方法中的测试代码，补全缺失的代码。
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>注意：真正的测试程序中使用的数据可能与样例测试程序中不同，但仅按照样例中的格式调用相关函数。</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
class People{
private:
    string id;
    string name;
public:
    People(string id, string name){
        this->id = id;
        this->name = name;
    }
    string getId(){
        return this->id;
    }
    string getName(){
        return name;
    }
};
class Student : public People{
private:
    string sid;
    int score;
public:
    Student(string id, string name, string sid, int score)
		
		/** 你提交的代码将被嵌在这里（替换此行） **/
		
    }
    friend ostream&amp; operator &lt;&lt;(ostream &amp;o, Student &amp;s);
};
ostream&amp; operator &lt;&lt;(ostream &amp;o, Student &amp;s){
    o &lt;&lt; "(Name:" &lt;&lt; s.getName() &lt;&lt; "; id:"
      &lt;&lt; s.getId() &lt;&lt; "; sid:" &lt;&lt; s.sid
      &lt;&lt; "; score:" &lt;&lt; s.score &lt;&lt; ")";
    return o;
}
int main(){
    Student zs("370202X", "Zhang San", "1052102", 96);
    cout &lt;&lt; zs  &lt;&lt; endl;
    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>（无）
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>(Name:Zhang San; id:370202X; sid:1052102; score:96)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code> :People(id,  name){
    			/** 你提交的代码将被嵌在这里（替换此行） **/
		this->sid = sid;
		this->score = score;

		</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>

7-1&nbsp;我的支付宝和余额宝&nbsp;（12&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>支付宝AliPay和余额宝AliFund是一对好兄弟，他们来自同一个父类Account。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>已知类Account是支付宝AliPay和余额宝AliFund的虚基类，包括两个protected成员数据：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>long ID;//账号</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>string name;//用户名</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>支付宝AliPay是类Account的保护派生类，包括两个新增protected成员数据：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>double amount;//支付宝账户中的金额</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int out-limit;//支付宝转账上限，资金转出不得超出账户中金额也不能超出上限</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>//当转账要求超出上述限制时，自动转出最大允许金额</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>余额宝AliFund是类Account的保护派生类，包括三个新增protected成员数据：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>double amount;//余额宝账户中的金额</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>double rate;//余额宝账户中资金年利率</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int in-limit;//余额宝转账下限，资金转入余额宝时不得少于该下限，上不封顶</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>//当转入资金不足下限金额时，自动忽略该资金转入操作，资金退回</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>为了实现支付宝账户和余额宝账户间的资金收集和转账等功能，现以AliPay和AliFund为基类，创建一个淘宝账户类My_Ali，包括以下新增数据成员：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>bool auto_collect_flag;//资金自动收集标志</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int threshold;//资金自动收集阈值</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/<em>*/若资金自动收集标志为true，当用户支付宝账户金额超过资金自动收集阈值threshold时，超过且符合支付宝账户资金转出限制和余额宝资金转入下限的部分资金将自动转入余额宝中</em>/*/</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>增加合适的成员函数，可以实现支付宝账户和余额宝账户之间的资金转账和支付宝账户向余额宝账户的资金自动收集功能。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>生成以上各类并编写主函数，根据输入的初始账户信息，建立用户对象，根据用户的账户操作信息，输出用户最后的资金信息。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>测试输入包含一个测试用例:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第一行为初始账户信息，第一个数据是账号，第二个字符串是用户名，第三个数据是支付宝初始金额，第四个数据是支付宝转账上限，第五个数据是余额宝初始金额，第六个数据是余额宝资金年利率，第七个数据是余额宝转账下限，第八个数据是资金自动收集标志，字符Y代表设置资金自动收集，字符N代表不设置资金自动收集。若设置资金自动收集，第九个数据是资金自动收集阈值，否则，第九个数据不存在。 随后每一行代表用户资金账户的一次操作，第一个数字代表当前操作的账户类型，1代表支付宝账户，2代表余额宝账户，第二个数字代表具体操作，1代表账户资金增加，2代表账户金额减少，3代表支付宝和余额宝之间的资金转移，第三个数字代表操作金额。 最后输入0 0 0时结束。 注意：当设置资金自动收集为真时，支付宝账户资金每次增加时会自动触发资金自动收集。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入样例:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>100001 Zhangsan 1000 30000 50000 0.047 5000 Y 3000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 1 1500</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 2 500</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 3 500</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 1 7000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2 3 500</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>0 0 0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Account for Zhangsan</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Total: 59000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>AliPay: 3500</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>AliFund: 55500 with rate 4.7%</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include&lt;iomanip>
using namespace std;
class Account
{
  protected:
    long ID;
    string name;
    Account(){cin>>ID>>name;
    }
};
class AliPay:virtual protected Account
{
  protected:
    double amount;//支付宝账户中的金额
    int out_limit;//支付宝单次转账上限，单次资金转出不得超出账户中金额也不能超出上限
          //当转账要求超出上述限制时，自动转出最大允许金额
    AliPay(){cin>>amount>>out_limit;
    }
    void add(double&amp; pay);
    void sub(double&amp; pay);  
};
void AliPay::add(double&amp; pay)
{
  amount+=pay;
}
void AliPay::sub(double&amp; pay)
{
  if(pay>amount)
    pay=amount;
  if(pay>out_limit)
    pay=out_limit;
  amount-=pay;
}
class AliFund:virtual protected Account
{
  protected:
    double amount;//余额宝账户中的金额
    double rate;//余额宝账户中资金年利率
    int in_limit;//余额宝单次转账下限，单次资金转入余额宝时不得少于该下限，上不封顶
          //当转入资金不足下限金额时，自动忽略该资金转入操作，资金退回
  public:
    AliFund();
    void add(double&amp; pay);
    void sub(double&amp; pay);      
};
void AliFund::add(double&amp; pay)
{
  if(pay>=in_limit)
    amount+=pay;
} 
void AliFund::sub(double&amp; pay)
{
  if(pay>amount)
    pay=amount;
  amount-=pay;
}
AliFund::AliFund()
{
  cin>>amount>>rate>>in_limit;
}
class My_Ali:public AliPay,public AliFund
{
  bool auto_collect_flag;//资金自动收集标志
  int threshold; //资金自动收集阈值//若资金自动收集标志为true，当用户支付宝账户金额超过资金自动收集阈值threshold时，
          //超过且符合支付宝账户资金转出限制和余额宝资金转入下限的部分资金将自动转入余额宝中
  public:
    My_Ali();
    void payadd(double&amp; pay){  AliPay::add(pay);autodo(); 
    }
    void fundadd(double&amp; pay){  AliFund::add(pay);
    }
    void paysub(double&amp; pay){  AliPay::sub(pay);
    }
    void fundsub(double&amp; pay){  AliFund::sub(pay);
    }
    void paytofund(double&amp; pay);
    void fundtopay(double&amp; pay);
    void autodo();
    void out();
};
void My_Ali::out()
{
  cout&lt;&lt;"Account for "&lt;&lt;name&lt;&lt;endl&lt;&lt;"Total: "&lt;&lt;AliFund::amount+AliPay::amount&lt;&lt;endl;
  cout&lt;&lt;"AliPay: "&lt;&lt;AliPay::amount&lt;&lt;endl&lt;&lt;"AliFund: "&lt;&lt;AliFund::amount&lt;&lt;" with rate "&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(1)&lt;&lt;rate*100&lt;&lt;"%"&lt;&lt;dec&lt;&lt;endl; 
}
void My_Ali::paytofund(double&amp; pay)
{
  AliPay::sub(pay);
  if(pay>=AliFund::in_limit)
    AliFund::add(pay);
    else
      AliPay::add(pay);
}
void My_Ali::fundtopay(double&amp; pay)
{
  AliFund::sub(pay);
  AliPay::add(pay);
  autodo();
}
void My_Ali::autodo()
{
  double t=AliPay::amount-threshold;
  if(auto_collect_flag)
  {
      if(AliPay::amount>threshold)
        paytofund(t);
  }
}
My_Ali::My_Ali()
{
  char t;
  cin>>t;
  if(t=='Y')
  {
    cin>>threshold;
    auto_collect_flag=1;
  }else auto_collect_flag=0;
    
}
int main()
{
  int act,op;
  double money;
  My_Ali t;//t.out();
  cin>>op>>act>>money;
  while(act!=0&amp;&amp;op!=0&amp;&amp;money!=0)
  {
    if(op==1)
    {
      if(act==1) t.payadd(money);
      if(act==2) t.paysub(money);
      if(act==3) t.paytofund(money);
    }
    if(op==2)
    {
      if(act==1) t.fundadd(money);
      if(act==2) t.fundsub(money);
      if(act==3) t.fundtopay(money);
    }//t.out();
    cin>>op>>act>>money;
  }
  t.out();
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>

7-2&nbsp;期刊收费&nbsp;（10&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>邮局提供两种期刊的订阅：杂志和报纸。 给出下面基类的框架：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>class Periodical {</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>protected:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>string title; //名称</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>public:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>virtual void display()=0;//打印收费</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>以Periodical为基类，构建Magazine和Newspaper类。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>生成上述类并编写主函数，要求主函数中有一个基类Periodical指针数组，数组元素不超过10个。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Periodical *pp[10];</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>主函数根据输入的信息，相应建立Magazine, Newspaper类对象，对于Magazine给出订阅期数和每期价格，对于Newspaper给出订阅周数，每周出版次数和每份价格。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入格式：每个测试用例占一行，第一项为类型，1为Magazine，2为Newspaper，第二项是名称，第三项是单价，Magazine的第四项是期数，Newspaper的第四项是订阅周数，第五项是每周出版次数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出时，依次打印各期刊的名称和收费（小数点后保留一位）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 AAA 12.8 6</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 BB 15 3</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2 CCCC 2.1 16 3</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2 DD 0.7 55 7</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1 EEE 18 3</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>AAA 76.8</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>BB 45.0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CCCC 100.8</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>DD 269.5</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>EEE 54.0</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
class Periodical
{
protected:
    string title; //名称
    int mount;
    double price;
public:

    Periodical(string rtitle,int rmount,double rprice):title(rtitle),mount(rmount),price(rprice)
    {
    }
    virtual void display()=0;//打印收费
};

class Magazine:public Periodical
{
    //protected:
    //int mdata;订阅期数
    //double mprice;每期价格
public:
    Magazine(string name,int rmount,double rprice):Periodical(name,rmount,rprice) {}
    void display()
    {
        cout &lt;&lt; title &lt;&lt; " " ;
        printf("%.1f\n",mount*price);
    }
};
class Newspaper:public Periodical
{
protected:
    int weekcnt;
public:
    Newspaper(string name,int rmount,int rweekcnt,double rprice):Periodical(name,rmount,rprice),weekcnt(rweekcnt)
    {
    }
    void display()
    {
        cout &lt;&lt; title &lt;&lt; " " ;
        printf("%.1f\n",mount * price * weekcnt);
    }
};
int main()
{
    Periodical *pp[10];
    int flag;
    int data;
    string name;
    double price;
    int i=0;
    while( cin >> flag)
    {
        if(flag==1)
        {
            cin >> name >> price >> data;
            pp[i] = new Magazine( name, data, price);
            pp[i]->display();
        }
        else if(flag==2)
        {
            int weekcnt;
            cin >> name >> price >> weekcnt >> data;
            pp[i]=new Newspaper(name,data,weekcnt,price);
            pp[i]->display();
        }
        else
        {

            break;
        }
        i++;
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>

7-3&nbsp;动物世界&nbsp;（15&nbsp;分)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>补充程序 ：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1、实现Mammal类的方法</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2、由Mammal类派生出Dog类，在Dog类中增加itsColor成员(COLOR类型)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3、Dog类中增加以下方法：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>constructors: Dog()、Dog(int age)、Dog(int age, int weight)、Dog(int age, COLOR color)、 Dog(int age, int weight, COLOR color)、~Dog()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>accessors: GetColor()、SetColor()</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Other methods: WagTail()、BegForFood() ，并实现以上这些方法 。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>提示：类似Speak()、WagTail()这些动作，函数体可以是输出一句话。比如：Mammal is spaeking... , The Dog is Wagging its tail...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4、补充主函数的问号部分，并运行程序，检查输出是否合理。</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>enum COLOR{ WHITE, RED, BROWN, BLACK, KHAKI };

class Mammal
{
	public:
		//constructors
		Mammal();
		Mammal(int age);
		~Mammal();
		
		//accessors
		int GetAge() const;
		void SetAge(int);
		int GetWeight() const;
		void SetWeight(int);
		
		//Other methods	
		void Speak() const;
		void Sleep() const;		
	protected:
		int itsAge;
		int itsWeight;
};

int main()
{
	Dog Fido;
	Dog Rover(5);
	Dog Buster(6, 8);
	Dog Yorkie(3, RED);
	Dog Dobbie(4, 20, KHAKI);
	Fido.Speak();
	Rover.WagTail();
	cout &lt;&lt; "Yorkie is " &lt;&lt; ?? &lt;&lt; " years old." &lt;&lt; endl;
	cout &lt;&lt; "Dobbie	weighs " &lt;&lt; ?? &lt;&lt; " pounds." &lt;&lt; endl;   
	return 0;
}

</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>无</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>按照程序格式输出。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出一组输入。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>无
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例:</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出相应的输出。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Mammal is speaking...
The dog is wagging its tail...
Yorkie is 3 years old.
Dobbie weighs 20 pounds.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：测试点只有一个可以直接php过（照理来说上一题也可以但我还是认真写了2333</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date><![CDATA[2019-04-09 11:38:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-09 11:38:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e4%b8%89%e7%ab%a0%e8%a7%a3%e9%a2%98%e6%8a%a5%e5%91%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1006 传纸条(动态规划dp）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/11/p1006-%e4%bc%a0%e7%ba%b8%e6%9d%a1%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92dp%ef%bc%89/</link>
		<pubDate>Thu, 11 Apr 2019 01:09:50 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=530</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1006">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size">小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个mmm行nnn列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标(1,1(1,1(1,1)，小轩坐在矩阵的右下角，坐标(m,n)(m,n)(m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size">在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size">还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用000表示），可以用一个0−1000-1000−100的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这222条路径上同学的好心程度之和最大。现在，请你帮助小渊和小轩找到这样的222条路径。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入文件，第一行有222个用空格隔开的整数mmm和nnn，表示班里有mmm行nnn列。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来的mmm行是一个m×nm \times nm×n的矩阵，矩阵中第iii行jjj列的整数表示坐在第iii行jjj列的学生的好心程度。每行的nnn个整数之间用空格隔开。<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出文件共一行，包含一个整数，表示来回222条路上参与传递纸条的学生的好心程度之和的最大值。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">3 3
0 3 9
2 8 5
5 7 0
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">34</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>【限制】</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>30%的数据满足：1≤m,n≤101 \le m,n \le 101≤m,n≤10</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>100%的数据满足：1≤m,n≤501 \le m,n \le 501≤m,n≤50</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解： 这是一个典型的动态规划的题目，你每一个位置所取的最大值都来源于你前几步所取得的值，通过规律找出相应的动态方程，进行求解</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第一步是先将题目所说模型化简</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>例：先随意画一个n行m列的方格</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":531} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411084657.png" alt="" class="wp-image-531"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>即纸条是从（i，j）点传到（k，l）点</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（要注意一个点我们的纸条并不是传到（k，l）点就停止了，传出还要传回）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>假设是处于（x，y )</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":532} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190411085249.png" alt="" class="wp-image-532"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>那么你这一步的值是取决于（x-1,y)或者取决于（x , y-1 ) </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>为了减少复杂度以及内存所以我们运用四维数组进行计算，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>即 fmax{ dp[i][j][k][l] } = max{ dp[i-1][j][k-1][l] ,dp[i-1][j][k][l-1],dp[i][j-1][k-1][l],dp[i][j-1][k][l-1]} + vis[i][j] +vis[k][l];</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可能你会疑问为什么i与j在变化的同时k或l也需要减1呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>是因为从（i ， j）到 （k ，l）点的步数实际上是与（k，l）到（i，j）的步数是相同的所以同步进行的 即  i + j == k + l</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 为什么要加上  + vis[i][j] +vis[k][l]; 这个呢，这个实际上就是你传纸条人的友好度，为什么可以直接加上呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>因为dp【i】【j】【k】【l】左边这个东西告诉我们，我们已经走到这个位置了，所以就求这个位置的东西（i , j ) ( k , l )</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>为什么l的循环从j+1开始呢？ 因为两条路径经过同一个点的价值只能算一次，所以如果当前i==j（相当于两个人的位置重合了） </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>四维数组的解答如下：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
using namespace std;
int dp[56][56][56][56];
int vis[60][60];
int main() {
	int n, m;
	cin >> n >> m;
	for(int i = 1; i &lt;= n; i++) {
		for(int j = 1; j &lt;= m; j++) {
			cin >> vis[i][j];
		}
	}
	for(int i = 1; i &lt;= n; ++i) {
		for(int j = 1; j &lt;= m; ++j) {
			for(int k = 1; k &lt;= n; ++k) {
				for(int l = j+1; l &lt;= m; ++l) {
					dp[i][j][k][l] = max( max( dp[i-1][j][k-1][l], dp[i-1][j][k][l-1]), max( dp[i][j-1][k-1][l], dp[i][j-1][k][l-1])) + vis[i][j] + vis[k][l];
				}
			}
		}
	}
	cout &lt;&lt; dp[n][m-1][n-1][m] &lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>三维数组优化</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：上面有提到过去和回所走的步数是相同的，所以可以得到i+j==k+l这一个的等式，那么我们不妨通过枚举减少for循环和数组的大小，毕竟如果卡了数据就会造成wa</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>动态方程：</p><p><code>dp[k][i][j] = _( dp[k-1][i][j], dp[k-1][i-1][j-1], dp[k-1][i][j-1],dp[k-1][i-1][j]) + a[i][k-i+1] + a[j][k-j+1];</code></p><cite>_是自己定义的四个数字取最大值的函数<br></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>枚举每个横坐标进行计算</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>for(int k = 1; k &lt;= n+m-1; ++k)</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>当i==j时说明路径出现了重复所以减去一个就可以</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>if(i==j){<br>                    dp[k][i][j] -=a[i][k-i+1];<br>                 }</p><cite><br></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>if (k-i+1&lt;1||k-j+1&lt;1)<br>                     continue;</p><cite>当路径超过真实经过的范围时需要跳过本次循环</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>代码：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//三维数组优化p1006
#include &lt;bits/stdc++.h>
using namespace std;
#define N 65
int a[N][N];
int dp[N*2][N][N];
int _(int a, int b, int c, int d)
{
    return max( max(a,b), max(c,d));
}
int main()
{
    int n, m;
    cin >> n >> m;
    for(int i = 1; i &lt;= n; ++i)
        for(int j = 1; j &lt;= m; ++j)
            cin >> a[i][j];
    for(int k = 1; k &lt;= n+m-1; ++k)
    {
        for(int i = 1; i &lt;= n; ++i)
        {
            for(int j = 1; j &lt;= n; ++j)
            {
                if (k-i+1&lt;1||k-j+1&lt;1)
                    continue;
                dp[k][i][j] = _( dp[k-1][i][j], dp[k-1][i-1][j-1], dp[k-1][i][j-1],dp[k-1][i-1][j]) + a[i][k-i+1] + a[j][k-j+1];
                if(i==j){
                   dp[k][i][j] -=a[i][k-i+1];
                }
            }
        }
    }
    cout &lt;&lt; dp[n+m-1][n][n] &lt;&lt; endl;

}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>滚动数组优化：（来日补齐）</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 01:09:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 01:09:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1006-%e4%bc%a0%e7%ba%b8%e6%9d%a1%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92dp%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[532]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P2141 珠心算测验（枚举，暴力，数组的运用）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/16/p2141-%e7%8f%a0%e5%bf%83%e7%ae%97%e6%b5%8b%e9%aa%8c%ef%bc%88%e6%9e%9a%e4%b8%be%ef%bc%8c%e6%9a%b4%e5%8a%9b%ef%bc%8c%e6%95%b0%e7%bb%84%e7%9a%84%e8%bf%90%e7%94%a8%ef%bc%89/</link>
		<pubDate>Tue, 16 Apr 2019 12:16:03 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=547</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P2141">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解释：该题的解题思路蛮有意思的所以先mark了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ac代码</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
int a[110];
int t[20010];
int g[20010];
int main(){
    int n;
    cin >> n;
    for(int i = 0; i &lt; n; i++) {
            cin >> a[i];
            g[a[i]]++;
    }
    for(int i = 0; i &lt; n; i++) {
        for(int j = i+1; j &lt; n; j++){
            t[a[i]+a[j]]++;
        }
    }
    int ans = 0;
    for(int i = 0; i &lt; 20010; i++){
        if(t[i]>0&amp;&amp;g[i]){
            ans++;
        }
    }
    cout &lt;&lt; ans &lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date><![CDATA[2019-04-16 12:16:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-16 12:16:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p2141-%e7%8f%a0%e5%bf%83%e7%ae%97%e6%b5%8b%e9%aa%8c%ef%bc%88%e6%9e%9a%e4%b8%be%ef%bc%8c%e6%9a%b4%e5%8a%9b%ef%bc%8c%e6%95%b0%e7%bb%84%e7%9a%84%e8%bf%90%e7%94%a8%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>xiaodao的模板</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/25/xiaodao%e7%9a%84%e6%a8%a1%e6%9d%bf/</link>
		<pubDate>Thu, 25 Apr 2019 01:30:32 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=557</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code"><code>#pragma comment(linker, "/STACK:36777216")
//#pragma GCC optimize ("O2")
#define LOCAL
#include &lt;functional>
#include &lt;algorithm>
#include &lt;iostream>
#include &lt;fstream>
#include &lt;sstream>
#include &lt;iomanip>
#include &lt;numeric>
#include &lt;cstring>
#include &lt;climits>
#include &lt;cassert>
#include &lt;complex>
#include &lt;cstdio>
#include &lt;string>
#include &lt;vector>
#include &lt;bitset>
#include &lt;queue>
#include &lt;stack>
#include &lt;cmath>
#include &lt;ctime>
#include &lt;list>
#include &lt;set>
#include &lt;map>

//#include &lt;tr1/unordered_set>
//#include &lt;tr1/unordered_map>
//#include &lt;array>

using namespace std;

#define REP(i, n) for (int i=0;i&lt;n;++i)
#define FOR(i, a, b) for (int i=a;i&lt;b;++i)
#define DWN(i, b, a) for (int i=b-1;i>=a;--i)
#define REP_1(i, n) for (int i=1;i&lt;=n;++i)
#define FOR_1(i, a, b) for (int i=a;i&lt;=b;++i)
#define DWN_1(i, b, a) for (int i=b;i>=a;--i)
#define REP_C(i, n) for (int n____=n,i=0;i&lt;n____;++i)
#define FOR_C(i, a, b) for (int b____=b,i=a;i&lt;b____;++i)
#define DWN_C(i, b, a) for (int a____=a,i=b-1;i>=a____;--i)
#define REP_N(i, n) for (i=0;i&lt;n;++i)
#define FOR_N(i, a, b) for (i=a;i&lt;b;++i)
#define DWN_N(i, b, a) for (i=b-1;i>=a;--i)
#define REP_1_C(i, n) for (int n____=n,i=1;i&lt;=n____;++i)
#define FOR_1_C(i, a, b) for (int b____=b,i=a;i&lt;=b____;++i)
#define DWN_1_C(i, b, a) for (int a____=a,i=b;i>=a____;--i)
#define REP_1_N(i, n) for (i=1;i&lt;=n;++i)
#define FOR_1_N(i, a, b) for (i=a;i&lt;=b;++i)
#define DWN_1_N(i, b, a) for (i=b;i>=a;--i)
#define REP_C_N(i, n) for (int n____=(i=0,n);i&lt;n____;++i)
#define FOR_C_N(i, a, b) for (int b____=(i=0,b);i&lt;b____;++i)
#define DWN_C_N(i, b, a) for (int a____=(i=b-1,a);i>=a____;--i)
#define REP_1_C_N(i, n) for (int n____=(i=1,n);i&lt;=n____;++i)
#define FOR_1_C_N(i, a, b) for (int b____=(i=a,b);i&lt;=b____;++i)
#define DWN_1_C_N(i, b, a) for (int a____=(i=b,a);i>=a____;--i)

#define ECH(it, A) for (__typeof((A).begin()) it=(A).begin(); it != (A).end(); ++it)
#define rECH(it, A) for (__typeof((A).rbegin()) it=(A).rbegin(); it != (A).rend(); ++it)
#define REP_S(i, str) for (char*i=str;*i;++i)
#define REP_L(i, hd, suc) for (int i=hd;i;i=suc[i])
#define REP_G(i, u) REP_L(i,hd[u],suc)
#define REP_SS(x, s) for (int x=s;x;x=(x-1)&amp;s)
#define DO(n) for ( int ____n = n; ____n-->0; )
#define REP_2(i, j, n, m) REP(i, n) REP(j, m)
#define REP_2_1(i, j, n, m) REP_1(i, n) REP_1(j, m)
#define REP_3(i, j, k, n, m, l) REP(i, n) REP(j, m) REP(k, l)
#define REP_3_1(i, j, k, n, m, l) REP_1(i, n) REP_1(j, m) REP_1(k, l)
#define REP_4(i, j, k, ii, n, m, l, nn) REP(i, n) REP(j, m) REP(k, l) REP(ii, nn)
#define REP_4_1(i, j, k, ii, n, m, l, nn) REP_1(i, n) REP_1(j, m) REP_1(k, l) REP_1(ii, nn)

#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
#define CPY(A, B) memcpy(A, B, sizeof(A))
#define INS(A, P, B) A.insert(A.begin() + P, B)
#define ERS(A, P) A.erase(A.begin() + P)
#define LBD(A, x) (lower_bound(ALL(A), x) - A.begin())
#define UBD(A, x) (upper_bound(ALL(A), x) - A.begin())
#define CTN(T, x) (T.find(x) != T.end())
#define SZ(A) int((A).size())
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define PTT pair&lt;T, T>
#define Ts *this
#define rTs return Ts
#define fi first
#define se second
#define re real()
#define im imag()

#define Rush for(int ____T=RD(); ____T--;)
#define Display(A, n, m) {                      \
REP(i, n){		                            \
REP(j, m-1) cout &lt;&lt; A[i][j] &lt;&lt; " ";     \
cout &lt;&lt; A[i][m-1] &lt;&lt; endl;		        \
}						                    \
}
#define Display_1(A, n, m) {                    \
REP_1(i, n){		                        \
REP_1(j, m-1) cout &lt;&lt; A[i][j] &lt;&lt; " ";   \
cout &lt;&lt; A[i][m] &lt;&lt; endl;		        \
}						                    \
}

typedef long long LL;
//typedef long double DB;
typedef double DB;
typedef unsigned uint;
typedef unsigned long long uLL;

typedef vector&lt;int> VI;
typedef vector&lt;char> VC;
typedef vector&lt;string> VS;
typedef vector&lt;LL> VL;
typedef vector&lt;DB> VF;
typedef set&lt;int> SI;
typedef set&lt;string> SS;
typedef map&lt;int, int> MII;
typedef map&lt;string, int> MSI;
typedef pair&lt;int, int> PII;
typedef pair&lt;LL, LL> PLL;
typedef vector&lt;PII> VII;
typedef vector&lt;VI> VVI;
typedef vector&lt;VII> VVII;

template&lt;class T> inline T&amp; RD(T &amp;);
template&lt;class T> inline void OT(const T &amp;);
//inline int RD(){int x; return RD(x);}
inline LL RD(){LL x; return RD(x);}
inline DB&amp; RF(DB &amp;);
inline DB RF(){DB x; return RF(x);}
inline char* RS(char *s);
inline char&amp; RC(char &amp;c);
inline char RC();
inline char&amp; RC(char &amp;c){scanf(" %c", &amp;c); return c;}
inline char RC(){char c; return RC(c);}
//inline char&amp; RC(char &amp;c){c = getchar(); return c;}
//inline char RC(){return getchar();}

template&lt;class T> inline T&amp; RDD(T &amp;);
inline LL RDD(){LL x; return RDD(x);}

template&lt;class T0, class T1> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1){RD(x0), RD(x1); return x0;}
template&lt;class T0, class T1, class T2> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1, T2 &amp;x2){RD(x0), RD(x1), RD(x2); return x0;}
template&lt;class T0, class T1, class T2, class T3> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1, T2 &amp;x2, T3 &amp;x3){RD(x0), RD(x1), RD(x2), RD(x3); return x0;}
template&lt;class T0, class T1, class T2, class T3, class T4> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1, T2 &amp;x2, T3 &amp;x3, T4 &amp;x4){RD(x0), RD(x1), RD(x2), RD(x3), RD(x4); return x0;}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1, T2 &amp;x2, T3 &amp;x3, T4 &amp;x4, T5 &amp;x5){RD(x0), RD(x1), RD(x2), RD(x3), RD(x4), RD(x5); return x0;}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline T0&amp; RD(T0 &amp;x0, T1 &amp;x1, T2 &amp;x2, T3 &amp;x3, T4 &amp;x4, T5 &amp;x5, T6 &amp;x6){RD(x0), RD(x1), RD(x2), RD(x3), RD(x4), RD(x5), RD(x6); return x0;}
template&lt;class T0, class T1> inline void OT(const T0 &amp;x0, const T1 &amp;x1){OT(x0), OT(x1);}
template&lt;class T0, class T1, class T2> inline void OT(const T0 &amp;x0, const T1 &amp;x1, const T2 &amp;x2){OT(x0), OT(x1), OT(x2);}
template&lt;class T0, class T1, class T2, class T3> inline void OT(const T0 &amp;x0, const T1 &amp;x1, const T2 &amp;x2, const T3 &amp;x3){OT(x0), OT(x1), OT(x2), OT(x3);}
template&lt;class T0, class T1, class T2, class T3, class T4> inline void OT(const T0 &amp;x0, const T1 &amp;x1, const T2 &amp;x2, const T3 &amp;x3, const T4 &amp;x4){OT(x0), OT(x1), OT(x2), OT(x3), OT(x4);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5> inline void OT(const T0 &amp;x0, const T1 &amp;x1, const T2 &amp;x2, const T3 &amp;x3, const T4 &amp;x4, const T5 &amp;x5){OT(x0), OT(x1), OT(x2), OT(x3), OT(x4), OT(x5);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline void OT(const T0 &amp;x0, const T1 &amp;x1, const T2 &amp;x2, const T3 &amp;x3, const T4 &amp;x4, const T5 &amp;x5, const T6 &amp;x6){OT(x0), OT(x1), OT(x2), OT(x3), OT(x4), OT(x5), OT(x6);}
inline char&amp; RC(char &amp;a, char &amp;b){RC(a), RC(b); return a;}
inline char&amp; RC(char &amp;a, char &amp;b, char &amp;c){RC(a), RC(b), RC(c); return a;}
inline char&amp; RC(char &amp;a, char &amp;b, char &amp;c, char &amp;d){RC(a), RC(b), RC(c), RC(d); return a;}
inline char&amp; RC(char &amp;a, char &amp;b, char &amp;c, char &amp;d, char &amp;e){RC(a), RC(b), RC(c), RC(d), RC(e); return a;}
inline char&amp; RC(char &amp;a, char &amp;b, char &amp;c, char &amp;d, char &amp;e, char &amp;f){RC(a), RC(b), RC(c), RC(d), RC(e), RC(f); return a;}
inline char&amp; RC(char &amp;a, char &amp;b, char &amp;c, char &amp;d, char &amp;e, char &amp;f, char &amp;g){RC(a), RC(b), RC(c), RC(d), RC(e), RC(f), RC(g); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b){RF(a), RF(b); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b, DB &amp;c){RF(a), RF(b), RF(c); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b, DB &amp;c, DB &amp;d){RF(a), RF(b), RF(c), RF(d); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b, DB &amp;c, DB &amp;d, DB &amp;e){RF(a), RF(b), RF(c), RF(d), RF(e); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b, DB &amp;c, DB &amp;d, DB &amp;e, DB &amp;f){RF(a), RF(b), RF(c), RF(d), RF(e), RF(f); return a;}
inline DB&amp; RF(DB &amp;a, DB &amp;b, DB &amp;c, DB &amp;d, DB &amp;e, DB &amp;f, DB &amp;g){RF(a), RF(b), RF(c), RF(d), RF(e), RF(f), RF(g); return a;}
inline void RS(char *s1, char *s2){RS(s1), RS(s2);}
inline void RS(char *s1, char *s2, char *s3){RS(s1), RS(s2), RS(s3);}
template&lt;class T0,class T1>inline T0&amp; RDD(T0&amp;a, T1&amp;b){RDD(a),RDD(b); return a;}
template&lt;class T0,class T1,class T2>inline T1&amp; RDD(T0&amp;a, T1&amp;b, T2&amp;c){RDD(a),RDD(b),RDD(c); return a;}

template&lt;class T> inline void RST(T &amp;A){memset(A, 0, sizeof(A));}
template&lt;class T> inline void FLC(T &amp;A, int x){memset(A, x, sizeof(A));}
template&lt;class T> inline void CLR(T &amp;A){A.clear();}

template&lt;class T0, class T1> inline void RST(T0 &amp;A0, T1 &amp;A1){RST(A0), RST(A1);}
template&lt;class T0, class T1, class T2> inline void RST(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2){RST(A0), RST(A1), RST(A2);}
template&lt;class T0, class T1, class T2, class T3> inline void RST(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3){RST(A0), RST(A1), RST(A2), RST(A3);}
template&lt;class T0, class T1, class T2, class T3, class T4> inline void RST(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4){RST(A0), RST(A1), RST(A2), RST(A3), RST(A4);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5> inline void RST(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5){RST(A0), RST(A1), RST(A2), RST(A3), RST(A4), RST(A5);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline void RST(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5, T6 &amp;A6){RST(A0), RST(A1), RST(A2), RST(A3), RST(A4), RST(A5), RST(A6);}
template&lt;class T0, class T1> inline void FLC(T0 &amp;A0, T1 &amp;A1, int x){FLC(A0, x), FLC(A1, x);}
template&lt;class T0, class T1, class T2> inline void FLC(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, int x){FLC(A0, x), FLC(A1, x), FLC(A2, x);}
template&lt;class T0, class T1, class T2, class T3> inline void FLC(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, int x){FLC(A0, x), FLC(A1, x), FLC(A2, x), FLC(A3, x);}
template&lt;class T0, class T1, class T2, class T3, class T4> inline void FLC(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, int x){FLC(A0, x), FLC(A1, x), FLC(A2, x), FLC(A3, x), FLC(A4, x);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5> inline void FLC(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5, int x){FLC(A0, x), FLC(A1, x), FLC(A2, x), FLC(A3, x), FLC(A4, x), FLC(A5, x);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline void FLC(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5, T6 &amp;A6, int x){FLC(A0, x), FLC(A1, x), FLC(A2, x), FLC(A3, x), FLC(A4, x), FLC(A5, x), FLC(A6, x);}
template&lt;class T> inline void CLR(priority_queue&lt;T, vector&lt;T>, less&lt;T> > &amp;Q){while (!Q.empty()) Q.pop();}
template&lt;class T> inline void CLR(priority_queue&lt;T, vector&lt;T>, greater&lt;T> > &amp;Q){while (!Q.empty()) Q.pop();}
template&lt;class T> inline void CLR(stack&lt;T> &amp;S){while (!S.empty()) S.pop();}
template&lt;class T> inline void CLR(queue&lt;T> &amp;Q){while (!Q.empty()) Q.pop();}

template&lt;class T0, class T1> inline void CLR(T0 &amp;A0, T1 &amp;A1){CLR(A0), CLR(A1);}
template&lt;class T0, class T1, class T2> inline void CLR(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2){CLR(A0), CLR(A1), CLR(A2);}
template&lt;class T0, class T1, class T2, class T3> inline void CLR(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3){CLR(A0), CLR(A1), CLR(A2), CLR(A3);}
template&lt;class T0, class T1, class T2, class T3, class T4> inline void CLR(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4){CLR(A0), CLR(A1), CLR(A2), CLR(A3), CLR(A4);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5> inline void CLR(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5){CLR(A0), CLR(A1), CLR(A2), CLR(A3), CLR(A4), CLR(A5);}
template&lt;class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline void CLR(T0 &amp;A0, T1 &amp;A1, T2 &amp;A2, T3 &amp;A3, T4 &amp;A4, T5 &amp;A5, T6 &amp;A6){CLR(A0), CLR(A1), CLR(A2), CLR(A3), CLR(A4), CLR(A5), CLR(A6);}
template&lt;class T> inline void CLR(T &amp;A, int n){REP(i, n) CLR(A[i]);}

template&lt;class T> inline bool EPT(T &amp;a){return a.empty();}
template&lt;class T> inline T&amp; SRT(T &amp;A){sort(ALL(A)); return A;}
template&lt;class T, class C> inline T&amp; SRT(T &amp;A, C cmp){sort(ALL(A), cmp); return A;}
template&lt;class T> inline T&amp; RVS(T &amp;A){reverse(ALL(A)); return A;}
template&lt;class T> inline T&amp; UNQQ(T &amp;A){A.resize(unique(ALL(A))-A.begin());return A;}
template&lt;class T> inline T&amp; UNQ(T &amp;A){SRT(A);return UNQQ(A);}
template&lt;class T, class C> inline T&amp; UNQ(T &amp;A, C cmp){SRT(A, cmp);return UNQQ(A);}


//}

/** Constant List .. **/ //{

const int MOD = int(1e9) + 7;
const int INF = 0x3f3f3f3f;
const LL INFF = 0x3f3f3f3f3f3f3f3fLL;
const DB EPS = 1e-9;
const DB OO = 1e20;
const DB PI = acos(-1.0); //M_PI;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

//}

/** Add On .. **/ //{
// &lt;&lt;= '0. Nichi Joo ., //{

template&lt;class T> inline bool checkMin(T &amp;a,const T b){return b &lt; a ? a = b, 1 : 0;}
template&lt;class T> inline bool checkMax(T &amp;a,const T b){return a &lt; b ? a = b, 1 : 0;}
template &lt;class T, class C> inline bool checkUpd(T&amp; a, const T b, C c){return c(b,a) ? a = b, 1 : 0;}
template&lt;class T> inline T min(T a, T b, T c){return min(min(a, b), c);}
template&lt;class T> inline T max(T a, T b, T c){return max(max(a, b), c);}
template&lt;class T> inline T min(T a, T b, T c, T d){return min(min(a, b), min(c, d));}
template&lt;class T> inline T max(T a, T b, T c, T d){return max(max(a, b), max(c, d));}
template&lt;class T> inline T min(T a, T b, T c, T d, T e){return min(min(min(a,b),min(c,d)),e);}
template&lt;class T> inline T max(T a, T b, T c, T d, T e){return max(max(max(a,b),max(c,d)),e);}
template&lt;class T> inline T sqr(T a){return a*a;}
template&lt;class T> inline T cub(T a){return a*a*a;}
template&lt;class T> inline T ceil(T x, T y){return (x - 1) / y + 1;}
template&lt;class T> T abs(T x){return x>0?x:-x;}
inline int sgn(DB x){return x &lt; -EPS ? -1 : x > EPS;}
inline int sgn(DB x, DB y){return sgn(x - y);}

inline DB cos(DB a, DB b, DB c){return (sqr(a)+sqr(b)-sqr(c))/(2*a*b);}
inline DB cot(DB x){return 1./tan(x);};
inline DB sec(DB x){return 1./cos(x);};
inline DB csc(DB x){return 1./sin(x);};

//}
// &lt;&lt;= '1. Bitwise Operation ., //{
namespace BO{
    
    inline bool _1(int x, int i){return bool(x&amp;1&lt;&lt;i);}
    inline bool _1(LL x, int i){return bool(x&amp;1LL&lt;&lt;i);}
    inline LL _1(int i){return 1LL&lt;&lt;i;}
    inline LL _U(int i){return _1(i) - 1;};
    
    inline int reverse_bits(int x){
        x = ((x >> 1) &amp; 0x55555555) | ((x &lt;&lt; 1) &amp; 0xaaaaaaaa);
        x = ((x >> 2) &amp; 0x33333333) | ((x &lt;&lt; 2) &amp; 0xcccccccc);
        x = ((x >> 4) &amp; 0x0f0f0f0f) | ((x &lt;&lt; 4) &amp; 0xf0f0f0f0);
        x = ((x >> 8) &amp; 0x00ff00ff) | ((x &lt;&lt; 8) &amp; 0xff00ff00);
        x = ((x >>16) &amp; 0x0000ffff) | ((x &lt;&lt;16) &amp; 0xffff0000);
        return x;
    }
    
    inline LL reverse_bits(LL x){
        x = ((x >> 1) &amp; 0x5555555555555555LL) | ((x &lt;&lt; 1) &amp; 0xaaaaaaaaaaaaaaaaLL);
        x = ((x >> 2) &amp; 0x3333333333333333LL) | ((x &lt;&lt; 2) &amp; 0xccccccccccccccccLL);
        x = ((x >> 4) &amp; 0x0f0f0f0f0f0f0f0fLL) | ((x &lt;&lt; 4) &amp; 0xf0f0f0f0f0f0f0f0LL);
        x = ((x >> 8) &amp; 0x00ff00ff00ff00ffLL) | ((x &lt;&lt; 8) &amp; 0xff00ff00ff00ff00LL);
        x = ((x >>16) &amp; 0x0000ffff0000ffffLL) | ((x &lt;&lt;16) &amp; 0xffff0000ffff0000LL);
        x = ((x >>32) &amp; 0x00000000ffffffffLL) | ((x &lt;&lt;32) &amp; 0xffffffff00000000LL);
        return x;
    }
    
    template&lt;class T> inline bool odd(T x){return x&1;}
    template&lt;class T> inline bool even(T x){return !odd(x);}
    template&lt;class T> inline T low_bit(T x) {return x &amp; -x;}
    template&lt;class T> inline T high_bit(T x) {T p = low_bit(x);while (p != x) x -= p, p = low_bit(x);return p;}
    template&lt;class T> inline T cover_bit(T x){T p = 1; while (p &lt; x) p &lt;&lt;= 1;return p;}
    template&lt;class T> inline int cover_idx(T x){int p = 0; while (_1(p) &lt; x ) ++p; return p;}
    
    inline int clz(int x){return __builtin_clz(x);}
    inline int clz(LL x){return __builtin_clzll(x);}
    inline int ctz(int x){return __builtin_ctz(x);}
    inline int ctz(LL x){return __builtin_ctzll(x);}
    inline int lg2(int x){return !x ? -1 : 31 - clz(x);}
    inline int lg2(LL x){return !x ? -1 : 63 - clz(x);}
    inline int low_idx(int x){return !x ? -1 : ctz(x);}
    inline int low_idx(LL x){return !x ? -1 : ctz(x);}
    inline int high_idx(int x){return lg2(x);}
    inline int high_idx(LL x){return lg2(x);}
    inline int parity(int x){return __builtin_parity(x);}
    inline int parity(LL x){return __builtin_parityll(x);}
    inline int count_bits(int x){return __builtin_popcount(x);}
    inline int count_bits(LL x){return __builtin_popcountll(x);}
    
} using namespace BO;//}


// &lt;&lt;= '2. Number Theory .,//{
namespace NT{
#define gcd __gcd
    inline LL lcm(LL a, LL b){return a*b/gcd(a,b);}
    
    inline void INC(int &amp;a, int b){a += b; if (a >= MOD) a -= MOD;}
    inline int sum(int a, int b){a += b; if (a >= MOD) a -= MOD; return a;}
    
    /* 模数两倍刚好超 int 时。
     inline int sum(uint a, int b){a += b; a %= MOD;if (a &lt; 0) a += MOD; return a;}
     inline void INC(int &amp;a, int b){a = sum(a, b);}
     */
    
    inline void DEC(int &amp;a, int b){a -= b; if (a &lt; 0) a += MOD;}
    inline int dff(int a, int b){a -= b; if (a &lt; 0) a  += MOD; return a;}
    inline void MUL(int &amp;a, int b){a = (LL)a * b % MOD;}
    //inline int pdt(int a, int b){return (LL)a * b % MOD;}
    inline int pdt(int x,int y) {
        int ret; __asm__ __volatile__ ("\tmull %%ebx\n\tdivl %%ecx\n":"=d"(ret):"a"(x),"b"(y),"c"(MOD));
        return ret;
    }
    
    
    inline int gcd(int m, int n, int &amp;x, int &amp;y){
        
        x = 1, y = 0; int xx = 0, yy = 1, q;
        
        while (1){
            q = m / n, m %= n;
            if (!m){x = xx, y = yy; return n;}
            DEC(x, pdt(q, xx)), DEC(y, pdt(q, yy));
            q = n / m, n %= m;
            if (!n) return m;
            DEC(xx, pdt(q, x)), DEC(yy, pdt(q, y));
        }
    }
    
    inline int sum(int a, int b, int c){return sum(a, sum(b, c));}
    inline int sum(int a, int b, int c, int d){return sum(sum(a, b), sum(c, d));}
    inline int pdt(int a, int b, int c){return pdt(a, pdt(b, c));}
    inline int pdt(int a, int b, int c, int d){return pdt(pdt(a, b), pdt(c, d));}
    
    inline int pow(int a, LL b){
        int c(1); while (b){
            if (b&amp;1) MUL(c, a);
            MUL(a, a), b >>= 1;
        }
        return c;
    }
    
    template&lt;class T> inline T pow(T a, LL b){
        T c(1); while (b){
            if (b&amp;1) c *= a;
            a *= a, b >>= 1;
        }
        return c;
    }
    
    template&lt;class T> inline T pow(T a, int b){
        return pow(a, (LL)b);
    }
    
    inline int _I(int b){
        int a = MOD, x1 = 0, x2 = 1, q; while (1){
            q = a / b, a %= b;
            if (!a) return x2;
            DEC(x1, pdt(q, x2));
            
            q = b / a, b %= a;
            if (!b) return x1;
            DEC(x2, pdt(q, x1));
        }
    }
    
    inline void DIV(int &amp;a, int b){MUL(a, _I(b));}
    inline int qtt(int a, int b){return pdt(a, _I(b));}
    
    struct Int{
        int val;
        
        operator int() const{return val;}
        
        Int(int _val = 0):val(_val){
            val %= MOD; if (val &lt; 0) val += MOD;
        }
        Int(LL _val):val(_val){
            _val %= MOD; if (_val &lt; 0) _val += MOD;
            val = _val;
        }
        
        Int&amp; operator +=(const int&amp; rhs){INC(val, rhs);rTs;}
        Int operator +(const int&amp; rhs) const{return sum(val, rhs);}
        Int&amp; operator -=(const int&amp; rhs){DEC(val, rhs);rTs;}
        Int operator -(const int&amp; rhs) const{return dff(val, rhs);}
        Int&amp; operator *=(const int&amp; rhs){MUL(val, rhs);rTs;}
        Int operator *(const int&amp; rhs) const{return pdt(val, rhs);}
        Int&amp; operator /=(const int&amp; rhs){DIV(val, rhs);rTs;}
        Int operator /(const int&amp; rhs) const{return qtt(val, rhs);}
        Int operator-()const{return MOD-*this;}
    };
    
} using namespace NT;//}


//}



/** I/O Accelerator Interface .. **/ //{
#define g (c=getchar())
#define d isdigit(g)
#define p x=x*10+c-'0'
#define n x=x*10+'0'-c
#define pp l/=10,p
#define nn l/=10,n
template&lt;class T> inline T&amp; RD(T &amp;x){
    char c;while(!d);x=c-'0';while(d)p;
    return x;
}
template&lt;class T> inline T&amp; RDD(T &amp;x){
    char c;while(g,c!='-'&amp;&amp;!isdigit(c));
    if (c=='-'){x='0'-g;while(d)n;}
    else{x=c-'0';while(d)p;}
    return x;
}
inline DB&amp; RF(DB &amp;x){
    //scanf("%lf", &amp;x);
    char c;while(g,c!='-'&amp;&amp;c!='.'&amp;&amp;!isdigit(c));
    if(c=='-')if(g=='.'){x=0;DB l=1;while(d)nn;x*=l;}
    else{x='0'-c;while(d)n;if(c=='.'){DB l=1;while(d)nn;x*=l;}}
    else if(c=='.'){x=0;DB l=1;while(d)pp;x*=l;}
    else{x=c-'0';while(d)p;if(c=='.'){DB l=1;while(d)pp;x*=l;}}
    return x;
}
#undef nn
#undef pp
#undef n
#undef p
#undef d
#undef g
inline char* RS(char *s){
    //gets(s);
    scanf("%s", s);
    return s;
}

LL last_ans; int Case; template&lt;class T> inline void OT(const T &amp;x){
    //printf("Case #%d: ", ++Case);
    //printf("%lld\n", x);
    //printf("%I64d\n", x);
    //printf("%.9f\n", x);
    //printf("%d\n", x);
    cout &lt;&lt; x &lt;&lt; endl;
    //last_ans = x;
}


//}/* .................................................................................................................................. */
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 01:30:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 01:30:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xiaodao%e7%9a%84%e6%a8%a1%e6%9d%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1005 矩阵取数游戏</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/28/p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f-2/</link>
		<pubDate>Sun, 28 Apr 2019 12:40:15 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=559</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1005">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的n \times m<em>n</em>×<em>m</em>的矩阵，矩阵中的每个元素a_{i,j}<em>a</em><em>i</em>,<em>j</em>​均为非负整数。游戏规则如下：</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>每次取数时须从每行各取走一个元素，共n<em>n</em>个。经过m<em>m</em>次后取完矩阵内所有元素；</li><li>每次取走的各个元素只能是该元素所在行的行首或行尾；</li><li>每次取数都有一个得分值，为每行取数的得分之和，每行取数的得分 = 被取走的元素值\times 2^i×2<em>i</em>，其中i<em>i</em>表示第i<em>i</em>次取数（从11开始编号）；</li><li>游戏结束总得分为m<em>m</em>次取数得分之和。</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>帅帅想请你帮忙写一个程序，对于任意矩阵，可以求出取数后的最大得分。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入文件包括n+1<em>n</em>+1行：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第11行为两个用空格隔开的整数n<em>n</em>和m<em>m</em>。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第2\backsim n+12∽<em>n</em>+1行为n \times m<em>n</em>×<em>m</em>矩阵，其中每行有m<em>m</em>个用单个空格隔开的非负整数。<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出文件仅包含11行，为一个整数，即输入矩阵取数后的最大得分。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 3 <br>1 2 3 <br>3 4 2 </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">82</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>NOIP 2007 提高第三题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>数据范围：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>60%的数据满足：1\le n, m \le 301≤<em>n</em>,<em>m</em>≤30，答案不超过10^{16}1016<br>100%的数据满足：1\le n, m \le 801≤<em>n</em>,<em>m</em>≤80，0 \le a_{i,j} \le 10000≤<em>ai</em>,<em>j</em>​≤1000</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size"><strong>------------------------------------------------------------------------------------------------------</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"><strong>题目大意：提供一个 n 行 m 列的矩阵，每次 取 每行数列最左端或者最右端的一个数字，计算</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"><strong> 每行取数的得分之和，每行取数的得分 = 被取走的元素值 * 2 ^ i ，最后求 最大的分数值是多少</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size">求解思路：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）通常求解最大值或者最优解运用到的是动态规划，以得全过程的最优（注：贪心是求解每步的最优解）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）注意数据的范围 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <strong>100%的数据满足：</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1 &lt;= n, m &lt;= 80 </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>1≤</strong><em><strong>n</strong></em><strong>,</strong><em><strong>m</strong></em><strong>≤80，</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong> 10000≤</strong><em><strong>ai</strong></em><strong>,</strong><em><strong>j</strong></em><strong>​≤1000</strong> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>在幂指数运算的时候数据的增长是爆炸式的增长， 于是该题不得不用到高精度的算法（也有人用了128位运算，但是我不会；听说并不是每个比赛都允许使用的，所以这里就没有128的题解啦</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>可能会用到的是 + ， *  两个的高精度运算于是进行运算符重载</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>关于重载运算符，类的重载对访问有较高的限制，所以选择结构体进行重载</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"><strong>关于动态规划方程的求解过程：</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>以样例来看（</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>左上第一步，</li><li>右上第二步，</li><li>右下第三步（即最后一步，多画了一副图不要在意）</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":560} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/04/temp1-1024x576.png" alt="" class="wp-image-560"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>很容易注意到越大的数越晚取越好，因此我们每次动态规划取最小的数字即可</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"><strong>注意区间的改变：</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><em>fi</em>,<em>j</em>​表示区间<strong>为</strong> [ <em>&nbsp;i&nbsp;</em>, <em>&nbsp;j&nbsp;&nbsp;</em> ] 时，所能获得的最大分数。</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>动态规划方程：</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>当区间变为改变时，上一次取数的时候区间一定是</li><li>[<em>&nbsp;i&nbsp;</em> − 1,<em>&nbsp;, &nbsp;j</em> ]或 [ i ,  j + 1 ]</li><li>从这两个状态转移即可。在第 m - j + i - 1次</li><li>取走了a[ i-1 , j ]  ​或  a[ i ,j +1 ] </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size">注意：当区间只剩下一个元素时要进行特判，因为只剩一个元素是无法进行比较从而dp的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>综上的转移方程：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>          f[i][j] = max(f[i][j], f[i - 1][j] + base[m - j + i - 1] * arr[i - 1]);
            f[i][j] = max(f[i][j], f[i][j + 1] + base[m - j + i - 1] * arr[j + 1]);</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
#include&lt;cstdio>
#include&lt;cstring>
#include&lt;cmath>
#include&lt;algorithm>

using namespace std;

const int maxn = 85, mod = 10000;//这里mod的应该是高精度压缩大法

int n,m;
int arr[maxn];

struct hp
{
    int p[505],len;

    hp()
    {
        memset(p, 0, sizeof (p));//对p数组进行清空
        len = 0;//长度
    }
    //构造一个高精度变量
    void print()
    {
        printf("%d",p[len]);
        for(int i = len-1; i>0; i-- )
        {
            if(p[i] == 0)
            {
                cout&lt;&lt;"0000";
                continue;
            }

        for(int k = 10; k * p[i] &lt; mod; k*=10)
            cout&lt;&lt;"0";
        cout&lt;&lt;p[i];
        }
    } //四位压缩输出，即每四位输出一次
} f[maxn][maxn], base[maxn], ans;

hp operator + (const hp &amp;a,const hp &amp;b)
{
    hp c;
    c.len = max(a.len,b.len);
    int x = 0;
    for(int i = 1; i &lt;= c.len; i++)
    {
        c.p[i] = a.p[i] + b.p[i] + x;
        x = c.p[i] / mod;
        c.p[i] %= mod;
    }
    if(x > 0)
    {
        c.p[++c.len] = x;
    }
    return c;
} // 加法的高精度运算

hp operator * (const hp &amp;a,const int &amp;b)
{
    hp c;
    c.len = a.len;
    int x = 0;
    for(int i = 1; i &lt;= c.len; i++)
    {
        c.p[i] = a.p[i] * b + x;
        x = c.p[i] / mod;
        c.p[i] %= mod;
    }
    while(x > 0)
        c.p[++c.len] = x % mod, x/=mod;

    return c;
} //高精度 *单精度

hp max(const hp &amp;a, const hp &amp;b)
{
    if(a.len > b.len)
        return a;
    else if (a.len &lt; b.len)
        return b;
    for(int i = a.len; i > 0; i--)
        if(a.p[i] > b.p[i])
            return a;
        else if(a.p[i] &lt; b.p[i])
            return b;
    return a;
}//大数比较取最大值

void basetwo()
{
    base[0].p[1] = 1,base[0].len = 1;
    for(int i = 1; i &lt;= m + 2; i++)
    {
        base[i] = base[i - 1] * 2;
    }
}//预处理出二的幂

int main()
{
    cin>>n>>m;
    basetwo();
    while(n--)
    {
        memset(f, 0, sizeof(f));
        for(int i = 1; i &lt;= m; i++)
            cin>>arr[i];
        for(int i = 1; i &lt;= m; i++)
            for(int j = m; j >= i; j--) {
                    //动态规划的动态转移方程
                    //因为每次只取最前面或者最后面的数字
                f[i][j] = max(f[i][j], f[i - 1][j] + base[m - j + i - 1] * arr[i - 1]);
                f[i][j] = max(f[i][j], f[i][j + 1] + base[m - j + i - 1] * arr[j + 1]);
            }
        hp Max;
        for(int i = 1; i &lt;= m; i++)
            Max = max(Max, f[i][i] + base[m] * arr[i]);
        ans = ans + Max;

    }
    ans.print();//输出
return 0;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>559</wp:post_id>
		<wp:post_date><![CDATA[2019-04-28 12:40:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-28 12:40:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1005-%e7%9f%a9%e9%98%b5%e5%8f%96%e6%95%b0%e6%b8%b8%e6%88%8f-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[560]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于字符串题目：P1598 垂直柱状图 &amp; P1308 统计单词数</title>
		<link>http://yx.telstudy.xyz/index.php/2019/04/28/%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%a2%98%e7%9b%ae%ef%bc%9ap1598-%e5%9e%82%e7%9b%b4%e6%9f%b1%e7%8a%b6%e5%9b%be-p1308-%e7%bb%9f%e8%ae%a1%e5%8d%95%e8%af%8d%e6%95%b0/</link>
		<pubDate>Sun, 28 Apr 2019 12:57:53 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=566</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a.P1598 垂直柱状图</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1598">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>写一个程序从输入文件中去读取四行大写字母（全都是大写的，每行不超过100个字符），然后用柱状图输出每个字符在输入文件中出现的次数。严格地按照输出样例来安排你的输出格式。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>四行字符，由大写字母组成，每行不超过100个字符<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>由若干行组成，前几行由空格和星号组成，最后一行则是由空格和字母组成的。在任何一行末尾不要打印不需要的多余空格。不要打印任何空行。</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":567} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204848.png" alt="" class="wp-image-567"/><figcaption><br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":568} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/04/QQ图片20190428204907.png" alt="" class="wp-image-568"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>题解 ：题目不难主要是输入与输出样例具有一点奇怪（特意复制到text进行展示</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1）首先注意到该图表最高只会是出现最多的次数，记录即可，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2）因为柱形图所以不是第一行就可以输出 * 了，所以需要寻找规律，那么很容易发现 ，i 如果从最高值减少，当满足 （字母出现次数）&lt;= i 时，输出 * 即可</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3）类似桶排的感jio</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目难度 ; 入门 ~ 普及- </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
#include &lt;cstring>
#include &lt;cstdio>
#include &lt;algorithm>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
using namespace std;
int t[27];
int main()
{
    char s[110];
    for(int k = 0; k &lt; 4; k++)
    {
        memset(s, 0, sizeof(s));
        gets(s);
        int len = strlen(s);
        for(int i = 0; i &lt; len; i++)
        {
            if (s[i] - 'A' >= 0 &amp;&amp; s[i] - 'A' &lt;= 26)
                t[s[i] - 'A']++ ;
            else
                continue;
        }
    }
    int maxx = t[0];
    for(int i = 0; i &lt; 26; i++)
    {
        //cout &lt;&lt; t[i] &lt;&lt; endl;
        maxx  = max(maxx, t[i]);
    }
    //cout &lt;&lt; "----------" &lt;&lt; endl;
    for(int i = maxx; i > 0; i--)
    {
        for(int j = 0; j &lt; 26; j++)
            /*if (maxx - t[j] &lt;= i)
            {
                if(j == 0)
                    cout &lt;&lt; "*" ;
                else
                    cout &lt;&lt; " *";

            }
            else
            {
                if(j == 0)
                    cout &lt;&lt; " ";
                else
                {
                    cout &lt;&lt; "  ";
                }
                continue;

            }*/
            if(t[j] >= i){
                cout &lt;&lt; "* ";
            }
            else{
                cout &lt;&lt; "  ";
            }
        cout &lt;&lt; endl;
    }
    for(int i = 0; i &lt; 26; i++)
    {
        char ch = 'A' + i;
        if (ch == 'A')
            cout &lt;&lt; ch;
        else
            cout &lt;&lt; " " &lt;&lt; ch;
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size"><strong>-------------------------------------------------------------------------------------------------</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>P1308 统计单词数</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1308">开心的传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>中的某一独立单词在不区分大小写的情况下完全相同（参见样例1 ），如果给定单词仅是文章中某一单词的一部分则不算匹配（参见样例2 ）。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>共22行。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第11行为一个字符串，其中只含字母，表示给定单词；</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>第22行为一个字符串，其中只可能包含字母和空格，表示给定的文章。<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从00&nbsp;开始）；如果单词在文章中没有出现，则直接输出一个整数-1−1。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">To
to be or not to be is a question
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2 0

</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输入样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">to
Did the Ottoman Empire lose its power at that time</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#2：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">-1</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>数据范围</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1≤1≤单词长度≤10≤10。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1≤1≤文章长度≤1,000,000≤1,000,000。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>noip2011普及组第2题</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：考察tolower的运用，和部分函数（例如，find）的使用吧~入门</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（需要注意string::npos的值，不是一个定值而是每次都不同，之前在比赛中吃亏过）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
int main(){
    string a;
    string b;
    getline(cin, a);
    getline(cin, b);
    for(int i = 0; i &lt; a.size(); a[i] = tolower(a[i]), i++);
    for(int i = 0; i &lt; b.size(); b[i] = tolower(b[i]), i++);

    a = ' ' + a + ' ';
    b = ' ' + b + ' ';

    if (b.find(a) == string::npos) {
        cout &lt;&lt; "-1" &lt;&lt; endl;
    }
    else {
        int cnt = 0;
        int place = b.find(a);
        int p= b.find(a);
        while(p !=string::npos){
            cnt++;
            p=b.find(a,p+1);
        }
        cout &lt;&lt; cnt &lt;&lt; " " &lt;&lt; place &lt;&lt; endl;
    }

}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>566</wp:post_id>
		<wp:post_date><![CDATA[2019-04-28 12:57:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-28 12:57:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8e%e5%ad%97%e7%ac%a6%e4%b8%b2%e9%a2%98%e7%9b%ae%ef%bc%9ap1598-%e5%9e%82%e7%9b%b4%e6%9f%b1%e7%8a%b6%e5%9b%be-p1308-%e7%bb%9f%e8%ae%a1%e5%8d%95%e8%af%8d%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[568]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1028 数的计算</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/03/p1028-%e6%95%b0%e7%9a%84%e8%ae%a1%e7%ae%97/</link>
		<pubDate>Fri, 03 May 2019 12:55:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=571</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1028">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>我们要求找出具有下列性质数的个数(包含输入的自然数n<em>n</em>):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>先输入一个自然数n<em>n</em>(n \le 1000<em>n</em>≤1000),然后对此自然数按照如下方法进行处理:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>不作任何处理;</li><li>在它的左边加上一个自然数,但该自然数不能超过原数的一半;</li><li>加上数后,继续按此规则进行处理,直到不能再加自然数为止.</li></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>11个自然数n<em>n</em>(n \le 1000<em>n</em>≤1000)<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>11个整数，表示具有该性质数的个数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">6
</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>说明</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>满足条件的数为</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>6，16，26，126，36，136</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意： （略）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意 ：个数也包括数字本身</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解 ：该题在洛谷的标签是递推与递归，然而我尝试了一下， 递归问问的超时，也可能是我的递归没有进行好的优化</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":572} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题-1024x576.png" alt="" class="wp-image-572"/><figcaption>1位数字时，2位数字时，3位数字时<br>例：可以发现在你算到26的时候其实该数字还可以延伸出另一种情况即126，所以个数需要加1<br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>能延伸出几种数字就增加几（递归思路）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>int cal(int n){
    int cnt = 0, i = 1;
//n/2自动向下取整
    for(; i &lt;= n/2; i++){
        cnt++;
        cnt += cal(i);
    }
    return cnt;
}</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//正常递归的思路，但是是错误的，数据大时会超时
#include &lt;iostream>
using namespace std;
int cal(int n){
    int cnt = 0, i = 1;
    for(; i &lt;= n/2; i++){
        cnt++;
        cnt += cal(i);
    }
    return cnt;
}
int main(){
    int n;
    cin >> n;
    cout &lt;&lt; cal(n)+1 &lt;&lt; endl;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>于是更改思路，想打表答题，就是将所有的结果储存在一个数组中，需要答案的时候直接输出即可</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//也是错的（哭
#include &lt;iostream>
using namespace std;
typedef long long ll;
ll a[1001] = {0};
int cal(int n){
    int cnt = 0, i = 1;
    for(; i &lt;= n/2; i++){
        cnt++;
        cnt += cal(i);
    }
    return cnt;
}
void solve(){
    for(int i = 1; i &lt;= 1000; i++){
        a[i] = cal(i);
    }
}
int main(){
    solve();
    int n;
    cin >> n;
    cout &lt;&lt; cal(n)+1 &lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>由于表的递归数据太大了，会导致循环的运行时间超时，所以一个样例也是过不去的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>最后的正解</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>首先寻找规律（可以用之前的程序将签25个先计算出来）</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>f[0] = 0</li><li> f[1] = 1</li><li> f[2] = 2</li><li> f[3] = 2</li><li> f[4] = 4</li><li> f[5] = 4</li><li> f[6] = 6</li><li> f[7] = 6</li><li> f[8] = 10</li><li> f[9] = 10</li><li> f[10] = 14</li><li> f[11] = 14</li><li> f[12] = 20</li><li> f[13] = 20</li><li> f[14] = 26</li><li> f[15] = 26</li><li> f[16] = 36</li><li> f[17] = 36</li><li> f[18] = 46</li><li> f[19] = 46</li><li> f[20] = 60</li><li> f[21] = 60</li><li> f[22] = 74</li><li> f[23] = 74</li><li> f[24] = 94</li><li> f[25] = 94</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>1.会发现当 n % 2 == 1 的时候都与前一个是相同的</li><li>2.每一种位数的个数都与少一种位数的个数有关</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>f [1]  = 1;</li><li>f [2]  = f [2 - 1] + f [ 2 / 2]; </li><li>f [3]  = f[ 3 - 1];</li><li>.... ...</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>可以发现双数都是有如此规律的 f[i] = f[i-1] + f[i/2];</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>为什么发现是除以2呢，因为要求是小于等于原数的一半</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：类似于动态规划的思想储存每个值进行递推</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
using namespace std;
typedef long long ll;

ll f[1001] = {0, 1, 2, 2, 4, 4, 6, 6, 10, 10, 14, 14};
int main(){
    int n;
    cin >> n;
    for(int i = 11; i &lt;= n; i++){
        if(i % 2 == 0)
            f[i] = f[i-1] + f[i/2];
        else
            f[i] = f[i-1];
    }
    cout &lt;&lt; f[n] &lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>571</wp:post_id>
		<wp:post_date><![CDATA[2019-05-03 12:55:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-03 12:55:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1028-%e6%95%b0%e7%9a%84%e8%ae%a1%e7%ae%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[572]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1011 车站（斐波那契+数学）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/05/p1011-%e8%bd%a6%e7%ab%99%ef%bc%88%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%ad%a6%ef%bc%89/</link>
		<pubDate>Sun, 05 May 2019 12:05:30 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=574</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.luogu.org/problemnew/show/P1011">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>题目背景</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>题目描述</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>火车从始发站（称为第11站）开出，在始发站上车的人数为a<em>a</em>，然后到达第22站，在第22站有人上、下车，但上、下车的人数相同，因此在第22站开出时（即在到达第33站之前）车上的人数保持为a<em>a</em>人。从第33站起（包括第33站）上、下车的人数有一定规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1<em>n</em>−1站），都满足此规律。现给出的条件是：共有N<em>N</em>个车站，始发站上车的人数为a<em>a</em>，最后一站下车的人数是m<em>m</em>（全部下车）。试问x<em>x</em>站开出时车上的人数是多少？</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出格式</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a<em>a</em>(≤20)，n<em>n</em>(≤20)，m<em>m</em>(≤2000)，和x<em>x</em>(≤20)，<strong>输出格式：</strong><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>从x<em>x</em>站开出时车上的人数。</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>输入输出样例</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>输入样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5 7 32 4
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p><strong>输出样例#1：</strong><a>复制</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">13<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>解题思路：依照题意列出每站的上车人数和下车人数，以及该站人数，寻找思路</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>设t为上车人数</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td> <br>站号</td><td> <br> 该站人数 </td><td> <br> 上车人数</td><td> <br>下车人数 </td></tr><tr><td>1</td><td>a</td><td>a</td><td>0</td></tr><tr><td>2</td><td>a</td><td>t</td><td>t</td></tr><tr><td>3</td><td>2a</td><td>t+a</td><td>t</td></tr><tr><td>4</td><td>2a+t</td><td>2t+a</td><td>t+a</td></tr><tr><td>5</td><td>3a+2t</td><td>3t+2a</td><td>2t+a</td></tr><tr><td>6</td><td>4a+4t</td><td>5t+3a</td><td>3t+2a</td></tr><tr><td>7</td><td>6a+7t</td><td>8t+5a</td><td>5t+3a</td></tr><tr><td>8</td><td>9a+12t</td><td>13t+8a</td><td>8t+5a</td></tr><tr><td>9</td><td>14a+20t</td><td>21t+13a</td><td>13t+8a</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>解题思路：注意上车人数是前两个站上车人数之和，因此很自然的想到与之类似的斐波那契数列</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>斐波那契数列由第三项开始为前两项和</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>斐波那契数列函数</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
using namespace std;
int fib[21] = {0, 1};
int main(){
    long long n = 20;
    for(int i = 2; i &lt; 20; i++) {
        fib[i] = fib[i-1] + fib[i-2];
    }
    for(auto x: fib)
        cout &lt;&lt; x &lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li>0</li><li> 1</li><li> 1</li><li> 2</li><li> 3</li><li> 5</li><li> 8</li><li> 13</li><li> 21</li><li> 34</li><li> 55</li><li> 89</li><li> 144</li><li> 233</li><li> 377</li><li> 610</li><li> 987</li><li> 1597</li><li> 2584</li><li> 418</li></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><li>以上即为斐波那契数列，发现不仅和上车人数有关也与下车人数有关</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>解得 上车人数 f [ n - 2 ] <em>a + f [ n - 1 ]</em>t;</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>通过观察整个过程，你还会哦发现这样一个关系：
最后一站的人数m+第二站上车的人数等于倒数第二站上车的人数+第一站的人数。</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>即：m + t = f [ n - 1 - 2 ] <em> a + f [ n - 1 - 1 ] </em> t + a ;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>通过这个关系我们可以很快的求出t的值，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这样在第x站上车的人数等于：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> f [ x - 2 ] <em> a + f [ x - 1 ] </em>t ; </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>然后通过数学解答得</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define p(ans) printf("%lld",ans);
using namespace std;
typedef long long ll;
int fib[1010] = {0, 1, 1};
int main()
{
    int a, n, m, x;
    scanf("%d %d %d %d", &amp;a, &amp;n, &amp;m, &amp;x);
    for(int i = 3; i &lt;= n+3; i++)
    {
        fib[i] = fib[i-1] + fib[i-2];
    }
    int t = (m - fib[n-3] * a - a) / (fib[n-2] - 1);
    if(x == 1)
    {
        printf("%d\n", a);
    }
    else
    {
        cout &lt;&lt; (fib[x-2] + 1 ) * a + (fib[x-1] - 1) * t &lt;&lt; endl;
    }
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>574</wp:post_id>
		<wp:post_date><![CDATA[2019-05-05 12:05:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-05 12:05:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1011-%e8%bd%a6%e7%ab%99%ef%bc%88%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%ad%a6%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>What day is that day? （找规律+动态规划+快速幂）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/05/what-day-is-that-day-%ef%bc%88%e6%89%be%e8%a7%84%e5%be%8b%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e5%bf%ab%e9%80%9f%e5%b9%82%ef%bc%89/</link>
		<pubDate>Sun, 05 May 2019 12:09:46 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=577</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://vjudge.net/problem/49924/origin">传送门</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's Saturday today, what day is it after 1<sup>1</sup>&nbsp;+ 2<sup>2</sup>&nbsp;+ 3<sup>3</sup>&nbsp;+ ... +&nbsp;N<sup>N</sup>&nbsp;days?Input</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are multiple test cases. The first line of input contains an integer&nbsp;Tindicating the number of test cases. For each test case:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is only one line containing one integer&nbsp;N&nbsp;(1 &lt;=&nbsp;N&nbsp;&lt;= 1000000000).Output</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For each test case, output one string indicating the day of week.Sample Input</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
1
2
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Sample Output</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Sunday
Thursday
</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Hint</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A week consists of Sunday, Monday, Tuesday, Wednesday, Thursday, Friday and Saturday.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：难点在于找规律上</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>多算法得灵活运用，算是我能做出为数不多得好题之一了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
typedef long long ll;
#define REP(i, a, b) for(ll i = a; i &lt; b; i++)
#define REP_(i, a, b) for(ll i = a; i &lt;= b; i++)

using namespace std;
ll dp[100010];
void putout(ll sum)
{
    if (sum==1)
    {
        printf("Sunday\n");
    }
    else if (sum==2)
    {
        printf("Monday\n");
    }
    else if (sum==3)
    {
        printf("Tuesday\n");
    }
    else if (sum==4)
    {
        printf("Wednesday\n");
    }
    else if (sum==5)
    {
        printf("Thursday\n");
    }
    else if (sum==6)
    {
        printf("Friday\n");
    }
    else if (sum==0)
    {
        printf("Saturday\n");
    }
}
ll _(ll x,ll y)
{
    //快速幂
    ll ans = 1;
    while(y)
    {
        if(y&amp;1)
            ans = (ans*x)%7;
        y >>= 1;
        x = (x*x)%7;
    }
    return ans;
}

int main()
{
    dp[1] = 1;
    dp[2] = 5;
    dp[3] = 14;
    REP(i, 2, 295)
    {
        dp[i] = (dp[i-1] + _(i, i))%7;
    }
    dp[0] = dp[294];
    int t;
    scanf("%d", &amp;t);
    while(t--)
    {
        //int n = 300;
        ll n;
        scanf("%lld", &amp;n);
        //dp[0] = dp[297]; 一个周期
        putout(dp[n%294]);
        /*for(int i = 1; i &lt;= n; i++){
            sum += _(i, i) % 7;
            sum %= 7;

            putout(sum);

        }
        long long n, sum = 0 ;
        cin >> n;
        REP_(i, 2, n)
        {
            sum += _(i,i)%7;
        }
        sum %= 7;
        for(i = k+1; i &lt; N; i++){
            bool flag = true;
            for(j = 1; j &lt;= k; j++)
                if(f[j]!=f[j+i-1])
                {
                    flag = false;break;
                }
        }
               */
    }
}
/*
Sunday,
Thursday,
Wednesday,
Sunday,
Wednesday,
Thursday,
Saturday,
Sunday,
Thursday,
Wednesday,
Sunday,
Wednesday,
Thursday,
Saturday,
Sunday,
Thursday,
Wednesday,
Sunday,
Wednesday,
Thursday,
Saturday,
Sunday,
Thursday,
Wednesday,
Sunday,
*0*/
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>577</wp:post_id>
		<wp:post_date><![CDATA[2019-05-05 12:09:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-05 12:09:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-day-is-that-day-%ef%bc%88%e6%89%be%e8%a7%84%e5%be%8b%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e5%bf%ab%e9%80%9f%e5%b9%82%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>最长子序列和问题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/06/%e6%9c%80%e9%95%bf%e5%ad%90%e5%ba%8f%e5%88%97%e5%92%8c%e9%97%ae%e9%a2%98/</link>
		<pubDate>Mon, 06 May 2019 10:37:26 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=579</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>分而治之：分区间计算每个区间的最大和</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
int find_maximum_subbarray(int *a,int left, int right)
{
    if(left ==  right)
        return a[left];

        int mid = (left + right) >> 1;
        int left_sum = -0x3f3f3f3f;
        int sum = 0;
        int left_max, right_max;

        int lans = find_maximum_subbarray(a,  left,  mid);
        int rans = find_maximum_subbarray(a,  mid+1, right);

        for(int i = mid; i >= left; i--)
        {
            sum += a[i];
            if (sum > left_sum)
            {
                left_sum = sum;
                left_max = i;
            }

        }
        sum = 0;
        int right_sum = -0x3f3f3f3f;
        for(int i = mid+1; i &lt;= right; i++)
        {
            sum += a[i];
            if (sum > right_sum)
            {
                right_sum = sum;
                right_max = i;
            }
        }

    int ans = left_sum + right_sum;
    if (lans > ans){
        ans = lans;
    }
    if (rans > ans){
        ans = rans;
    }
    return ans;
}
int main(){
    ll n;
    sl(n);
    int * a = new int [n];
    REP(i, 0, n){
        cin >> a[i];
    }
    cout &lt;&lt; find_maximum_subbarray( a, 0, n-1);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题目：动态规划 dp</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
int main()
{
    int n;
    si(n);
    int *a = new int [n];
    REP(i, 0, n)
    {
        cin >> a[i];
    }
    int ans = a[0];
    REP_(i, 1, n-1)
    {
        if(a[i - 1] > 0)
        {
            a[i] += a[i-1];
        }
        else
        {
            a[i] +=0;
        }
        if(a[i] > ans)
        {
            ans = a[i];
        }
    }
    cout &lt;&lt; ans &lt;&lt; endl;
    delete []a;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date><![CDATA[2019-05-06 10:37:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-06 10:37:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e9%95%bf%e5%ad%90%e5%ba%8f%e5%88%97%e5%92%8c%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019山东省赛滚粗记</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/12/2019%e5%b1%b1%e4%b8%9c%e7%9c%81%e8%b5%9b%e6%bb%9a%e7%b2%97%e8%ae%b0/</link>
		<pubDate>Sun, 12 May 2019 12:17:44 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=583</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>2019山东省赛滚粗记</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>赛后总结+回忆</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5月11日&nbsp;day1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;白天四点的火车，明明这么早的时间，睡意却迟迟没有上头，摸出未看完的模版，从120多页一直往后翻，图论题什么的真的是难哭我了，许多模版也是一脸懵逼，心里很清楚马上省赛就要到了，很紧张也很兴奋，火车半程眼睛微酸也便眯了半程，窗外树影快速地闪过，离济南也愈来愈近了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;约是11点左右到达了济南，扑面而来的热气，让在火车上冻成狗的我舒服了许多，但没过一会就有点受不了了，过敏患者的绝望哈哈哈，济南很热，也很热闹，也见到了志愿者小姐姐小哥哥，人都超级好超级热心，也都十分美腻漂亮哈</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下午便是热身赛了，匆匆去食堂吃了面，挺好吃的呀，便去比赛的地方啦，心里清楚的很只是热身，有着些许紧张但也都十分轻易的平复了心情，热身赛一共四题，应该是三题往年出现过的旧题和一题放ak的对二次元了解题？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/*热身赛总结*/</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到a题我便直接跟恒恒说是旧题了，直接按条件模拟即可，亲7远4题意随缘答题，很快a题恒恒就过了，我又看了b题，据说这题我们之前做过，但是我没有啊，蓝廋，队友也没有看我问我怎么做，真的超级感谢他们对我的信任啦～我原本是想通过素数筛法选出非素数的，然后通过小区间遍历找出符合答案的数剧即可的，打完之后想让政政帮我出几个数据测试一下的，他突然发现这题是以前做过的一题，直接前数+4后数+9判断输出一下就好了，多组答案输出一组即可，我一脸懵逼，浪费了好多时间心痛，然后按着他说的打一下子就过了，（具体题意有点记不太清楚了）最后困死在c题真的蛮可惜的，c题是买m本书最多带的钱（大概是这个意思），我撸了一发，按照，特判n==m的情况，算0的个数然后跳过，然后算买m本需要的钱，判断这么多钱是否购买本数超标，最后算前m本加上m本后所有书中的最便宜值，最后减一即可，然后我信心满满略带担心的交了～快乐的wa了一发，赛后想起来大概是在有0出现判断与计算上出现了情况遗漏的情况，一直找不出错来，就让恒恒去重新打了一遍了，按他的思路打，结果他也一样过了一个点wa了一个点，政大哥也想了超多组测试数据和思路但还是没过，后面他就先去磕d题了，奈何d题考查二次元死宅的功力，无奈我只认识东方project对其他人物在下真的一无所知，热身赛最后也只能以两题告终啦，整顿军训，打算认真好好的打明日的正赛，腿痛的恒恒，感冒劳累的政政，流鼻血过敏的我啊哈哈哈真的是全员伤病呀</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;大家都早早休息了，第二天一大早我就流了点鼻血，但真的状态好了许多，政也说他舒服了许多，挺好哒</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>9:00开赛</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;正赛的这一天，还是一个字，热！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>表面淡定我的我真的超级超级超级超级无敌的紧张，说实话刚开始我就有点看不下题了，参加比赛的人真多，大佬真多，担心表现不好，如此种种，都让我超级紧张，强行静下心来看题，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;第一题完全没有看，主要恒和邹正过的，恒先自己打了一遍，测了几组数据变提交了然后不太幸运wa了一发，马上政哥哥就帮找错误，又看了遍题目，看有没有读错题意，好像是天数的计算上出了点错，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;我没太注意一直在努力静下心去读题，改了下多测了几组数据就又交了，然后美滋滋就过了，挺开心的这是在正式比赛上过的第一个题，他这么一过，我突然间第三题也看懂啦，就跟政说了题意，他又帮我分析了一遍，总结了题意主要是输入n个石子数，然后计算最少操作步数使得所有石子堆达到平衡的状态，我直接就上去写了，然后他们又去看其他题目了，很快就打完了，样例全过，（啊啊啊啊要是样例过就是对就好了，）以防意外让政政多算了几组测试数据，遗憾我的程序阵亡，好像是2 2 7 1 4</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>和2 7 7 1&nbsp;这两个没过，我最开始的思路是计算平均值直接判断计算步数，很显然这是不对的，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;我又滚到一旁思考了，然后提示他们开m题就是那个只狼的题目，过的人挺多的，就马上跟他们说了，他们就去思考啦，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;我就在磨c题了，有这么一个超级好的写法，主要是用lower_bound查找函数，就是我排序，然后从最小的开始，小于平均值的话就计算操作步数，同时通过lowerbound查找到第一个大于平均值的数，然后减去操作步数，（需要判断一下lowerbound是否真正查找到，这个注意一下就好了）这样最后一个大于ave的只需要拿走或者等于ave的不懂就可以满足最小的操作步数啦，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;他们先打了m题，我们wa的次数真的有点多，都是wa一半过一半，真的要找错误点是件很难得事情呀，这回主要出现的错误，不，应该说比较多次出现的错误是段错误，紫书上说的是堆栈过多或者爆栈的情况，但是我还是不能够之后理解这个段错误，回去之后一定要多查一下，尽量的去避免这种情况的出现，也要多参加比赛锻炼一下自己的心态哈，后面。 &nbsp;&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;我去翻译了d题，挺好看的蓝色的气球哈，很显眼看到挺多人a了，题目大意是求解给k个人，用字符串把每个人分到1队和2队，然后输入n表示n个点，输入m组数据连接边，然后开始删边，（要每个点都能达到）每个人取最优步进行走，然后看哪一对输，我先打，我一开始的思路真的是打错特错！我二维数组用floyd插点连接每一条边然后再删边，通过计算删边与总边之差求解，真的很麻烦，我们自己想的数据过不去！真是气，这个时候政哥哥想到了完全不用考虑哈，因为每个点都要连接起来那么一定是n-1条边啊，一开始一定是连接的，所以所以…不就过了吗，记得给字符串取余判断就好了，开心的过了，真的这一题是本次比赛最最最最最水的题目了，</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;后面我去啃k题了，因为k题特别像求解原根类的问题，给你a的值通过公式求解x的值是多少</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>公式：a^x=x^a（mod 2^p）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>记忆中大概就是这样的一个公式</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>a^d=1（mod 2^p）的解与gcd（a，2^p）有关，我通过同时取底计算，反套a^x，推了满满一页的公式感觉能过然后数组存2^n值减少计算步骤，可惜时间不够了，出来听凯哥说他的解法和我想的又不一样555</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>，听旁边大佬的小数据遍历大数据规律，好像也不一样，唉</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;第一次比赛满满的遗憾，主要是我的原因，太多次错误的思路了，学的算法多，真正灵活运用的我真的会的太不够了，都怪我，做的题不够多，做的绝大多数题还都是简单的水题，没有磕难题的经历，便没有成长，便是如此吧</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;唯有加油！我一定一定要变强</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date><![CDATA[2019-05-12 12:17:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-12 12:17:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019%e5%b1%b1%e4%b8%9c%e7%9c%81%e8%b5%9b%e6%bb%9a%e7%b2%97%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>《C++面向对象程序设计》第四章</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/19/%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e5%9b%9b%e7%ab%a0/</link>
		<pubDate>Sun, 19 May 2019 03:40:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=587</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>6-1 单目运算符重载（时钟类） (15 分)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>本题已给出时钟类及其成员函数实现，要求补充完整运算符++重载函数（前置和后置），使之能够实现时钟对象自增1秒。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">时钟类定义如下：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>class Clock {
	public:
		Clock(int NewH=0, int NewM=0, int NewS=0);
		void ShowTime();
		friend Clock operator++(Clock&amp; op);         //前置单目运算符重载
		friend Clock operator++(Clock&amp; op,int);     //后置单目运算符重载
	private:
		int Hour, Minute, Second;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;iostream>
using namespace std;

class Clock {
	public:
		Clock(int NewH=0, int NewM=0, int NewS=0);
		void ShowTime();
		friend Clock operator++(Clock&amp; op);         //前置单目运算符重载
		friend Clock operator++(Clock&amp; op,int);     //后置单目运算符重载
	private:
		int Hour, Minute, Second;
};

Clock::Clock(int NewH, int NewM, int NewS) {
	Hour=NewH;
	Minute=NewM;
	Second=NewS;
}
void Clock::ShowTime() {
	cout&lt;&lt;Hour&lt;&lt;":"&lt;&lt;Minute&lt;&lt;":"&lt;&lt;Second&lt;&lt;endl;
}

/*---------请在这里填写答案-----------*/

int main() {
	int h, m, s;
	cin>>h>>m>>s;
	Clock a(h,m,s);

	(++a).ShowTime();
	(a++).ShowTime();
	a.ShowTime();

	return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出一组输入。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>10 10 10</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出相应的输出。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>10:10:11
10:10:11
10:10:12
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：注意自增符号的位置即可</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
Clock operator ++(Clock &amp; op, int t){
	Clock tmp;
	tmp = op;
	op.Second++;
	op.Minute += op.Second / 60;
	op.Second  = op.Second % 60;
	op.Hour   += op.Minute / 60;
	op.Minute %= 60;
	op.Hour   %= 24;
	return tmp;
}
Clock operator ++(Clock &amp;op){
	op.Second++;
	op.Minute += op.Second / 60;
	op.Second  = op.Second % 60;
	op.Hour   += op.Minute / 60;
	op.Minute %= 60;
	op.Hour   %= 24;
	return op;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>6-2</strong><strong>&nbsp;</strong><strong>大整数求和（运算符重载）</strong><strong>&nbsp;</strong><strong>(20&nbsp;</strong><strong>分</strong><strong>)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>BigInt类表示不超过100位的无符号大整数。试重载&gt;&gt;，&lt;&lt;和+，以支持无符号大整数的输入、输出与求和（假设结果仍是一个不超过100位的无符号大整数）。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-bigint-">重载面向BigInt类对象的运算符：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>>>
&lt;&lt;
+
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using namespace std;

/* 请在这里填写答案 */

int main(){
    BigInt a, b, c;
    cin>>a>>b;
   c=a+b;
    cout&lt;&lt;a&lt;&lt;"+"&lt;&lt;b&lt;&lt;"="&lt;&lt;c&lt;&lt;endl;
    return 0;
}

</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>123456789
987654321
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>123456789+987654321=1111111110</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：这题是比较坑的一题，主要难点是</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>字符串的顺序</li><li>字符和数组，数组与字符串的转换</li><li>我有考虑过使用 char 数组，以代替字符串的使用，但是在输出这一方面会有很大的问题，因此不妨用函数多的string去实现</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":588} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190519113710.png" alt="" class="wp-image-588"/><figcaption>错了无数次</figcaption></figure>
<!-- /wp:image -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
class BigInt
{
private:
    string str;
public:
    BigInt() {}
    BigInt(string s)
    {
        str = s;
    }
    friend istream&amp; operator>>(istream&amp; is,BigInt &amp;b);
    friend ostream&amp; operator&lt;&lt;(ostream&amp; os,const BigInt &amp;b);
    friend BigInt operator + (const BigInt &amp;b1,const BigInt &amp;b2);
};

istream&amp; operator>>(istream&amp; is,BigInt &amp;b)
{
    is >> b.str;
    return is;
}

ostream&amp; operator&lt;&lt;(ostream&amp; os,const BigInt &amp;b)
{
    os &lt;&lt; b.str;
    return os;
}

BigInt operator + (const BigInt &amp;b1,const BigInt &amp;b2)
{
    string s;
    string s1 = b1.str;
    string s2 = b2.str;
    int len1  = s1.size();
    int len2  = s2.size();
    int len   = max(len1, len2);
    char ch;
    int carry = 0;
    int num1[101] = {0};
    int num2[101] = {0};
    int sum[102]  = {0};
	reverse(s1.begin(), s1.end());
	reverse(s2.begin(), s2.end());
    for(int i = 0; i &lt; len1; i++)
        num1[i] = s1[i] - '0';
    for(int i = 0; i &lt; len2; i++)
        num2[i] = s2[i] - '0';
    for(int i = 0; i &lt; len; i++)
    {
        sum[i] = (num1[i] + num2[i] + carry) % 10;
        carry  = (num1[i] + num2[i] + carry) / 10;
    }

    for(int i = 0; i &lt; len; i++){
        s += sum[i] + '0';
    }
    if(carry > 0){
        sum[len] = carry;
        s += carry + '0';
    }
    reverse(s.begin(), s.end());
    BigInt t(s);
    return t;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>6-3</strong><strong>&nbsp;</strong><strong>学生成绩的输入和输出（运算符重载）</strong><strong>&nbsp;</strong><strong>(10&nbsp;</strong><strong>分</strong><strong>)</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>现在需要输入一组学生的姓名和成绩，然后输出这些学生的姓名和等级。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入时，首先要输入学生数（正整数）N。接着输入N组学生成绩，每组成绩包括两项：第一项是学生姓名，第二项是学生的成绩（整数）。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出时，依次输出各个学生的序号（从1开始顺序编号），学生姓名，成绩等级（不小于60为PASS，否则为FAIL）</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">函数接口定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>面向Student类对象的流插入和流提取运算符
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using namespace std;

/* 请在这里填写答案 */

int main(){
    int i, repeat;
    Student st;
    cin>>repeat;
    for(i=0;i&lt;repeat;i++){
        cin>>st;
        cout&lt;&lt;st&lt;&lt;endl;
    }
    return 0;
}

</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>3
Li 75
Zhang 50
Yang 99
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1. Li PASS
2. Zhang FAIL
3. Yang PASS</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;string>
using namespace std;
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
int f = 1;
class Student{
private:
    string s;
    int g;
    string p;
public:
    friend istream&amp; operator>>(istream&amp; is,Student &amp;b);
    friend ostream&amp; operator&lt;&lt;(ostream&amp; os,const Student &amp;b);
};
istream&amp; operator>>(istream&amp; is,Student &amp;b){
    is >> b.s >> b.g;
（b.g >= 60）?
        b.p  = "PASS"
    :
        b.p =  "FAIL";
    return is;
}
ostream&amp; operator&lt;&lt;(ostream&amp; os,const Student &amp;b){
    os &lt;&lt; f &lt;&lt; ". " &lt;&lt; b.s &lt;&lt; " " &lt;&lt; b.p;
    f++;
    return os;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>6-4</strong><strong>&nbsp;</strong><strong>复数类重载加法、减法和乘法运算符</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>以下定义了一个复数类及其部分实现，现要求将类的构造函数以及运算符+、- 和 * 函数重载补充完整。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">复数类定义：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>在这里描述复数类定义。具体如下：
class complex {
	public:
		complex(float r=0,float i=0);                   // 构造函数
		complex operator+(const complex &amp;op2) const;    //重载运算符 +
		complex operator-(const complex &amp;op2) const;    //重载运算符 -
		complex operator*(const complex &amp;op2) const;    //重载运算符 *
		void display() const;                           // 按数学写法输出复数
	private:
		float real;
		float imag;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">裁判测试程序样例：</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>在这里给出复数类测试的例子。例如：
#include &lt;iostream>
using namespace std;
class complex {
	public:
		complex(float r=0,float i=0);                   // 构造函数
		complex operator+(const complex &amp;op2) const;    //重载运算符 +
		complex operator-(const complex &amp;op2) const;    //重载运算符 -
		complex operator*(const complex &amp;op2) const;    //重载运算符 *
		void display() const;                           // 按数学写法输出复数
	private:
		float real;
		float imag;
};


/* ------------------- 请在这里填写答案--------------------  */


void complex::display() const {
	if(real&amp;&amp;imag)
		if(imag==1||imag==-1)
			cout&lt;&lt;real&lt;&lt;(imag>0?"+":"-")&lt;&lt;"i"&lt;&lt;endl;
		else
			cout&lt;&lt;real&lt;&lt;(imag>0?"+":"")&lt;&lt;imag&lt;&lt;"i"&lt;&lt;endl;
	else if(real)
		cout&lt;&lt;real&lt;&lt;endl;
	else if (imag)
		if(imag==1||imag==-1)
			cout&lt;&lt;(imag>0?"":"-")&lt;&lt;"i"&lt;&lt;endl;
		else
			cout&lt;&lt;imag&lt;&lt;"i"&lt;&lt;endl;
	else
		cout&lt;&lt;0&lt;&lt;endl;
}

int main() {
	double real,imag;
	complex c,d,e;

	cin>>real>>imag;
	complex c1(real,imag);
	cin>>real>>imag;
	complex c2(real,imag);

	c=c1+c2;
	d=c1-c2;
	e=c1*c2;
	c.display() ;
	d.display() ;
	e.display();

	return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出一组输入。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>2 3
-4 -5
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出样例：</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>在这里给出相应的输出。例如：</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>-2-2i
6+8i
7-22i</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>题解：我个人遇到的问题域外声明构造函数，直接这么写就好了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>complex::complex(float r,float i){
    real = r;
    imag = i;
}
-----------------------------------------------------------------------</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
complex::complex(float r,float i){
    real = r;
    imag = i;
}
complex complex::operator + (const complex &amp;op2)const
{
    return complex(real + op2.real, imag + op2.imag);
}
complex complex::operator - (const complex &amp;op2)const
{
    return complex(real - op2.real, imag - op2.imag);
}
complex complex::operator * (const complex &amp;op2)const
{
    complex temp;
    temp.real = real * op2.real - imag * op2.imag;
    temp.imag = real * op2.imag + imag * op2.real;
    return temp;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date><![CDATA[2019-05-19 03:40:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-19 03:40:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8ac%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e3%80%8b%e7%ac%ac%e5%9b%9b%e7%ab%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[588]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>商汤的AI伴游小精灵</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/26/594/</link>
		<pubDate>Sun, 26 May 2019 06:55:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=594</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>北京市商汤科技开发有限公司面向青少年研发了一款智能伴游机器人-- AI 伴游小精灵。一经推出，深受孩子们的喜爱，可爱又机智的小精灵会想出很多有趣的小游戏来启迪孩子们思考。今天，小精灵给你提出了一个神奇又有趣的多米诺骨牌小游戏。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>你手上有一副神奇的多米诺骨牌，数量有&nbsp;n<em>n</em>个，编号为&nbsp;1 \sim n1∼<em>n</em>。它们之间存在着&nbsp;n-1<em>n</em>−1&nbsp;个单向推倒关系，即推倒&nbsp;x<em>x</em>&nbsp;会导致&nbsp;y<em>y</em>&nbsp;也被推倒，而且这样的关系都满足&nbsp;x&lt;y<em>x</em>&lt;<em>y</em>，且每组关系中的&nbsp;y<em>y</em>&nbsp;不会重复。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>一开始只有&nbsp;11&nbsp;号骨牌不会被其他骨牌推倒，所以你只需要推倒&nbsp;11&nbsp;号骨牌就可以推倒所有的骨牌。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>小精灵给你提的问题是：如果我们允许去掉&nbsp;22个骨牌，那么在最坏情况下你最少需要推倒几个骨牌才能使所有骨牌倒下？</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输入格式</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>第一行输入一个整数&nbsp;n<em>n</em>，表示有&nbsp;n<em>n</em>&nbsp;个多米诺骨牌。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来有&nbsp;n-1<em>n</em>−1&nbsp;行的输入，每行输入两个整数&nbsp;x,y<em>x</em>,<em>y</em>，表示推倒&nbsp;x<em>x</em>&nbsp;会导致&nbsp;y<em>y</em>&nbsp;也被推倒。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">输出格式</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>输出一个整数表示去掉两个骨牌之后，最坏情况下你最少需要推倒几个骨牌才能使所有骨牌倒下。</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="-">数据规模</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>n \le 5 \times 10^3<em>n</em>≤5×103</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>样例输入复制</h4>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">7
1 2
1 3
1 5
2 4
4 7
4 6</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":4} -->
<h4>样例输出复制</h4>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">5<br></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>题解：注意点可能存在连续推倒的情况</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我的测试数据</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>input<br>
6<br>
1 2<br>
1 3<br>
2 4<br>
3 5<br>
4 6</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>out<br> 3</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":595} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/05/无标题-1-1024x576.png" alt="" class="wp-image-595"/><figcaption>注意题目中提及的单方向推倒</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>存在问题的代码：(但是能ac</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;iostream>
#include &lt;algorithm>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
typedef struct{
    int place;
    int cnt;
}node;
node a[5050];
int t[5050][5050];
bool cmp(node a, node b){
    return a.cnt > b.cnt;
}
int main(){
    ll n, y, x;
    sl(n);
    REP(i, 1, n+2){
        a[i].place = i;
    }
    REP(i, 1, n){
        cin >> x >> y;
        t[x][y] = 1; // 即x可以推y
        a[x].cnt++;  // 节点个数
    }

    sort(a+1, a+n, cmp);

    int ans = a[1].cnt + a[2].cnt; // 未排除连续推倒情况
    //cout &lt;&lt; ans &lt;&lt; '\n';
    if(a[1].place == 1 || a[2].place == 1)
        ans--;
    if(t[a[1].place][a[2].place]){
        //如果是1就可以推倒
        ans--;
    }
     cout &lt;&lt; ans + 1&lt;&lt; endl;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date><![CDATA[2019-05-26 06:55:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-26 06:55:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[594]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[595]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>省赛补题 k题数论Happy Equation</title>
		<link>http://yx.telstudy.xyz/index.php/2019/05/26/%e7%9c%81%e8%b5%9b%e8%a1%a5%e9%a2%98-k%e9%a2%98%e6%95%b0%e8%ae%bahappy-equation/</link>
		<pubDate>Sun, 26 May 2019 12:21:31 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=602</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>传送门： <br><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=4123">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=4123</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Little Sub has just received an equation, which is shown below, as his birthday gift.Given the value of&nbsp;, please help Little Sub count the number of&nbsp;&nbsp;() which satisfies the equation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Input</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are multiple test cases. The first line of the input contains an integer&nbsp;&nbsp;(about 1000), indicating the number of test cases. For each test case:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first and only line contains two integers&nbsp;&nbsp;and&nbsp;&nbsp;(,&nbsp;).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Output</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For each test case output one line containing one integer, indicating the answer.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Sample Input</h4>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">2
6 12
8 16
</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":4} -->
<h4>Sample Output</h4>
<!-- /wp:heading -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">1023 16383<br></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul><li>先打表找一下规律</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
ll two[] = {0,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824};

using namespace std;
ll qpow(ll a, ll n)//计算a^n % mod
{
    ll re = 1;
    while(n)
    {
        if(n &amp; 1)//判断n的最后一位是否为1
            re = (re * a);
        n >>= 1;//舍去n的最后一位
        a = (a * a) ;//将a平方
        //cout &lt;&lt; re &lt;&lt; '\n';
    }

    return re;
}
ll qpow(ll a, ll n,ll mod)//计算a^n % mod
{
    ll re = 1;
    while(n)
    {
        if(n &amp; 1)//判断n的最后一位是否为1
            re = (re * a) % mod;
        n >>= 1;//舍去n的最后一位
        a = (a * a) % mod;//将a平方
    }
    return re % mod;
}
int main()
{
    ll cnt = 0;
    for(ll p = 1; p &lt;= 30; p++){
        for(ll a = 1; a &lt;= 50; a++){
            cnt = 0;
            for(ll x = 1; x &lt; 1000; x++){
                if(qpow(a, x) == qpow(x, a)){
                    cnt++;
                }
            }
            cout &lt;&lt; cnt &lt;&lt; '\n' &lt;&lt; "----------------------" &lt;&lt; '\n';
        }

    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":603} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/05/QQ图片20190526154518.png" alt="" class="wp-image-603"/><figcaption>大概可以的到这样一张表<br><br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>1&gt; 那么可以得到这么一个规律就是当a 为奇数的时候， 其答案只可能是 1， 就是满足答案的x只有一个</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意求解的是满足的x的个数，而不是x的大小</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2&gt;</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define REP_two(i, a, b) for(int i = a; i &lt;= b; i+=2)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
ll two[] = {1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824};
ll qpow(ll a, ll n)//计算a^n % mod
{
    ll re = 1;
    while(n)
    {
        if(n &amp; 1)//判断n的最后一位是否为1
            re = (re * a);
        n >>= 1;//舍去n的最后一位
        a = (a * a) ;//将a平方
    }
    return re;
}
ll qpow(ll a, ll n,ll mod)//计算a^n % mod
{
    ll re = 1;
    while(n)
    {
        if(n &amp; 1)//判断n的最后一位是否为1
            re = (re * a) % mod;
        n >>= 1;//舍去n的最后一位
        a = (a * a) % mod;//将a平方
    }
    return re % mod;
}
using namespace std;
int main()
{
    ll t;
    cin >> t;
    REP_(o, 1, t){
        ll a, p;
        sl(a);sl(p);
        if(a % 2 == 1){
            printf("1\n");
            continue;
        }
        //小范围暴力
        ll ans = 0;
        REP_two(i, 2, p){
            //qpow(a, i) == qpow(i, a, mod)
            if(qpow(a, i) == qpow(i, a)){
                ans++;
            }
        }
        ll tmp = p / a;
        if((p) % a){
            tmp++;
        }
        //cout &lt;&lt; ans &lt;&lt; endl;
        
        cout &lt;&lt; cout &lt;&lt;  ans + (two[p] / two[tmp] - p / two[tmp]) &lt;&lt; '\n' &lt;&lt; '\n';
    }
    return 0;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>当x大于等于p时   a ^ x % 2 ^ p 必为 0   此时只要使 x ^ a % 2 ^ p 也为 0,  那么当x ^ a 为 2 ^ p的倍数时右边的取余才为0 ， 也就是看2 ^ p是2 ^ (p / a)的多少倍即可。  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>  </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>602</wp:post_id>
		<wp:post_date><![CDATA[2019-05-26 12:21:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-26 12:21:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%9c%81%e8%b5%9b%e8%a1%a5%e9%a2%98-k%e9%a2%98%e6%95%b0%e8%ae%bahappy-equation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[603]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>7-3 复数相加 (70 分)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/06/13/7-3-%e5%a4%8d%e6%95%b0%e7%9b%b8%e5%8a%a0-70-%e5%88%86/</link>
		<pubDate>Thu, 13 Jun 2019 01:04:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=612</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目：一个复数类，运算符重载 + ，实现复数和复数的相加。输入一组复数，每行一个复数，直到输入0结束。 输出这组复数的结果。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>提示: 复数的输入和输出符合数学书写规范</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入示例</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3+2i</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2+3i</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>0</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出示例</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>5+5i</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/*错误代码*/
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
class c {
	private:

	public:
		int a;
		int b;
		char ch;
		char i;
		c() {

		}
		c(int ra,char rch ,int rb) {
			a  = ra;
			b  = rb;
			ch = rch;
			i  = 'i';
		}
		friend ostream &amp; operator &lt;&lt; (ostream &amp; os, c &amp; op);
		friend istream &amp; operator >> (istream &amp; is, c &amp; op);
		friend c operator +  (c &amp; op1,c &amp; op2);
		bool judge(c t1) {
			if(t1.a == 0) {
				return false;
			} else {
				return true;
			}
		}
};
ostream &amp; operator &lt;&lt; (ostream &amp; os, c &amp; op) {
	os &lt;&lt; op.a &lt;&lt; op.ch &lt;&lt; op.b &lt;&lt; op.i;
	return os;
}
istream &amp; operator >> (istream &amp; is, c &amp; op) {
	is >> op.a ;
	if(op.a == 0) {
		return is;
	}
	is >> op.ch >> op.b >>op.i;
	return is;
}
c operator +  (c &amp; op1,c &amp; op2) {
	int ta = op1.a + op2.a;
	if(op1.ch == '-') {
		op1.b = - op1.b;
	}
	if(op2.ch == '-') {
		op2.ch = -op2.ch;
	}
	int tb = op1.b + op2.b;
	char tch;
	if(tb &lt; 0) {
		tb = -tb;
		tch = '-';
	} else {
		tch = '+';
	}
	c temp(ta, tch, tb);
	return temp;
}
int main() {
	c t1, t2;
	cin >> t1;
	while(t1.a &amp;&amp; cin >> t2 &amp;&amp; t2.a) {
		t1 = t1 + t2;
	}
	cout &lt;&lt; t1 &lt;&lt; '\n';
}</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>612</wp:post_id>
		<wp:post_date><![CDATA[2019-06-13 01:04:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-13 01:04:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[7-3-%e5%a4%8d%e6%95%b0%e7%9b%b8%e5%8a%a0-70-%e5%88%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1036 选数（递归）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/21/p1036-%e9%80%89%e6%95%b0%ef%bc%88%e9%80%92%e5%bd%92%ef%bc%89/</link>
		<pubDate>Sun, 21 Jul 2019 12:45:04 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=629</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目链接： <a href="https://www.luogu.org/problemnew/show/P1036">https://www.luogu.org/problemnew/show/P1036</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：本题标签是普及组的题，但还是感觉好难。主要在于选数过程的理解，最后靠着优质题解勉强是解答出来了，下面题解便先从样例的选数开始进行解析，希望能让自己对题目有着更好的理解和记忆。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输入样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>4 3<br>3 7 12 19</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>输出样例：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>所有数的组合如下</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3+7+12=22</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3+7+19=29</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>7+12+19=38</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>3+12+19=34</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":630} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/07/无标题-1024x482.png" alt="" class="wp-image-630"/><figcaption>选数图</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>注意观察选数图的下划线，可以发现下划线是由左向右逐渐移动的，当遇到数的尽头时下滑线由左端开始，下划线的长度很明显是k，因为选取的数的个数已经规定是k了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created: 
 */
using namespace std;
int x[20], n, k;
bool isprime(int n) {
    int s = sqrt(double(n));
    for(int i = 2; i &lt;= s; i++) {
        if(n%i == 0)
            return false;
    }
    return true;
}
/*
choose_num 是选取的数的个数
already_sum是选完数的求和结果
start      是选数的开始位置
_end       是选数的结束位置 
*/
int slove(int choose_num, int already_sum, int start,int _end){
    if(choose_num == 0){
        return isprime(already_sum);
    }
    int sum = 0;
    for(int i = start; i &lt;= _end; i++) {
        //cout &lt;&lt; x[i] &lt;&lt; " ";
        //k个数的和可以由k-1个数而得，依次递归
        sum += slove(choose_num - 1, already_sum + x[i], i+1, _end);
    }
    return sum;
}
int main(){
    cin >> n >> k;
    for(int i = 0; i &lt; n; i++) {
        cin >> x[i];
    }
    cout &lt;&lt; slove(k, 0, 0, n-1) &lt;&lt; '\n';
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>629</wp:post_id>
		<wp:post_date><![CDATA[2019-07-21 12:45:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-21 12:45:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1036-%e9%80%89%e6%95%b0%ef%bc%88%e9%80%92%e5%bd%92%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[630]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Miller-Rabin素数测试算法</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/21/miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95/</link>
		<pubDate>Sun, 21 Jul 2019 12:58:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=632</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>        快速判断一个数是否为素数的方法，但由于费马小定理是非充分必要检验定理，所以只是大概率判断一个数是否为素数，如果时间复杂度没有太严格的要求的话，还是老老实实的去写sqrt（n）慢慢除叭！</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>以下是费马小定理的证明过程</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":635} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/07/IMG_2928-768x1024.jpg" alt="" class="wp-image-635"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph {"fontSize":"large"} -->
<p class="has-large-font-size">【两个基础理论】</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1.费马小定理：</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 费马小定理：当&nbsp;p为质数时，有</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" alt="a^{p-1}\equiv 1(mod \: \, p)"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>，不过反过来不一定成立，也就是说，如果</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" alt="a^{p-1}\equiv 1(mod \: \, p)"/><figcaption>p不一定为质数</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>什么数会这样呢？卡迈尔数，就像是561，用如上式子是成立的但是561并不是卡迈尔数，因为561可以分解为3*11*17（有兴趣的可以百度一下下哈哈）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2.二次探测</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> 二次探测：如果&nbsp;p 是一个素数  0 &lt; x &lt; p  ,  则方程  x^2 = 1(mod p)  的解为  x = 1或者  x = p -1</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>【两个基本理论的证明】</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>证明转载<a href="https://blog.csdn.net/ECNU_LZJ/article/details/72675595">费马小定律&amp;二次探测的证明</a></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":636} -->
<figure class="wp-block-image"><img src="http://yx.telstudy.xyz/wp-content/uploads/2019/07/20180902152616155.jpg" alt="" class="wp-image-636"/></figure>
<!-- /wp:image -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include&lt;cstdio>
#include&lt;cstring>
#include&lt;algorithm>
using namespace std;
int prime[10]={2,3,5,7,11,13,17,19,23,29};
int Quick_Multiply(int a,int b,int c)  //快速积（和快速幂差不多） 
{
    long long ans=0,res=a;
    while(b)
    {
        if(b&amp;1)
          ans=(ans+res)%c;
        res=(res+res)%c;
        b>>=1;
    }
    return (int)ans;
}
int Quick_Power(int a,int b,int c)     //快速幂，这里就不赘述了 
{
    int ans=1,res=a;
    while(b)
    {
        if(b&amp;1)
          ans=Quick_Multiply(ans,res,c);
        res=Quick_Multiply(res,res,c);
        b>>=1;
    }
    return ans;
}
bool Miller_Rabin(int x)     //判断素数 
{
    int i,j,k;
    int s=0,t=x-1;
    if(x==2)  return true;   //2是素数 
    if(x&lt;2||!(x&amp;1))  return false;     //如果x是偶数或者是0,1，那它不是素数 
    while(!(t&amp;1))  //将x分解成(2^s)*t的样子 
    {
        s++;
        t>>=1;
    }
    for(i=0;i&lt;10&amp;&amp;prime[i]&lt;x;++i)      //随便选一个素数进行测试 
    {
        int a=prime[i];
        int b=Quick_Power(a,t,x);      //先算出a^t
        for(j=1;j&lt;=s;++j)    //然后进行s次平方 
        {
            k=Quick_Multiply(b,b,x);   //求b的平方 
            if(k==1&amp;&amp;b!=1&amp;&amp;b!=x-1)     //用二次探测判断 
              return false;
            b=k;
        }
        if(b!=1)  return false;   //用费马小定律判断 
    }
    return true;   //如果进行多次测试都是对的，那么x就很有可能是素数 
}
int main()
{
    int x;
    scanf("%d",&amp;x);
    if(Miller_Rabin(x))  printf("Yes");
    else  printf("No");
    return 0;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>参考链接： <a href="https://blog.csdn.net/forever_dreams/article/details/82314237">https://blog.csdn.net/forever_dreams/article/details/82314237</a> </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>632</wp:post_id>
		<wp:post_date><![CDATA[2019-07-21 12:58:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-21 12:58:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%b4%a0%e6%95%b0%e7%ad%9b"><![CDATA[素数筛]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[636]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>P1217 [USACO1.5]回文质数 Prime Palindromes（超典型的打表题值得学习！）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/07/23/p1217-usaco1-5%e5%9b%9e%e6%96%87%e8%b4%a8%e6%95%b0-prime-palindromes%ef%bc%88%e8%b6%85%e5%85%b8%e5%9e%8b%e7%9a%84%e6%89%93%e8%a1%a8%e9%a2%98%e5%80%bc%e5%be%97%e5%ad%a6%e4%b9%a0%ef%bc%81%ef%bc%89/</link>
		<pubDate>Tue, 23 Jul 2019 04:44:36 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=639</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目链接： <a href="https://www.luogu.org/problemnew/show/P1217">https://www.luogu.org/problemnew/show/P1217</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：输入a, b，然后输出 a 到 b 之间既是质数也是回文数的数（数据范围是5 到 1亿）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题解：看到数据范围大概很快的就能意识到两个判断和较大数据是一定会卡时间的，所以直接进行判断是肯定没有办法完全通过的</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>我先用模拟法基本的将程序写出来，发现输出很快，就算是到1亿也能打完大概2-3s挺快的，于是打表的方法就很自然的想到了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//生成表
#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
using namespace std;
/*
bool palindrome(ll x) {

    char temp[256] = {0};
    sprintf(temp, "%lld", x);
    string str(temp);
    for(int i = 0; i &lt;= str.size()/2; i++){
        if(str[i] != str[str.size()-1-i]){
            return false;
        }
    }
    return true;
}
bool isprime(ll x){
    if(x%2 == 0){
        return false;
    }
    for(int i = 2; i &lt;= sqrt(x); i++){
        if(x%i == 0){
        return false;
    }
    }
    return true;
}
      palindrome = 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;//(处理回文数...)
      palindrome = d1 d2 d3 d3 d2 d1
      palindrome = d1 d2 d3 d4 d3 d2 d1
      palindrome =

    for(ll i = a; i &lt;= b; i++) {
        if(palindrome(i) &amp;&amp; isprime(i)){
             cout &lt;&lt; i &lt;&lt; ",";
        }
    }
*/

int main(){
    ll a, b;
    sl(a);
    sl(b);
    //cout &lt;&lt; sizeof(ans) &lt;&lt; endl; 6232
     for(ll i = a; i &lt;= b; i++) {
        if(palindrome(i) &amp;&amp; isprime(i)){
             cout &lt;&lt; i &lt;&lt; ",";
        }
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>复制粘贴就可以得到表了，因为逗号已经输出了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>sizeof就可以直接计算数组的大小了</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;bits/stdc++.h>
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
using namespace std;
ll ans[6233]={};

int main(){
    ll a, b;
    sl(a);
    sl(b);
    //cout &lt;&lt; sizeof(ans) &lt;&lt; endl; 6232
    for(int i = 0; i &lt; 6234; i++) {
        if(ans[i] > b){
            break;
        }
        if(ans[i] >= a &amp;&amp; ans[i] &lt;= b){
            cout &lt;&lt; ans[i] &lt;&lt; '\n';
        }
    }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>639</wp:post_id>
		<wp:post_date><![CDATA[2019-07-23 04:44:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-23 04:44:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[p1217-usaco1-5%e5%9b%9e%e6%96%87%e8%b4%a8%e6%95%b0-prime-palindromes%ef%bc%88%e8%b6%85%e5%85%b8%e5%9e%8b%e7%9a%84%e6%89%93%e8%a1%a8%e9%a2%98%e5%80%bc%e5%be%97%e5%ad%a6%e4%b9%a0%ef%bc%81%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>filp game （枚举法，DFS深搜，位运算，高斯消元）详解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/04/filp-game-%ef%bc%88%e6%9e%9a%e4%b8%be%e6%b3%95%e6%88%96dfs%e6%b7%b1%e6%90%9c%ef%bc%89/</link>
		<pubDate>Sun, 04 Aug 2019 15:28:07 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=641</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>题目来源：ZOJ2025 或 POJ1753</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>题目大意：给定一个 4 × 4 的棋盘，每个位置给了放好棋子，棋子有两个面，按规则进行翻转，使所有棋子都是同一个面。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>解题思路：第一次接触到这种题目，刚开始是一点思路都是没有的，这是实话。翻阅网上的题解，发现这一题最长出现的标签是枚举，和深搜，那么我们不妨从枚举与深搜这个角度去看着一题目（该题还有其他解法）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>枚举：即列举出所有的可能性，然后进行判断，输出符号题目条件的，那么这一题该怎么枚举呢，这是一个4 × 4的棋盘，那么棋盘大小我们是很确定的知道的，很明显这个 4 × 4 必然与枚举的范围是有关的，因为是翻转棋子，所以每个棋子只有两种情况就是 翻 或者 不翻</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2（第一个棋子两种可能） * 2（第二个棋子两种可能） * 2（第三个棋子两种可能）* ... ... * 2（第16个棋子两种可能）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>那么总的可能数就得2<sup>16</sup>，只需要枚举出所有的可能数就好了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>（有人直接用for循环写，是真的刚）</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>那么就要开始于dfs结合（可以参考下dfs的模板，如果不太会写的话）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>void dfs()//参数用来表示状态  
{  
    if(到达终点状态)  
    {  
        ...//根据题意添加  
        return;  
    }  
    if(越界或者是不合法状态)  
        return;  
    if(特殊状态)//剪枝
        return ;
    for(扩展方式)  
    {  
        if(扩展方式所达到状态合法)  
        {  
            修改操作;//根据题意来添加  
            标记；  
            dfs（）；  
            (还原标记)；  
            //是否还原标记根据题意  
            //如果加上（还原标记）就是 回溯法  
        }  
 
    }  
}  </code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>我们的终点状态很容易知道就是一个棋子都不翻，但16个棋子已经是同一个面了</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>棋盘有大小限制，所以越界状态也很容易清楚了，代码如下</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>bool dfs(int n, int i, int j){
    //翻 n 个棋子，棋子的坐标为 i 行， j 列
    if(n == 0)
    {
        return check();//判断是否符合条件
    }
    //从翻16个棋子开始逐一减少
    //一个棋子都不用翻

    j += 1; //下一列每次搜下一列，如果不加的话会超时，就是dfs出不去
//越界情况
    if(j > 4){
        i += 1;
        j = 1;
    }
    if(i > 4){
        return false;
    }
    //如果超过棋盘大小则重置
    for(; i &lt;= 4; i++){
        for(; j &lt;= 4; j++){
            flip(i,j);//翻转
            if( dfs(n-1, i, j)){
                return true;//如果符合条件就直接返回true这个值了
            }
//不符合条件那再翻转回去
            flip(i,j);//翻转
        }
j = 1;
    }
    return false;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph {"textColor":"vivid-red","backgroundColor":"very-light-gray"} -->
<p class="has-text-color has-background has-vivid-red-color has-very-light-gray-background-color">Q:如何处理输入的字符棋盘呢？</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"very-dark-gray"} -->
<p class="has-text-color has-very-dark-gray-color">A：化简成数字 0 与 1，由于棋子只存在两种状态 0 态 与 1 态，异或便成为了一个很好地选择</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"vivid-red","backgroundColor":"very-light-gray","fontSize":"medium"} -->
<p class="has-text-color has-background has-medium-font-size has-vivid-red-color has-very-light-gray-background-color">关于异或的介绍</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color"><strong>按位或运算符</strong><br>    按位或运算将两个运算分量的对应位按位遵照以下规则进行计算：<br>     0 | 0 = 0, 0 | 1 = 1, 1 | 0 = 1, 1 | 1 = 1<br>即只要有1个是1的位，结果为1，否则为0。</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>注意：只比较最后一位，所以可以省略很多步骤 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"backgroundColor":"very-light-gray"} -->
<p class="has-background has-very-light-gray-background-color"><strong>按位异或运算符(^)</strong><br>    按位异或运算将两个运算分量的对应位按位遵照以下规则进行计算：<br>     0 ^ 0 = 0, 0 ^ 1 = 1, 1 ^ 0 = 1, 1 ^ 1 = 0<br>即相应位的值相同的，结果为 0，不相同的结果为 1。 </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>这个则是每个位置都比较</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>接下来就是翻转部分的函数，每次我翻转（i， j）位置的棋子， 上下左右（需在范围内）的棋子都要发生翻转</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>不妨将每一行都看作是一个数（16进制数），因为16进制数每四位是一位数，刚好与棋盘大小相符合，例如 一行棋子1 0 0 1 如果要对第二位进行翻转的话就要用0 1 0 0（16进制）就是 8，那么我们很容易得到帮助翻转的状态数</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>int state[][4] ={ {8, 4, 2, 1},{12, 14, 7, 3}}; // 1000 ,  0100,  0010,  0001</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//翻转函数
void flip(int i, int j){
    --j;
    //对(i, j)位置的棋子进行翻转
    CheckerBoard[i-1] ^= state[0][j];
    CheckerBoard[i+1] ^= state[0][j];
    CheckerBoard[i]   ^= state[1][j];
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>判断函数，就是每行16进制数都等于0或者15（因为1111是15的16进制数）</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>bool check(){
    /*
    0 0 0 0
    0 0 0 0
    0 0 0 0
    0 0 0 0
    0
    1 1 1 1
    1 1 1 1
    1 1 1 1
    1 1 1 1
    8+4+2+1 == 15
    */
    return ((CheckerBoard[1] == 0 || CheckerBoard[4] == 15) &amp;&amp; CheckerBoard[1] == CheckerBoard[2] &amp;&amp; CheckerBoard[2] == CheckerBoard[3] &amp;&amp; CheckerBoard[3] == CheckerBoard[4]);
}</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>//ac代码poj是无法用万能头文件的，会ce
#include &lt;iostream>
#include &lt;algorithm>

#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

//位运算的解法

using namespace std;
int CheckerBoard[8];

void read(){
    REP_(i, 1, 4){
        REP_(j, 1, 4){
            //cout &lt;&lt; "after change :" &lt;&lt; CheckerBoard[i] &lt;&lt; '\n';
            CheckerBoard[i] &lt;&lt;= 1;
            //cout &lt;&lt; "now :" &lt;&lt; CheckerBoard[i] &lt;&lt; '\n';
            if(getchar() == 'b'){
                CheckerBoard[i] |= 1; //与1相或,于是就只改变最后一位
            }

        } getchar();//读取换行符号
    }
    return;
}
//每一行压缩一个数字，对第 i 行第 j 列棋子进行翻转，
//比如j = 2 j = 2，则(i−1 、 i+1)行的棋子应该和4（0100）相异或（与1异或切换状态，与0异或不改变）
//，而第 i 行棋子应与14（1110）相异或。
int state[][4] ={ {8, 4, 2, 1},{12, 14, 7, 3}};//1000, 0100, 0010, 0001,
void flip(int i, int j){
    --j;
    //对(i, j)位置的棋子进行翻转
    CheckerBoard[i-1] ^= state[0][j];
    CheckerBoard[i+1] ^= state[0][j];
    CheckerBoard[i]   ^= state[1][j];
}
bool check(){
    /*
    0 0 0 0
    0 0 0 0
    0 0 0 0
    0 0 0 0
    0
    1 1 1 1
    1 1 1 1
    1 1 1 1
    1 1 1 1
    8+4+2+1 == 15
    */
    return ((CheckerBoard[1] == 0 || CheckerBoard[4] == 15) &amp;&amp; CheckerBoard[1] == CheckerBoard[2] &amp;&amp; CheckerBoard[2] == CheckerBoard[3] &amp;&amp; CheckerBoard[3] == CheckerBoard[4]);
}

bool dfs(int n, int i, int j){
    //翻 n 个棋子
    if(n == 0)
    {
        return check();//判断是否符合条件
    }
    //从翻16个棋子开始逐一减少
    //一个棋子都不用翻

    j += 1; //下一列, 如果不加则会超时

    if(j > 4){
        i += 1;
        j = 1;
    }
    if(i > 4){
        return false;
    }
    //如果超过棋盘大小则重置
    for(; i &lt;= 4; i++){
        for(; j &lt;= 4; j++){
            flip(i,j);//翻转
            if( dfs(n-1, i, j)){
                return true;
            }
            flip(i,j);//翻转
        }
    j = 1;
    }
    return false;
}
void slove(){
    for(int i = 0; i &lt;= 16; i++){
        if(dfs(i, 1, 0)){
            cout &lt;&lt; i &lt;&lt; '\n';
            return ;
        }

    }
    cout &lt;&lt; "Impossible" &lt;&lt; '\n';
}
int main(){
    read();
    slove();
    return 0;
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>641</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 15:28:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 15:28:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[filp-game-%ef%bc%88%e6%9e%9a%e4%b8%be%e6%b3%95%e6%88%96dfs%e6%b7%b1%e6%90%9c%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="acm-poj"><![CDATA[acm-poj]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-07-27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>hdu 5878 - I Count Two Three（模拟，枚举）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/13/hdu-5878-i-count-two-three%ef%bc%88%e6%a8%a1%e6%8b%9f%ef%bc%8c%e6%9e%9a%e4%b8%be%ef%bc%89/</link>
		<pubDate>Tue, 13 Aug 2019 16:18:20 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;
<div>传送门</div>
<div><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5878">http://acm.hdu.edu.cn/showproblem.php?pid=5878</a></div>
<div></div>
<div>

题意：已给一个公式 <!--StartFragment -->
<div><span id="MathJax-Element-5-Frame" class="MathJax" style="display: inline-table; font-style: normal; font-weight: 400; line-height: normal; font-size: 18px; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: 0px; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; color: #000000; font-family: Merriweather, serif; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; widows: 2; -webkit-text-stroke-width: 0px; background-color: rgba(210, 210, 255, 0.5); text-decoration-style: initial; text-decoration-color: initial; position: relative;" tabindex="0" role="presentation" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mn&gt;7&lt;/mn&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msup&gt;&lt;/math&gt;"><span id="MathJax-Span-30" class="math"><span id="MathJax-Span-31" class="mrow"><span id="MathJax-Span-32" class="msubsup"><span id="MathJax-Span-33" class="mn">2^</span><span id="MathJax-Span-34" class="mi">a * </span></span><span id="MathJax-Span-35" class="msubsup"><span id="MathJax-Span-36" class="mn">3^</span><span id="MathJax-Span-37" class="mi">b * </span></span><span id="MathJax-Span-38" class="msubsup"><span id="MathJax-Span-39" class="mn">5^</span><span id="MathJax-Span-40" class="mi">c * </span></span><span id="MathJax-Span-41" class="msubsup"><span id="MathJax-Span-42" class="mn">7^</span><span id="MathJax-Span-43" class="mi">d</span></span></span></span></span></div>
<div>输入n求解满足该式子的最小整数是多少，n 的范围为 1e9</div>
</div>
Sample Input
<pre>10
1
11
13
123
1234
12345
123456
1234567
12345678
123456789</pre>
Sample Output
<pre class="">1
12
14
125
1250
12348
123480
1234800
12348000
123480000
</pre>
[giligili_post ids=""]解题思路一，枚举出所有的数据储存在数组里，然后根据输入的 n 用二分法输出，在网上有这样的题解还写了ac代码，然而是不行因为代码长度过长连提交都不行
<pre class="pure-highlightjs"><code class="cpp">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
ll a[100225] = {};
 
int main()
{
    int t,n;
    cin &gt;&gt; t;
    while(t--)
    {
        scanf("%d",&amp;n);
        int pos = lower_bound(a,a+5193,n) - a;
        printf("%lld\n",a[pos]);
    }
    return 0;
}</code></pre>
&nbsp;

&nbsp;

正确的解法：就是枚举以及合理的剪枝，注意数据的范围就可以了，超出范围的跳出即可，每层循环判断一次当前数据是否超出题目所给的数据范围，如果超出了就直接进行下一次循环，这么多层剪枝很好地避免了数据过大爆炸以及运行时间过长的问题
<pre class="pure-highlightjs"><code class="cpp">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
#define ll long long
#define inf 1e9+7
//0xffff
ll a[500050];
int cnt = 0;
int main()
{
        for(int i = 0; i &lt;= 33; i++)
    {
        if(pow(2,i) &gt;= inf)
            break;
        for(int j = 0; j &lt;= 33; j++)
        {
            if(pow(2, i) * pow(3, j) &gt;= inf)
                break;
            for(int k = 0; k &lt;= 33 ; k++)
            {
                if(pow(2, i) * pow(3, j) * pow(5, k) &gt;= inf)
                    break;
                for(int l = 0; l &lt;= 33; l++)
                {
                    if(pow(2.0,i)*pow(3.0,j)*pow(5.0,k)*pow(7.0,l) &gt;= inf)
                        break;
                    else
                        a[cnt++] = pow(2.0,i)*pow(3.0,j)*pow(5.0,k)*pow(7.0,l);
                }
            }
        }
    }
    sort(a, a + cnt);
    int t;
    scanf("%d", &amp;t);
    while(t--)
    {
        ll n;
        sl(n)
        printf("%lld\n",a[lower_bound(a, a+cnt, n) - a]);
    }
}
</code></pre>
&nbsp;

&nbsp;

关于lower_bound函数，是stl库里面已经帮用户设计编好的二分查找函数，查找容器内的某个值

lower_bound(a.begin(), a.end(), n) 该函数返回的是大于等于n的第一个地址，如果要输出这个地址上的值可以用a[lower_bound(a, a+cnt, n) - a]或者*lower_bound(a.begin(), a.end(), n)

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date><![CDATA[2019-08-13 16:18:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-13 16:18:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hdu-5878-i-count-two-three%ef%bc%88%e6%a8%a1%e6%8b%9f%ef%bc%8c%e6%9e%9a%e4%b8%be%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hdu"><![CDATA[hdu]]></category>
		<category domain="post_tag" nicename="stl"><![CDATA[stl]]></category>
		<category domain="post_tag" nicename="%e5%89%aa%e6%9e%9d"><![CDATA[剪枝]]></category>
		<category domain="post_tag" nicename="%e6%9e%9a%e4%b8%be"><![CDATA[枚举]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[giligili_post_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019年8月15-2019年8月16日</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/15/2019%e5%b9%b48%e6%9c%8815-2019%e5%b9%b48%e6%9c%8816%e6%97%a5/</link>
		<pubDate>Thu, 15 Aug 2019 16:50:21 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=698</guid>
		<description></description>
		<content:encoded><![CDATA[记录一下这段时间的想法和心情，希望以后回想起来的时候有所回忆吧

15号早上科目四挂了，挺遗憾的也挺可惜的，下次考试至少是十天以后了，实在是不应该，可能是人生中比经历的事情，是我自己的问题

以后的你要去重视每一件你计划完成的事情，

你要有责任心，

你要花时间准备，

你要学会专注用心，

你成年了，不是小孩子了]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>698</wp:post_id>
		<wp:post_date><![CDATA[2019-08-15 16:50:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-15 16:50:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019%e5%b9%b48%e6%9c%8815-2019%e5%b9%b48%e6%9c%8816%e6%97%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%94%9f%e6%b4%bb"><![CDATA[生活]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Pilots Brothers&#039; refrigerator（DFS， 枚举）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/16/the-pilots-brothers-refrigerator%ef%bc%88dfs%ef%bc%8c-%e6%9e%9a%e4%b8%be%ef%bc%89/</link>
		<pubDate>Fri, 16 Aug 2019 09:39:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=700</guid>
		<description></description>
		<content:encoded><![CDATA[传送门：<a href="http://poj.org/problem?id=2965">http://poj.org/problem?id=2965</a>

枚举与DFS的基础题目

<!--more-->

题目大意：一共有16个开关，每个开关都有两种状态，可以对状态进行改变，改变该位置的状态，会导致该列与该行上的所有开关都发生状态改变，求解达到全部都为一个状态所需的最小步骤以及操作的开关是哪几个
<p class="pst">Sample Input</p>

<pre class="sio">-+--
----
----
-+--</pre>
<p class="pst">Sample Output</p>

<pre class="sio">6
1 1
1 3
1 4
4 1
4 3
4 4</pre>
解题思路：

由题目就可以很容易的明白每个开关只有两种选择翻转与不翻转，翻转两次与不翻转是相同的结果，对于每个位置都进行一次判断，搜索下去即可。

解题方法：

状态压缩，将这16个位置的状态压缩成一个数字，通过异或对状态进行改变
<pre class="lang:c++ decode:true  " title="The Pilots Brothers' refrigerator">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;

#define inf 0xFFFF
typedef long long ll;

using namespace std;
int check;//因为是整行的所以，合并成一个数字进行翻转。十六进制数

void read()
{
//状态输入
    char tmp;
    REP(i, 0, 4)
    {
        REP(j, 0, 4)
        {

            check &lt;&lt;= 1;
            //cin &gt;&gt; tmp;
            if(getchar() == '-')
                check |= 1;
        }
        getchar();
    }
}
void flip(int i, int j)
{
//对该行该列进行翻转，十六进制
    check ^= 0x000F   &lt;&lt; (i&lt;&lt;2);
    check ^= 0x1111   &lt;&lt; j;
    check ^= (0x1&lt;&lt;j) &lt;&lt; (i&lt;&lt;2);
}

bool CheckJudge()
{
    return check == 0xFFFF;
}
bool dfs(int n,int &amp;k, int i, int j)
{
    if(n == 0)
    {
        return CheckJudge() &amp;&amp; (cout &lt;&lt; k &lt;&lt; '\n');
    }
    if(j == 4)
    {
        ++i;
        j = 0;
    }
    for(; i &lt; 4; ++i)
    {
        for(; j &lt; 4; ++j)
        {
            flip(i, j);
            if(dfs(n-1, k, i, j+1))
            {
                cout &lt;&lt; 4-i &lt;&lt; " " &lt;&lt; 4-j &lt;&lt; '\n';
                return true;
            }
            flip(i, j);//翻两次等于没有翻
        }
        j = 0;//从第一列再重新开始
    }
    return false;
    //如果以上都没有就说明false
}
void slove(){
    for(int i = 0; i &lt;= 16; ++i)
    {
        if(dfs(i, i, 0, 0))
            return;
    }
}
int main()
{
    read();
    /*for(int i = 1; i &lt; 5; i++){
        cout &lt;&lt; check[i] &lt;&lt; '\n';
    }*/
    slove();
    return 0;
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>700</wp:post_id>
		<wp:post_date><![CDATA[2019-08-16 09:39:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-16 09:39:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-pilots-brothers-refrigerator%ef%bc%88dfs%ef%bc%8c-%e6%9e%9a%e4%b8%be%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="acm-poj"><![CDATA[acm-poj]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>标签</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/16/%e6%a0%87%e7%ad%be/</link>
		<pubDate>Fri, 16 Aug 2019 09:46:49 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=705</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>705</wp:post_id>
		<wp:post_date><![CDATA[2019-08-16 09:46:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-16 09:46:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a0%87%e7%ad%be]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="acm"><![CDATA[acm]]></category>
		<category domain="post_tag" nicename="bilibili%e6%b2%89%e8%bf%b7%e8%80%85"><![CDATA[bilibili沉迷者]]></category>
		<category domain="post_tag" nicename="csgo"><![CDATA[csgo]]></category>
		<category domain="post_tag" nicename="oi"><![CDATA[oi]]></category>
		<category domain="post_tag" nicename="%e5%96%9c%e6%ac%a2%e7%9d%a1%e8%a7%89"><![CDATA[喜欢睡觉]]></category>
		<category domain="post_tag" nicename="%e5%ad%a6%e7%94%9f"><![CDATA[学生]]></category>
		<category domain="post_tag" nicename="%e6%87%92"><![CDATA[懒]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e7%9a%87"><![CDATA[欧皇]]></category>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb"><![CDATA[生活]]></category>
		<category domain="post_tag" nicename="%e7%a0%81%e5%86%9c"><![CDATA[码农]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>（海岛代码解析）POJ1328 UVA1193 UVALive2519 ZOJ1360 Radar Installation（贪心）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/17/%ef%bc%88%e6%b5%b7%e5%b2%9b%e4%bb%a3%e7%a0%81%e8%a7%a3%e6%9e%90%ef%bc%89poj1328-uva1193-uvalive2519-zoj1360-radar-installation%ef%bc%88%e8%b4%aa%e5%bf%83%ef%bc%89/</link>
		<pubDate>Sat, 17 Aug 2019 17:59:59 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=708</guid>
		<description></description>
		<content:encoded><![CDATA[<div lang="en-US">海岛题解：<a href="https://blog.csdn.net/tigerisland45/article/details/79811599">https://blog.csdn.net/tigerisland45/article/details/79811599</a></div>
<div class="ptt" lang="en-US">Radar Installation</div>
<div class="plm">
<table align="center">
<tbody>
<tr>
<td><b>Time Limit:</b> 1000MS</td>
<td width="10px"></td>
<td><b>Memory Limit:</b> 10000K</td>
</tr>
<tr>
<td><b>Total Submissions:</b> 124741</td>
<td width="10px"></td>
<td><b>Accepted:</b> 27580</td>
</tr>
</tbody>
</table>
</div>
<p class="pst">Description</p>

<div class="ptx" lang="en-US">Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d.

We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates.
<center><img src="http://poj.org/images/1328_1.jpg" />
Figure A Sample Input of Radar Installations</center>

</div>
<p class="pst">Input</p>

<div class="ptx" lang="en-US">The input consists of several test cases. The first line of each case contains two integers n (1&lt;=n&lt;=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases.

The input is terminated by a line containing pair of zeros</div>
<p class="pst">Output</p>

<div class="ptx" lang="en-US">For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. "-1" installation means no solution for that case.</div>
<p class="pst">Sample Input</p>

<pre class="sio">3 2
1 2
-3 1
2 1

1 2
0 2

0 0
</pre>
<p class="pst">Sample Output</p>

<pre class="sio">Case 1: 2
Case 2: 1
</pre>
<p class="pst">Source</p>

<div class="ptx" lang="en-US"><a href="http://poj.org/searchproblem?field=source&amp;key=Beijing+2002">Beijing 2002</a></div>
<div lang="en-US"></div>
<div lang="en-US">传送门：<a href="http://poj.org/problem?id=1328">http://poj.org/problem?id=1328</a></div>
<div lang="en-US"></div>
<div lang="en-US">问题大意:</div>
<div lang="en-US">在海岸线上安放最少的雷达但要求覆盖所有的海岛，输出最少安放的雷达数，如果无法满足则输出-1</div>
<div lang="en-US"></div>
<div lang="en-US"></div>
<div lang="en-US">解析代码：</div>
<div lang="en-US">
<pre class="lang:c++ decode:true ">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;limits.h&gt;
#include &lt;float.h&gt;
#include &lt;math.h&gt;

using namespace std;

const int N = 1000;
//结构体重载运算符
struct Radar {
    float start, end;
    bool operator &lt; (const Radar&amp; a) const {
        return (end != a.end) ? end &lt; a.end : start &gt; a.start;
        //对雷达进行排序
    }
} radar[N];
/*
    问题：在海岸线上安放最少的雷达但要求覆盖所有的海岛，输出最少安放的雷达数，如果无法满足则输出-1
*/
int main()
{
    int n, d, caseno = 0;

    while(cin &gt;&gt; n &gt;&gt; d &amp;&amp; (n || d)) {
        int ans = 0;
    //统计答案
        int x, y, maxy = INT_MIN;
        //maxy赋最小值
        for(int i=0; i&lt;n; i++) {
            cin &gt;&gt; x &gt;&gt; y;
            maxy = max(maxy, y);
            //输入位置，记录最大的垂直距离
            float len = sqrt(1.0 * d * d - y * y);
            radar[i].start = x - len;
            radar[i].end = x + len;
        }
//如果最大垂直距离超出范围的话就直接输出答案-1
        if(maxy &gt; d || d &lt; 0)
            ans = -1;
        else {
            //对其进行排序
            sort(radar, radar + n);

            float end = -FLT_MAX;
            for(int i=0; i&lt;n; i++) {
                if(end &lt; radar[i].start) {
                    end = radar[i].end;
                    ans++;
                }
            }
        }

        cout &lt;&lt; "Case " &lt;&lt; ++caseno &lt;&lt; ": " &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</pre>
&nbsp;

</div>
<div lang="en-US"></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>708</wp:post_id>
		<wp:post_date><![CDATA[2019-08-17 17:59:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-17 17:59:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ef%bc%88%e6%b5%b7%e5%b2%9b%e4%bb%a3%e7%a0%81%e8%a7%a3%e6%9e%90%ef%bc%89poj1328-uva1193-uvalive2519-zoj1360-radar-installation%ef%bc%88%e8%b4%aa%e5%bf%83%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="acm-poj"><![CDATA[acm-poj]]></category>
		<category domain="post_tag" nicename="poj"><![CDATA[poj]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
		<category domain="post_tag" nicename="%e8%b4%aa%e5%bf%83"><![CDATA[贪心]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Power of Cryptography（数论）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/08/19/power-of-cryptography%ef%bc%88%e6%95%b0%e8%ae%ba%ef%bc%89/</link>
		<pubDate>Mon, 19 Aug 2019 04:08:41 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=710</guid>
		<description></description>
		<content:encoded><![CDATA[<p class="pst">Description</p>

<div class="ptx" lang="en-US">Current work in cryptography involves (among other things) large prime numbers and computing powers of numbers among these primes. Work in this area has resulted in the practical use of results from number theory and other branches of mathematics once considered to be only of theoretical interest.
This problem involves the efficient computation of integer roots of numbers.
Given an integer n&gt;=1 and an integer p&gt;= 1 you have to write a program that determines the n th positive root of p. In this problem, given such integers n and p, p will always be of the form k to the n<sup>th</sup>. power, for an integer k (this integer is what your program must find).</div>
<p class="pst">Input</p>

<div class="ptx" lang="en-US">The input consists of a sequence of integer pairs n and p with each integer on a line by itself. For all such pairs 1&lt;=n&lt;= 200, 1&lt;=p&lt;10<sup>101</sup> and there exists an integer k, 1&lt;=k&lt;=10<sup>9</sup> such that k<sup>n</sup> = p.</div>
<p class="pst">Output</p>

<div class="ptx" lang="en-US">For each integer pair n and p the value k should be printed, i.e., the number k such that k n =p.</div>
<p class="pst">Sample Input</p>

<pre class="sio">2 16
3 27
7 4357186184021382204544</pre>
<p class="pst">Sample Output</p>

<pre class="sio">4
3
1234</pre>
<p class="pst">Source</p>

<div class="ptx" lang="en-US"><a href="http://poj.org/searchproblem?field=source&amp;key=M%C3%A9xico+and+Central+America+2004">México and Central America 2004</a></div>
<div lang="en-US"></div>
<div lang="en-US"></div>
<h2 lang="en-US">题目大意：</h2>
<h3>已知公式 k^n =p, 输入 n 与 p 求解 k 的值并输出</h3>
<h2 lang="en-US">解题思路：</h2>
<h3 lang="en-US">k = p ^ (1/n), 注意数据范围即可</h3>
<div lang="en-US"></div>
<div lang="en-US">
<pre class="lang:c++ decode:true ">#include &lt;functional&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;numeric&gt;
#include &lt;cstring&gt;
#include &lt;climits&gt;
#include &lt;cassert&gt;
#include &lt;complex&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;bitset&gt;
#include &lt;queue&gt;
#include &lt;stack&gt;
#include &lt;cmath&gt;
#include &lt;ctime&gt;
#include &lt;list&gt;
#include &lt;set&gt;
#include &lt;map&gt;

//#include &lt;tr1/unordered_set&gt;
//#include &lt;tr1/unordered_map&gt;
//#include &lt;array&gt;

using namespace std;

#define REP(i, n) for (int i=0;i&lt;n;++i)
#define FOR(i, a, b) for (int i=a;i&lt;b;++i)
#define DWN(i, b, a) for (int i=b-1;i&gt;=a;--i)
#define REP_1(i, n) for (int i=1;i&lt;=n;++i)
#define FOR_1(i, a, b) for (int i=a;i&lt;=b;++i)
#define DWN_1(i, b, a) for (int i=b;i&gt;=a;--i)
#define REP_C(i, n) for (int n____=n,i=0;i&lt;n____;++i)
#define FOR_C(i, a, b) for (int b____=b,i=a;i&lt;b____;++i)
#define DWN_C(i, b, a) for (int a____=a,i=b-1;i&gt;=a____;--i)
#define REP_N(i, n) for (i=0;i&lt;n;++i)
#define FOR_N(i, a, b) for (i=a;i&lt;b;++i)
#define DWN_N(i, b, a) for (i=b-1;i&gt;=a;--i)
#define REP_1_C(i, n) for (int n____=n,i=1;i&lt;=n____;++i)
#define FOR_1_C(i, a, b) for (int b____=b,i=a;i&lt;=b____;++i)
#define DWN_1_C(i, b, a) for (int a____=a,i=b;i&gt;=a____;--i)
#define REP_1_N(i, n) for (i=1;i&lt;=n;++i)
#define FOR_1_N(i, a, b) for (i=a;i&lt;=b;++i)
#define DWN_1_N(i, b, a) for (i=b;i&gt;=a;--i)
#define REP_C_N(i, n) for (int n____=(i=0,n);i&lt;n____;++i)
#define FOR_C_N(i, a, b) for (int b____=(i=0,b);i&lt;b____;++i)
#define DWN_C_N(i, b, a) for (int a____=(i=b-1,a);i&gt;=a____;--i)
#define REP_1_C_N(i, n) for (int n____=(i=1,n);i&lt;=n____;++i)
#define FOR_1_C_N(i, a, b) for (int b____=(i=a,b);i&lt;=b____;++i)
#define DWN_1_C_N(i, b, a) for (int a____=(i=b,a);i&gt;=a____;--i)

#define ECH(it, A) for (__typeof((A).begin()) it=(A).begin(); it != (A).end(); ++it)
#define rECH(it, A) for (__typeof((A).rbegin()) it=(A).rbegin(); it != (A).rend(); ++it)
#define REP_S(i, str) for (char*i=str;*i;++i)
#define REP_L(i, hd, suc) for (int i=hd;i;i=suc[i])
#define REP_G(i, u) REP_L(i,hd[u],suc)
#define REP_SS(x, s) for (int x=s;x;x=(x-1)&amp;s)
#define DO(n) for ( int ____n = n; ____n--&gt;0; )
#define REP_2(i, j, n, m) REP(i, n) REP(j, m)
#define REP_2_1(i, j, n, m) REP_1(i, n) REP_1(j, m)
#define REP_3(i, j, k, n, m, l) REP(i, n) REP(j, m) REP(k, l)
#define REP_3_1(i, j, k, n, m, l) REP_1(i, n) REP_1(j, m) REP_1(k, l)
#define REP_4(i, j, k, ii, n, m, l, nn) REP(i, n) REP(j, m) REP(k, l) REP(ii, nn)
#define REP_4_1(i, j, k, ii, n, m, l, nn) REP_1(i, n) REP_1(j, m) REP_1(k, l) REP_1(ii, nn)

#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
#define CPY(A, B) memcpy(A, B, sizeof(A))
#define INS(A, P, B) A.insert(A.begin() + P, B)
#define ERS(A, P) A.erase(A.begin() + P)
#define LBD(A, x) (lower_bound(ALL(A), x) - A.begin())
#define UBD(A, x) (upper_bound(ALL(A), x) - A.begin())
#define CTN(T, x) (T.find(x) != T.end())
#define SZ(A) int((A).size())
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define PTT pair&lt;T, T&gt;
#define Ts *this
#define rTs return Ts
#define fi first
#define se second
#define re real()
#define im imag()


typedef long long LL;
//typedef long double DB;
typedef double DB;

// k^n =p
int main()
{
    double n, p;
    while(cin &gt;&gt; n &gt;&gt; p){
        cout &lt;&lt; pow(p, 1/n) &lt;&lt; '\n';
    }
}
</pre>
&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>710</wp:post_id>
		<wp:post_date><![CDATA[2019-08-19 04:08:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-19 04:08:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[power-of-cryptography%ef%bc%88%e6%95%b0%e8%ae%ba%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="acm-poj"><![CDATA[acm-poj]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>十大排序算法的历史与详解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/02/%e4%b9%9d%e5%a4%a7%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95%e7%9a%84%e5%8e%86%e5%8f%b2%e4%b8%8e%e8%af%a6%e8%a7%a3/</link>
		<pubDate>Mon, 02 Sep 2019 01:03:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=715</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>排序算法</h1>
<h2>一、冒泡排序</h2>
（经常csdn上会有这种标题《面试官:连个<em>冒泡排序</em>都写不出来,你这五年都干些什么了?》，在我看来冒泡排序应该是每个初学者应该学会的最最最为基础的算法，也是排序算法中最为基础的算法，因此特将冒泡排序算法放在第一位，要是真的在面试中不会冒泡的话，没有建议）
<h3>1.历史：无</h3>
&nbsp;
<h3>2.动图演示：</h3>
<img src="https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.webp" />

&nbsp;
<h3>3.算法思路：</h3>
<h4>（1）原理：</h4>
冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
<h4>（2）时间复杂度分析：</h4>
考虑最坏的时间复杂度情况
<h5>  1）如果n为偶数</h5>
<strong>  3* n/2*(n+1) -n=3/2(n^2+n)-n=1/2(3n^2+n)</strong>
<h5>  2）如果n为奇数</h5>
<strong> 3((n-1)/2 *n+（n+1)/2)-n=3/2(n^2+1)-n=1/2(3n^2-2n+3)</strong>

所以最差的情况的时间复杂度为O（N^2）
<h3> 4.代码实现</h3>
<h4>（1）解释：该代码为按从小到大的规则对于数组进行冒泡排序</h4>
<pre class="lang:c++ decode:true">#include &lt;iostream&gt;
using namespace std;
int main () {
	int n;
	cin &gt;&gt; n;
	int *p = new int [n];
	for(int i = 0; i &lt; n; i++) {
		cin &gt;&gt; p[i];
	}
	/*冒泡排序*/
	for(int i = 0; i &lt; n; i++) {
		for(int j = 0; j &lt; n - 1 - i; j++) {
			if(p[j] &gt; p[j + 1]) {
				swap(p[j] , p[j + 1]);
			}
		}
	}

	for(int i = 0 ; i &lt; n; i++ ) {
		cout &lt;&lt; p[i] &lt;&lt; " ";
	}
}
</pre>
&nbsp;
<h2>二、选择排序</h2>
<h3>1.历史：</h3>
&nbsp;
<h3>2.动图演示：</h3>
&nbsp;
<h3>3.算法思路：</h3>
&nbsp;
<h2>三、插入排序</h2>
<h3>1.历史：</h3>
&nbsp;
<h3>2.动图演示：</h3>
&nbsp;

&nbsp;
<h3>3.算法思路：</h3>
<h2></h2>
<h2></h2>
<h2>四、归并排序</h2>
<h3>1.历史：</h3>
&nbsp;
<h3>2.动图演示：</h3>
&nbsp;

&nbsp;

算法思路：

&nbsp;

&nbsp;

&nbsp;
<h2>五、快速排序</h2>
历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：
<h2></h2>
<h2>六、堆排序</h2>
历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：

&nbsp;

&nbsp;
<h2>七、希尔排序</h2>
&nbsp;

历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：

&nbsp;

&nbsp;
<h2>八、桶排序</h2>
&nbsp;

历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：

&nbsp;

&nbsp;
<h2>九、基数排序</h2>
&nbsp;

历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：

&nbsp;

&nbsp;
<h2>十、归并排序</h2>
历史：

&nbsp;

动图演示：

&nbsp;

&nbsp;

算法思路：

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date><![CDATA[2019-09-02 01:03:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-02 01:03:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b9%9d%e5%a4%a7%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95%e7%9a%84%e5%8e%86%e5%8f%b2%e4%b8%8e%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%8e%92%e5%ba%8f"><![CDATA[排序]]></category>
		<category domain="post_tag" nicename="%e6%8e%92%e5%ba%8f"><![CDATA[排序]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[719]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019 icpc acm 南京站网络赛（补题）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/2019-icpc-acm-%e5%8d%97%e4%ba%ac%e7%ab%99%e7%bd%91%e7%bb%9c%e8%b5%9b%ef%bc%88%e8%a1%a5%e9%a2%98%ef%bc%89/</link>
		<pubDate>Tue, 03 Sep 2019 01:26:26 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=724</guid>
		<description></description>
		<content:encoded><![CDATA[以下补题不以比赛时题目顺序解答，但会保证标注题目序号，未完成题目会不定期补全，有疑问请联系qq微信或者邮箱

比赛链接：
<h2>I 题 - Washing clothes</h2>
<h3>题目分类：</h3>
贪心、模拟
<h3>题目链接：</h3>
<a href="https://nanti.jisuanke.com/t/41306">https://nanti.jisuanke.com/t/41306</a>
<h3>题目大意:</h3>
题目给与N，表示N个人要洗N件衣服， y表示手洗方式每个人要y分钟，第二行输入N个数字表示每个人到达的时间分别为 t1, t2, t3 ... tn

假设洗衣机洗一件衣服的时间 x， (1&lt;=  x &lt;= y) 求解每种x洗衣机洗衣服时间下，输出最少洗衣服所需要花费的时间
<h3>数据范围：</h3>
1 ≤ N ≤ 10^6

∑N, ∑y ≤ 10^6

1 ≤ ti ≤ 10^9

比赛时，（非ac代码）
<h3>求解思路：</h3>
模拟方法，模拟每个过程，因为每个人到达的时间有早有晚又或者一样，所以不妨对时间到达时间进行排序，只有到达了才能洗，所以洗完所有衣服的时间和最后一个到达的人是息息相关的。我的想法是每个人到达时对洗衣机是否空闲进行一下判断，然后对手洗快，还是等洗衣机再洗完衣服快,对时间进行加减或者是覆盖

代码（超时）2020ms(时间限制是2000ms)

但我个人觉得代码逻辑也有很大的问题
<pre class="lang:c++ decode:true">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int t[1000100];
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, y;
    cin &gt;&gt; n &gt;&gt; y;
    REP(i, 0, n)
    {
        cin &gt;&gt; t[i];
    }
    //输入每个人到达的时间

    sort(t, t+n, greater&lt;int&gt;());
    //对每个人的到达时间进行一个排序
    //先到的先进行操作

    REP_(x, 1, y)
    {
        //使用洗衣服的时间x范围是1，n之间
        int  time = 0, betweentime = 0
                                     ;
        //洗衣服需要花费的总时间
        for(int i = 0; i &lt; n; i++)
        {
            //第一个人到达了
            if(i == 0)
            {
                //第一个人一定可以使用洗衣机洗
                time += t[i] + x;
                betweentime = t[i] + x;//这段时间内都不可以使用洗衣机洗衣服

            }
            else
            {
                //非第一个人洗
                //这个人到达的时候，洗衣机还在被使用，所以判断一下用手洗好还是用洗衣机洗比较好
                if(betweentime + x &lt; t[i]+y)
                {
                    time = betweentime + x;
                    betweentime += x;
                    //用洗衣机洗了
                }
                else if(t[i] + y &lt;= betweentime)
                {
                    //不用洗衣机洗，到洗衣机洗完衣服的时候都够我手洗洗完衣服了
                    time += 0;
                }
                else if (betweentime + x == t[i] + y)
                {
                    //如果我手洗的时间和我用洗衣机的时间是相同的，那我肯定是选择手洗
                    //betweentime的时间不发生改变
                    if(time &lt; t[i] + y)
                    {
                        time = t[i] + y;
                    }
                }
            }
        }
        cout &lt;&lt; time &lt;&lt; " ";
    }
}</pre>
个人觉得错误原因：1.到达的早的应该提前进行洗，而我是以greater的规则进行从大到小对他们进行排序，所以是有问题的

2.略

正确思路：

1.关于时间复杂度的问题，本来觉得最优应该也是Ο（n^2）,结果貌似有Ο（logn）的解答，orz
<h3>解题方法</h3>
1.李超线段树（<a href="http://： http://yx.telstudy.xyz/index.php/2019/09/03/李超线段树（入门学习）总结/">http://： http://yx.telstudy.xyz/index.php/2019/09/03/李超线段树（入门学习）总结/）</a>

&nbsp;

2.贪心策略

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>724</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 01:26:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 01:26:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-icpc-acm-%e5%8d%97%e4%ba%ac%e7%ab%99%e7%bd%91%e7%bb%9c%e8%b5%9b%ef%bc%88%e8%a1%a5%e9%a2%98%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="2019icpc%e7%bd%91%e7%bb%9c%e8%b5%9b"><![CDATA[2019icpc网络赛]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[108]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>线段树（入门学习）详解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91%ef%bc%88%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0%ef%bc%89%e6%80%bb%e7%bb%93/</link>
		<pubDate>Tue, 03 Sep 2019 02:24:23 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=730</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>李超线段树是最近网络赛(2019acm - icpc 南京站网络赛 i 题）解题所需要的算法，为补题以及正确补题，所以本线段树详解，先由李超线段树开始写起，后期文章完善后或更改详解顺序</li>
 	<li>详解文章为防止阅读者面对大量文字而无兴趣耐心阅读，故根据作者理解，对文段重要内容以及关键点加黑处理，如存在误导、歧义以及不正确的地方，望指出！邮箱：22494749@qq.com</li>
</ul>
<h2>一、什么是李超线段树？</h2>
（本文内容参考于：<a href="https://www.cnblogs.com/JHSeng/p/10896570.html">https://www.cnblogs.com/JHSeng/p/10896570.html</a>）十分感谢！
<h3>1.概念：首先顾名思义，李超线段树是线段树的一种延伸，李超线段树是用于维护平面直角坐标系中线段之间关系的一种数据结构。</h3>
<blockquote>所以什么是李超线段树？<strong>用标记永久化维护平面内线段覆盖情况的线段树。</strong></blockquote>
<h3>2.那么一般用来处理什么样的问题？</h3>
@(长草)

给定一个直角坐标系，同时支持动态插入一条线段，（假设某一个位置该点处的值为x）然后询问，从某一个位置（x，+∞）<strong>向下</strong>能看到的最高的那一条线段。

翻译一下：<strong>那么这就是在二维平面里维护直线，插入一条直线（直线动态）和查询直线x=k与其他直线相交的点中，最大的y坐标。</strong>

<hr />

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520174225263-1644602916.png"><img class="alignnone size-full wp-image-757" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520174225263-1644602916.png" alt="" width="686" height="470" /></a>

如图，<strong>两条红线表示为动态线段对平面内已有线段的两次询问</strong>，左边询问到的结果是A，（低于A也与另一条线段有交点，但不是该次询问的最大值）因此询问结果就是A，同理右边红色直线询问到的结果为B,因为在本次询问中yB的值是最大的，

<strong>两次询问的结果分别为A和B</strong>
<h3>李超线段树的核心</h3>
维护每个区间的“最优势线段”，即在每个区间的中点处最高的线段。询问时我们可以对所有包含横坐标为 x 的位置的区间上的最优势线段计算答案，最后取个 max。

其实这就相当于维护一个记录当前区间最高线段的，不下传标记的线段树。（显然如果我们访问到的区间内只包含询问的横坐标，那么这个区间的最优势线段就是答案线段，所以这样统计包含答案是能保证正确性的）
<h3>举例1</h3>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520190310856-2026716472.png"><img class="alignnone size-full wp-image-763" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1625007-20190520190310856-2026716472.png" alt="" width="719" height="476" /></a>
<ul>
 	<li>由图易知在平面直角坐标系，我们对这三条已有线段进行了三次访问，分别为三次红线，每次访问所返回的值为该次访问交点中y值最大的位置（不理解的话参考上面解释翻译处内容）</li>
</ul>
<blockquote>&nbsp;

对于修改，我们先把线段的值域分割到线段树的区间上，每次访问一个完整的包含在线段值域中的区间时：
1. 若当前区间还没有记录最优势线段，则记录最优势线段并返回。
2. 若当前区间的最优势线段被插入的线段完全覆盖，则把最优势线段修改为被插入线段并返回。
3. 若当前区间的最优势线段把被插入线断完全覆盖，则直接返回。
4. 若当前区间最优势线段与被插入线段有交，则先判断哪条线段在当前区间更优，并把更劣的线段下传到交点所在子区间。（交点两边的部分被这两条线段分别控制，而我们已经让在中点更优的那条线段作为区间最优势线段，因此更劣的那条线段只有可能在交点所在子区间超过当前区间的最优势线段）</blockquote>
代码如下
<h3>注意点</h3>
<ol>
 	<li>李超线段树维护的是每个区间最优的线段</li>
</ol>
线段树是以区间为核心的
<pre class="lang:c++ decode:true">//李超线段树
#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
const int maxn = 1e5 + 10;
struct Interval{
    double k, b;//最优势线段的k, b
    int l, r, flag;

    //构造函数
    Interval(){
    }
    Interval(int a,int b, int c, int d){
        this-&gt;l = a;
        this-&gt;r = b;
        this-&gt;k = c;
        this-&gt;b = d;
    }
    //返回x = pos点处的 y 值大小
    double calc(const int pos)const{
        return k * pos + b;
    }

    //求解两个线段的交点
    int cross(const Interval &amp;rhs)const{
        return floor((b - rhs.b)/(rhs.k - k));
    }
}segt[maxn &lt;&lt; 2];
//建树

void build(int curpos, itn curl,int curr){
    segt[curpos].k = segt[curpos].b = 0;
    segt[curpos].l = 1;
    segt[curpos].r = (int)5e4;
    if(curl == curr)
        return ;
    int mid = (curl + curr)&gt;&gt;1;
    //该区间的中值
    build(lson, curl, mid);
    build(rson, mid + 1,curr);
}

//eps 是c++中的无限小值
void update(int curpos,int curl,int curr,Interval k){
    //引用k区间
    //被插入线段完全覆盖了当前区间
    //calc(pos) 计算pos点处的y值大小
    if(k.l &lt;=curl &amp;&amp; curr &lt;= k.r){
            //如果当前区间没有最优势线段，可以直接进行标记
        if(!segt[curpos].flag) {
            segt[curpos] = k;
            segt[curpos].flag = 1;
        }
        else if (k.calc(curl) - segt[curpos] &gt; eps &amp;&amp; k.calc(curr) - segt[curpos].calc(curr) &gt; eps){
            segt[curpos] = k;
        }
        else if (k.calc(curl) - segt[curpos] &gt; eps || k.calc(curr) - segt[curpos] - segt[curpos].calc(curr) &gt; eps){
            int mid = curl + curr &gt;&gt; 1;
            //计算出区间的中点
            //寻找出区间中最优的线段
            if(k.calc(mid) - segt[curpos].calc(mid) &gt; eps){
                Interval tmp = k;
                k = segt[curpos];
                segt[curpos] = tmp;
            }

        }
    }
}
int main(){

}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>730</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 02:24:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 02:24:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91%ef%bc%88%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0%ef%bc%89%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9d%8e%e8%b6%85%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[李超线段树]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[131]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>java入门学习</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/03/java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0/</link>
		<pubDate>Tue, 03 Sep 2019 02:43:39 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=733</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>1 第一个java程序，输出hello world</h3>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1.png"><img class="alignnone size-full wp-image-739" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1.png" alt="" width="643" height="593" /></a>
<pre class="lang:java decode:true">package com.itheima.first;
public class HelloWorld {
	public static void main(String[] args) {
		System.out.println("Hello world");
		
	}
}
</pre>
<h3>2 第二个java程序，输入a与b的值，然后输出 a+b</h3>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190903110727.png"><img class="alignnone size-full wp-image-737" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190903110727.png" alt="" width="559" height="608" /></a>
<pre class="lang:java decode:true" style="font-size: 12.8px;"><span style="font-size: 12.8px; line-height: 19.2px; background-color: #cce4f5;">import java.util.Scanner;
</span>//上面这句话在提交代码的时候不能省略
public class Main {
	public static void main(String args[])throws Exception{
		Scanner cin = new Scanner(System.in);
		int a =  cin.nextInt(), b= cin.nextInt();
		System.out.println(a+b);
		
	}
}</pre>
<h3>3 java当中的if语句</h3>
如果满足某种条件就进行某种处理
<pre class="lang:java decode:true" data-url="（）" style="font-size: 12.8px;"><span style="font-size: 12.8px; line-height: 19.2px;">if(语句块){
</span>执行语句1;
}
//------------
if(判断条件） {
    执行语句1;
    ...
}
else {
    执行语句2;
    ...

}</pre>
<h3>4 样例1</h3>
输入学生成绩，通过if语句判断学生等级
<pre class="lang:java decode:true ">package demoif;
import java.util.*;
public class Exampleif {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int score;
		Scanner input = new Scanner(System.in);
		score = input.nextInt();
		if(score &gt;= 90){
			System.out.println("A");
		}
		else{
			if(score &gt;= 80)  
				System.out.println("B");
			else
				System.out.println("c");
			
		}
	}

}
</pre>
<h3>5 java同样支持三元运算符</h3>
（无具体内容）
<h3>6 switch条件语句</h3>
<pre class="lang:java decode:true ">switch（只能是int或者是char或者是符合条件的值）
{
    case 1:
    执行语句1;
    break;
...

}
//要记得break否则所有内容都执行</pre>
注意case存在穿透现象
<h3>7 while循环语句</h3>
<h3>8 do - while 循环语句</h3>
<h3>9 java大数a+b</h3>
<pre class="lang:java decode:true ">package demoif;
import java.math.BigInteger;
import java.util.*;
import java.math.BigDecimal;
import java.util.Scanner;
public class Exampleif {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		BigInteger a, b;
		Scanner input1 = new Scanner(System.in);
		a = input1.nextBigInteger();
		b = input1.nextBigInteger();
		BigInteger c = a.add(b);
		System.out.println(c);
	}

}
</pre>
<h3>10 java数组冒泡排序</h3>
<blockquote>与C、C++不同，Java在定义数组时并不为数组元素分配内存，因此[ ]中无需指定数组元素的个数，即数组长度。而且对于如上定义的一个数组是不能访问它的任何元素的，我们必须要为它分配内存空间，这时要用到运算符new，其格式如下：
arrayName=new type[arraySize];
其中，arraySize 为数组的长度，type 为数组的类型。如：
<div class="snippet-container">
<div class="sh_bright snippet-wrap">
<ol class="snippet-num">
 	<li>demoArray<span class="sh_symbol">=<span class="sh_keyword">new <span class="sh_type">int[<span class="sh_number">3];</span></span></span></span></li>
</ol>
</div>
</div>
为一个整型数组分配3个int 型整数所占据的内存空间。

通常，你可以在定义的同时分配空间，语法为：
type arrayName[] = new type[arraySize];
例如：</blockquote>
<div class="snippet-container">
<div class="sh_bright snippet-wrap">

<span class="sh_type">int demoArray<span class="sh_symbol">[] = <span class="sh_keyword">new int[<span class="sh_number">3];</span></span></span></span>
<pre class="lang:java decode:true ">package demoif;
import java.math.BigInteger;
import java.util.*;
import java.math.BigDecimal;
import java.util.Scanner;
public class Exampleif {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int [] a = new int [10];
		Scanner input = new Scanner(System.in);
		for(int i = 0; i &lt; a.length; i++){
			//Scanner input1 = new Scanner(System.in);
			a[i] = input.nextInt();
		}
		//System.out.println(c);
		bsort(a);
		ansprint(a);
	}
	public static void bsort(int [] a) {
		for(int i = 0; i &lt; a.length - 1; i++){
			for(int j = 0; j &lt; a.length - 1 - i; j++){
				if(a[j] &gt; a[j+1]){
					int t;
					t      = a[j];
					a[j]   = a[j+1];
					a[j+1] = t;
				}
				
			}
			
		}
		
	}
	public static void ansprint(int [] a) {
		for(int i = 0; i &lt; a.length; i++){
			System.out.println(a[i]);
		}
	}

}
</pre>
<h3>11jave如何调大字体（2019.9.17）</h3>
<a href="https://blog.csdn.net/qq_41694906/article/details/81182700">https://blog.csdn.net/qq_41694906/article/details/81182700</a>
<h3><a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190917111432.png"><img class="alignnone size-full wp-image-787" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190917111432.png" alt="" width="1326" height="781" /></a></h3>
</div>
<h3>12多维数组的学习(2019.9.17)</h3>
<pre class="lang:c++ decode:true ">package cheapet01;
import java.util.Scanner;
public class array {

	/**
	 * @param args
	 */
	
	/*
	 * 有一个n*n的棋盘，每个棋位上都输入一个数字，求解，棋盘上所有数字的和是多少
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//多维数组的申请和使用
		int n;
		Scanner cin = new Scanner(System.in);
		n = cin.nextInt();
		int [][] arr = new int [n][n];
		for(int i = 0; i &lt; n; i++){
			for(int j = 0; j &lt;n; j++){
				arr[i][j] = cin.nextInt();
			}
		}
		//这是一个n*n大小的棋盘
		int sum = 0;
		for(int i = 0; i &lt; n; i++){
			for(int j = 0; j &lt;n; j++){
				sum += arr[i][j];
			}
		}
		cin.close();
		System.out.println(sum);
		
		
	}

}
</pre>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/DU37@Z06JX4@IVC.png"><img class="alignnone size-full wp-image-791" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/DU37@Z06JX4@IVC.png" alt="" width="917" height="969" /></a>
<h3>13package是什么意思（20190924）</h3>
在java项目中package相当于是一个文件夹用于对class类文件（即.java文件进行分类和保存的上级目录），因此每次在创建java project的时候都要记得下一步创建的package然后在相应的package下创建class文件
<h3>14super语句的用法（20190924）</h3>
内容学习参考于<a href="https://blog.csdn.net/My_name_is_ZwZ/article/details/80048056">传送门</a>

super( )其实就相当于一个指向基类的指针，（要记住Java中没有指针，但是可以这样理解）。
<ul>
 	<li>super.XXX( 这里的XXX指的是父类的成员变量名即父类的属性，或者对象名）</li>
 	<li> super.XXX( ) ( 这里的XXX是父类中的其中一个方法名)</li>
 	<li><strong>super( ) ( 这种形式指的是：调用父类没有参数的构造方法（也叫构造函数）注意： 这里super( ) 只能放在子类的构造方法里面，并且只能放在构造方法的首句)</strong></li>
</ul>
super( x,y,z...) （此形式指：调用父类有参数的构造方法，也必须放在子类的构造方法（成员方法不可以）里面，并且只能放在构造方法的首句。其中x,y,z是指的与父类此有参构造方法中参数数据类型相对应的子类中的参数）

-------------------------------java文件创建情况------------------------------------

&nbsp;

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-1.png"><img class="alignnone size-full wp-image-816" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-1.png" alt="" width="1024" height="768" /></a>

父类代码
<pre class="lang:java decode:true ">package cheapt01;

public class Father {

	protected String head = "父类进行输出了";
	Father(){
		System.out.println(head);
		
	}
	Father(int a){
		System.out.println(a);
	}

}
</pre>
子类代码
<pre class="lang:java decode:true">package cheapt01;

public class Son extends Father{
	private static int a = 1;
	
	public Son(){
		System.out.println(super.head);
		//由于继承了父类，因此可以直接调用父类中的字符串
		
	}
	public void test(){
		//测试函数
	}
	public static void main(String[] args){
		Son s = new Son();
		
		
	}

}
</pre>
extends在java中的含义就意味着继承

可以很清楚的看到main函数中申请了一个名字为s的Son变量，那么就会调用父类中的String
<h3>15static在java当中（20190924）</h3>
<p class="postTitle"><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/liuguoguo/p/8525220.html">参考于博客：【】传送门】Java中static的含义和用法</a></p>

<div class="postText">
<div id="cnblogs_post_body" class="blogpost-body ">

<strong>static:静态的，用于修饰成员(成员变量，成员方法);</strong>

1.被static所修饰的变量或者方法会储存在数据共享区;

2.被static修饰后的成员变量只有一份！

3.当成员被static修饰之后，就多了一种访问方式，除了可以被对象调用之外，还可以直接

被类名调用，(类名.静态成员);

4.static的特点：

1）随着类的加载而被加载;

2）优先于对象存在;

3）被所有对象共享;

5.被static修饰的变量成为静态变量(类变量)或者实例变量;

6.存放位置

1）类变量随着类的加载而存在于date内存区;

2）实例变量随着对象的建立而存在于堆内存;

7.生命周期：

1)类变量周期生命最长，随着类的消失而消失;

2)实例变量生命周期比类变量短，它是随着对象的消失而消失;

8.方法注意事项：

1)静态的方法只能访问静态的成员;

2)非静态得方法即能访问静态得成员(成员变量，成员方法)又能访问非静态得成员;

3)局部变量不能被static修饰;

4)静态得方法中是不可以定义this、super关键字的，因为静态优先于对象存在，所以静态方法不可以出this;

&nbsp;

9.什么时候使用static修成员：

当属于同一个类的所有对象出现共享数据时,就需要将存储这个共享数据的成员用static修饰;

&nbsp;

10.什么时候使用static修饰方法：

当功能内部没有访问到非静态的成员时（对象特有的数据）那么该功能可以定义成静态的;
<h3>16关于多态的学习（2019.9.29）</h3>
什么是多态？

多态是指不同类对象在调用同一个方法时所呈现出的多种不同行为。

多态的作用：通过多态消除了类之间的耦合关系，大大提高了程序的可扩展性和可维护性

注意：一个父类可以有多个子类，但是一个子类只能有一个父类。（区别于<strong>接口</strong>）

如下典型的向上转型
<pre class="pure-highlightjs"><code class="java">Animal a = new Dog();</code></pre>
向下转型：
<pre class="pure-highlightjs"><code class="java">Animal a =new Dog();
Dog b = (Dog) a;</code></pre>
(向下转型是不安全的，所以有这么一个判断关键词）
<pre class="pure-highlightjs"><code class="java">if(an1 instanceof Cat){

}
else{

}</code></pre>
通过instanceof 进行判断，在向下转型的过程中判断与哪一个子类对象是对应的，然后在进行转型，避免了向下转型的错误，并且提高了程序的可读性和安全性。

&nbsp;
<h3></h3>
<h3>17 over在java中的作用（2019.9.29）</h3>
@Override是伪代码,表示重写(当然不写也可以)，不过写上有如下好处:<span class="Apple-converted-space">  1、可以当注释用,方便阅读； 2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错。例如，你如果没写@Override，而你下面的方法名又写错了，这时你的编译器是可以编译通过的，因为编译器以为这个方法是你的子类中自己增加的方法。   举例：在重写父类的onCreate时，在方法前面加上@Override 系统可以帮你检查方法的正确性。 @Override public void onCreate(Bundle savedInstanceState)</span>
<h3>18 什么是内部类（2019.9.29）</h3>
在java当中，允许在一个类内部再定义一个类。

成员内部类，定义：在一个类中除了可以定义成员变量、成员方法，还可以再定义一个成员类

内部类可以调用外部类的变量和方法

注意外部类变量在使用的时候无法想直接使用内部类的函数

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190929113252.png"><img class="alignnone size-full wp-image-826" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190929113252.png" alt="" width="339" height="69" /></a>

（在编译器中直接报错无法运行）
<pre class="lang:java decode:true" title="Outer.iava">package day9282;
public class Outer{
    int o = 10;
    public void oMethod(){
    System.out.println("外部类输出函数");
    
}
    class Innner{
    int i = 20;
    public void iMethod(){
    System.out.println("内部类输出函数");

}
}

}</pre>
<pre class="lang:java decode:true" title="Demo01.java">package day9282;
public class Demon01{
    public static void main()(String []args){
//主程序口
}
}</pre>
<h3>19java中方法的重载和使用（20191008）</h3>
在c++当中，存在着这么一种方法，就是对函数的重载，使得程序变得更加的高效。

<strong>简单介绍：它是指我们可以定义一些名称相同的方法，通过定义不同的输入参数来区分这些方法，然后再调用时，编译器就会根据不同的参数样式，来选择合适的方法执行。</strong>

注意，是定义不同的输入参数来区分方法（因为重载的函数，函数名字是相同的）
<h3>20java中函数的使用（20191008）</h3>
通常我们定义函数会定义在一个公共类当中，而不是直接写在主类的下方，那么我们在调用类外函数的时候应该怎么样去书写它呢？

那么就是先写类的名字然后加上.（这个点在这里是引用的意思，相信写过c++或者是c的朋友不会陌生）然后在加上方法名（通常引用点一写就会跳出来供你选择）
<h4>具体样例</h4>
<pre class="lang:java decode:true" title="方法类">package cheapt01;

public class Example05 {
	//java当中方法的重载
	public static int add(int x, int y){
		return x+y;
	}
	public static int add(int x,int y,int z){
		return x+y+z;
	}
	public static double add(double x,double y){
		return x+y;
	}
	
}
</pre>
</div>
</div>
</div>
&nbsp;
<pre class="lang:java decode:true " title="主函数类">package cheapt01;

import java.util.Scanner;

public class demo01 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int x, y, z;
		Scanner cin = new Scanner(System.in);
		x = cin.nextInt();
		y = cin.nextInt();
		z = cin.nextInt();
		int tmp1 = Example05.add(x,y,z);
		int tmp2 = Example05.add(x,y);
		System.out.println(tmp1);
		System.out.println(tmp2);
	}

}</pre>
<h3>21java中的二分查找（递归）（20191008）</h3>
<pre class="lang:java decode:true ">package cheapt01;

public class Example07 {
//二分查找递归方法
	public static int HalfSearch(int a[],int key, int start,int end){
		int mid = (start + end) &gt;&gt; 1;
		
		if(key == a[mid]){
			System.out.println(mid);
			return 0;
		}
		else if (key &lt; a[mid]){
			HalfSearch(a, key, start, mid);
			
		}
		else if(key &gt; a[mid]){
			HalfSearch(a, key, mid, end);
		}
		else{
			System.out.println("error");
			return -1;
		}
		return -1;
	}
}</pre>
<pre class="lang:c++ decode:true ">package cheapt01;

import java.util.Scanner;

public class demo01 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n;
		System.out.println("请输入n值");
		Scanner cin = new Scanner(System.in);
		n = cin.nextInt();
		int [] a = new int [n];
		System.out.println("请输入n个数字");
		
		for(int i = 0; i &lt; n; i++){
			a[i] = cin.nextInt();
		}
		for(int i = 0; i &lt; n - 1; i++){
			for(int j = 0; j &lt; n - i - 1; j++){
				if(a[j] &gt; a[j+1]){
					int tmp = a[j];
					a[j]    = a[j+1];
					a[j+1]  = tmp;
				}
			}
		}
		int key;
		System.out.println("请输入key值");
		key = cin.nextInt();
		Example07.HalfSearch(a, key, 0, n-1);
	
	}

}</pre>
&nbsp;
<div class="snippet-container">
<div class="postText">
<div id="cnblogs_post_body" class="blogpost-body ">
<h3>22.java中异常的学习</h3>
参考于：<a href="https://www.cnblogs.com/taiwan/p/7073743.html">https://www.cnblogs.com/taiwan/p/7073743.html</a>
<h4>一, 什么是java里的异常</h4>
<div>由于java是c\c++ 发展而来的,  我们可以先看看c语言里的错误.</div>
<h5>1.1 c语言里的错误</h5>
<div>

        我们实现1个程序的过程包括,  代码编写, 编译代码成为程序,  执行程序
<h3></h3>
其中大部分常见的语法错误都会被编译代码这样部过滤掉.   但是即使通过了编译. 执行程序这一步可能还是会有错误.

</div>
<div></div>
<div>        原因很多, 例如常见的除数为0,    内存溢出(数组的index超出界限), 或者内存被其他程序修改等就会出现程序异常的情况.</div>
<h5>1.2关于java</h5>
java是有c\c++发展而来的，java当中依然存在于类似于c\c++中的异常情况，c++和c中的解决办法一般是提前进行判断，或者是异常抛出判断

<strong>例如如下程序（除程序，当分母为0时会出现异常）</strong>
<pre class="lang:java decode:true ">package test01;

import java.util.Scanner;

public class Demo01 {

	public static int div(int a, int b){
		return a/b;
	}
	//除函数，当b == 0 的时候会出现异常
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a, b;
		Scanner cin = new Scanner(System.in);
		a = cin.nextInt();
		b = cin.nextInt();
		int ans = div(a, b);
		System.out.println(ans);
		
	}

}
</pre>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-2.png"><img class="alignnone size-full wp-image-880" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/1-2.png" alt="" width="542" height="218" /></a>

出现异常

但是可以见到, java告诉你出错的类型: 运算错误(ArithmeticExcetion), 出错信息和出错的类与文件行数输出, 方便你调试. jvm虚拟机是会对错误作出一定的处理的.
所以可以简单地将java里的异常理解成java运行时出现的错误, 异常机制就是对这种错误进行处理的机制.
<div>实际上, 当java程序执行时出现错误时, jvm会把执行时出错的信息(例如出错原因, 类型, 位置) 收集,然后打包成为1个对象(object),  程序员可以对这种对象进行处理. 这种对象就是所谓的异常.</div>
<div></div>
<div>       <strong> 可能出现的异常的代码并不是肯定会出现异常, 取决于执行环境和数据.</strong>!</div>
<div></div>
<div>
<h4>二, java里的异常的分类.</h4>
<div></div>
<div>见下图:</div>
<div></div>
<div>                       Throwable</div>
<div>                      /                \</div>
<div>              Error             <strong>Exception</strong></div>
<div>                 /                   /               \</div>
<div>         xxxxxx            <strong> xxxxxx          RuntimeException</strong></div>
<div>                                                          /                   \</div>
xxxxxx             ArithmeticException

</div>
<div></div>
<div></div>
<div></div>
<div>上图的所有对象都是类.</div>
<div></div>
<div>Throwable 代表是可抛出的.</div>
<div>Error            代表的是严重错误,  这种错误程序员无法进行处理, 例如操作系统崩溃, jvm出错, 动态链接库失败等.  Error并不是异常, 不是本文的重点.</div>
<div></div>
<div>Exception    代表的就是异常了.  它下面很多派生类,   其中它的派生类也分两种, 一种是RuntimeException(运行时异常), 其他的都是非运行时异常</div>
<div></div>
<div>RuntimeException    包括除数为0, 数组下标超界等. 运行时异常的派生类有很多, 其产生频率较高.  它的派生类可以由程序处理或者抛给(throw) 给jvm处理. 例如上面的例子就是抛给了jvm处理, jvm把程序中断执行, 并把错误信息输出到终端上.</div>
<div></div>
<div>非RuntimeExcption   这种异常属于Excepion的派生类(上面红色的xxx), 但是不是RuntimeException的派生类,  这种异常必须由程序员手动处理,<strong>否则不通过编译</strong>.</div>
<div></div>
<div>ArithmeticExcpetion   算术异常, 它是RuntimeException的派生类, 所以程序员不手动处理也通过编译, 只不过出错时会被jvm处理.</div>
</div>
<div></div>
<div>
<pre class="lang:java decode:true ">package test01;

import java.util.Scanner;

public class Demo01 {

	public static int div(int a, int b){
		int i = 0;
		try{
			i = a/b;
			
		}
		catch (Exception e){
			System.out.println("Exception occur!");
			System.out.println(e.getMessage());//输出原因
		}
	}
	//除函数，当b == 0 的时候会出现异常
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a, b;
		Scanner cin = new Scanner(System.in);
		a = cin.nextInt();
		b = cin.nextInt();
		int ans = div(a, b);
		System.out.println(ans);
		
	}

}
</pre>
&nbsp;

</div>
<h3 id="cnblogs_post_body" class="blogpost-body ">23.java中字符串类string的相关操作、</h3>
<pre class="lang:java decode:true ">package Day1022;

import java.util.Random;

public class Demo01 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// string 类的常见操作
		String Str1 = "";   //string的第一种声明方式 无参数 
		String Str2 = null; //string的第二种声明方式 无参数，指向空指针
		String Str3 = "abs";//string的第三种声明方式
		
		char []charArry = new char []{ 'A', 'B', 'C'};
		String Str4 = new String(charArry); //通过已知数组对string进行初始化
		String Str5 = new String(Str3);     //使用已知的string类对新string进行初始化
		
		/*
			下面进行string类常用操作的测试
		*/
		String StrTest = "abuciketdncbcgdketduq";
		/*
		 * 返回指定字符在此字符串中第一次出现的索引
		 */
		Demo01.Pri(StrTest);
		int Test1 = StrTest.indexOf('d');
		System.out.println("(1)String.indexOf find the char d first take place in " + Test1);
		/*
		 *  返回指定字符在字符串中最后一次出现的索引
		 */
		int Test2 = StrTest.lastIndexOf('b');
		System.out.println("(2)String.lastIndexOf: find the char b last take place in " + Test2);
		/*
		 * 返回指定字符在此字符串中第一次出现的索引
		 */
		int Test3 = StrTest.indexOf("ket");
		System.out.println("(3)String.indexOf: find the string {ket} first take place in " + Test3);
		
		/*
		 * 返回指定字符串在此字符串中最后一次出现的索引
		 */
		int Test4 = StrTest.lastIndexOf("ket");
		System.out.println("(4)String.lastIndexOf: find the string {ket} last take place in " + Test4);
	
		/*
		 * 返回字符串中指定位置index上的字符
		 */
		System.out.println("返回字符串中指定位置index上的字符");
		System.out.print("(5)");
		for (int i = 0; i &lt; StrTest.length(); i++) {
			if(i == 0)  System.out.print(i); else System.out.print(" " + i);
		}
		System.out.println();//换行
		System.out.print("(6)");
		for(int i = 0; i &lt; StrTest.length(); i++){
			if(i == 0) System.out.print(StrTest.charAt(i)); else System.out.print(" " + StrTest.charAt(i));
		}
		
		/*
		 * 判断字符串是否以指定字符结尾
		 */
		//System.out.println(StrTest.endsWith('q'));
		System.out.println();
		System.out.print("(7)StrTest.endsWith: judge whether string {q} is the end character of a string , the answer is " + (Boolean)StrTest.endsWith("q"));
		
	}
	
		public static void Pri(String s){
			System.out.println("test answer : " + s);
		}
	

		
		 

}
</pre>
<blockquote>test answer : abuciketdncbcgdketduq
(1)String.indexOf find the char d first take place in 8
(2)String.lastIndexOf: find the char b last take place in 11
(3)String.indexOf: find the string {ket} first take place in 5
(4)String.lastIndexOf: find the string {ket} last take place in 15
返回字符串中指定位置index上的字符
(5)0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
(6)a b u c i k e t d n c b c g d k e t d u q
(7)StrTest.endsWith: judge whether string {q} is the end character of a string , the answer is true
<pre class="lang:c++ decode:true ">package Day1022;

public class Eample03 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str = "java";
		char [] charArry = str.toCharArray();
		System.out.println("make the string to be char[] : ");
		for (int i = 0; i &lt; charArry.length; i++) {
			if(i == 0) {System.out.print(charArry[i]);} else{System.out.print(" " + charArry[i]);}
		}
		
	}

}
</pre>
&nbsp;</blockquote>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date><![CDATA[2019-09-03 02:43:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-03 02:43:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java%e5%85%a5%e9%97%a8%e5%ad%a6%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hello-world"><![CDATA[hello world]]></category>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="%e5%85%a5%e9%97%a8"><![CDATA[入门]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[41]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[739]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a855161ff8e377445d3bccf3a3316f50]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>当命运需要你们去逆风飞翔的时候，就不能随风而去</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/08/%e5%bd%93%e5%91%bd%e8%bf%90%e9%9c%80%e8%a6%81%e4%bd%a0%e4%bb%ac%e5%8e%bb%e9%80%86%e9%a3%8e%e9%a3%9e%e7%bf%94%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e5%b0%b1%e4%b8%8d%e8%83%bd%e9%9a%8f%e9%a3%8e%e8%80%8c/</link>
		<pubDate>Sun, 08 Sep 2019 09:18:17 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=745</guid>
		<description></description>
		<content:encoded><![CDATA[20190908分享新鲜事

说是分享新鲜事，其实不过是事情多起来，而内心对于这平淡日子有所想法，所以随便写写的，早知我会写写东西，我该去新闻系多学习的。

( ๑´•ω•) "(ㆆᴗㆆ)

&nbsp;
<ul>
 	<li>先从硬币哥doinb说起吧，终于是进了梦寐以求的s赛，也是终于不用呆呆的望着 “ 金咕咕想去s8 ”  的id发呆而感到内心伤感了，他身上想赢的信念足够强大，就像是九天之上的太阳一般，发光发热，也算是我喜欢为数不多的韩国人之一了，哈哈 φ(￣∇￣o) 他大概算新疆人而不算韩国人，登顶冠军击败rng，让人看到了他的努力和强大，这个赛季的胜利也算是对qg恩断义绝事件最好的说明了吧，他没有因为直播分心，他没有不想赢，他比任何人都想赢，期待s赛上和我科的交手吧。</li>
 	<li>再是csgo的柏林major，navi 的 Zeus 今年真的枪马的无比下饭，但也不能多说什么，有种英雄迟暮的感觉，总是在上半场他失误的时候期待他能在下半场发力，倒是一直低迷了，希望以前的navi诸葛可以回来吧，说到这其实还有好多老人老fo呀瓜皇年龄都大了，职业估计也没几年了，有点遗憾吧。simple还是一如既往的，不禁让人感叹这就是top 1小三叶啊，faze没有以往那么猛了，很明显感觉到a队的统治力也在下降，（a队的nuke无敌，真的强哈哈哈），青春不会逝去它永在记忆里。</li>
 	<li>然后便是日常生活的琐事了，脖子上受了伤，很痛，这都不重要但是那个伤口，也太明显了吧，暴风哭泣。</li>
 	<li> 周五的下午去帮马老师搬了下东西，其实有时候做点事情让时间变得丰富会使人觉得生活很充实，也算是挺好的，也算是帮助2019级的第一件事情吧，算是在校会社联 做的最后一件事情了，未来谈起也能笑着说声，这段岁月日子圆满了！</li>
</ul>
@(期待)

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3339.jpg"><img class="wp-image-747 aligncenter" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3339.jpg" alt="" width="505" height="673" /></a>
<ul>
 	<li>不打算参加竞选了，所以这次搬帐篷呀什么的是个句号，当知道帐篷的用途的时候，其实我觉得我的一切的辛苦和努力都是值得的，哪有什么岁月静好，不过是有人在负重前行，那我也算担了点。</li>
</ul>
@(赞一个)
<ul>
 	<li>怎么说呢？社联挺好的，能学习到挺多东西的，也有不好的地方吧，人生的每一段经历都是值得回忆的，因此不后悔吧，再来还会再来一年的，院会是没有退的，本是想逃出迎新，还是没能做到，帮忙搬了一袋又一袋的被褥，当别人轻声说了下，谢谢，其实内心的满足和无数的动力就涌上来了，也是在这个学校呆了一年的记录吧，一年前我很清楚，我意识到<strong>曾经的我将手上的一手好牌打的稀烂</strong>，于是开始整理我自己的生活和一些习惯，希望自己能变好一点，</li>
</ul>
最近一些日子，倒是又堕落了下去，刷题数没有一点增加，每天12点到5点的网络赛打的跟傻逼一样，得紧一紧自己了，好好安排下时间多刷点题吧，如文题吧--当命运需要你们去逆风飞翔的时候，就不能随风而去。

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3314.jpg"><img class="alignnone wp-image-746" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/IMG_3314.jpg" alt="" width="562" height="422" /></a>

（某天下午，夕阳与彩虹牵了下手）

有空其实也该把steam上的游戏过一下，其实有蛮多做的不错的游戏，谁知我竟是懒得连游戏也没怎么打了，也不能说没怎么打吧，其实主要是玩csgo吧。

<!--StartFragment -->
<div><a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190908172553.png"><img class="alignnone wp-image-753" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/QQ图片20190908172553.png" alt="" width="338" height="419" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>745</wp:post_id>
		<wp:post_date><![CDATA[2019-09-08 09:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-08 09:18:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bd%93%e5%91%bd%e8%bf%90%e9%9c%80%e8%a6%81%e4%bd%a0%e4%bb%ac%e5%8e%bb%e9%80%86%e9%a3%8e%e9%a3%9e%e7%bf%94%e7%9a%84%e6%97%b6%e5%80%99%ef%bc%8c%e5%b0%b1%e4%b8%8d%e8%83%bd%e9%9a%8f%e9%a3%8e%e8%80%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%94%9f%e6%b4%bb"><![CDATA[生活]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[747]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>数据结构模板类链表详细代码</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/16/%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e9%93%be%e8%a1%a8%e5%ad%a6%e4%b9%a0/</link>
		<pubDate>Mon, 16 Sep 2019 01:12:39 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=779</guid>
		<description></description>
		<content:encoded><![CDATA[<pre class="lang:c++ decode:true" title="正确代码">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:2019.9.16
 *    crested:2019.9.18
 *    crested:2019.9.19
 *    crested:2019.9.21
 *    crested:2019.9.22
 *    crested:2019.9.23
 *    LinkList 链表学习
 */
using namespace std;

template&lt;class T&gt; class LinkList;

template&lt;class T&gt;
class node {
	public:
		//对结点进行初始化
		node(const T rdata, node&lt;T&gt; *rnext = NULL):data(rdata),next(rnext) {};

		//前面已经有节点了，新增节点后面直接连接空指针
		node(node&lt;T&gt; * rnext = NULL):next(rnext) {};

		//析构函数
		~node() {}

		//将链表定义为链表的友原函数便于链表要使用节点
		friend class LinkList&lt;T&gt;;
	private:

		//数据域
		T data;

		//指针域
		node&lt;T&gt; *next;

};


// T是数据 LinkList 指向自己
template&lt;class T&gt;
class LinkList {
	public:
		//无变量赋值，空表生成函数
		LinkList();

		//链表的复制函数
		LinkList(LinkList&lt;T&gt; &amp;rlist);


		//使用一维数组初始化
		LinkList(T a[], int n);

		//将数据item插入到第i个位置上，原i包括i后数据后移一位
		void Insert(int i, T item);

		//删除链表中i位置的值，i位置后所有值向前移动一个位置，函数返回删除的值
		T Delete(int i);

		//按位查找
		T Findplace(int i);

		//按值查找
		int Finddata(T fdata);

		//返回链表长度
		int length () const;

		//返回item的后继;
		T Next(T item)const;

		//返回item的前驱;
		T Prior(T item)const;

		//判空
		bool Empty() const;

		//判满
		bool Full()const;

		bool IsIn(T)const;

		//重载赋值运算符
		LinkList&lt;T&gt;&amp; operator=(const LinkList&lt;T&gt; &amp;alist);

		//按位查找，返回第i个元素的值;
		T operator[](int i)const;

		//将表置为空表;
		void MakeEmpty();

		//打印链表所有的值
		void printLinkList();

		//析构函数
		~LinkList();

	private:
		//表头指针
		node&lt;T&gt; * first;
};

//无参的构造函数
template&lt;class T&gt;
LinkList&lt;T&gt;::LinkList() {
	LinkList first = new node&lt;T&gt;;
	if(!first) {
		throw "分配失败";
	} else {
		cout &lt;&lt; "初始化成功" &lt;&lt; '\n';
		first-&gt;next = NULL;
	}
}

template&lt;class T&gt;
LinkList&lt;T&gt;::LinkList(T a[], int n) {
	first = new node&lt;T&gt;;//头结点
	if(!first) {
		throw "空间分配失败";
	}

	node&lt;T&gt; *s;
	first-&gt;next = NULL;//对指针域进行初始化
	REP(i, 0, n) {
		s = new node&lt;T&gt;;
		if(!s) {
			throw"空间分配失败";
		}
		s-&gt;data = a[i];
		s-&gt;next = first-&gt;next;
		first-&gt;next = s;
	}
}


//不带头结点的插入
template&lt;class T&gt;
void LinkList&lt;T&gt;::Insert(int i, T x) {
	node&lt;T&gt;*p, *s;
	p = first;
	int cnt = 0;

	while(p &amp;&amp; cnt &lt; i-1) {
		p = p-&gt;next;
		cnt++;
	}
	if(p == NULL) {
		throw "位置非法";
	} else {
		s = new node&lt;T&gt;;
		s-&gt;data = x;
		s-&gt;next = p-&gt;next;
		p-&gt;next = s;
	}

}

template&lt;class T&gt;
T LinkList&lt;T&gt;::Delete(int i) {
	//删除i位置上的数据
	node&lt;T&gt; *p = first;
	int cnt = 0;
	while(p &amp;&amp; cnt &lt; i - 1) {
		p = p-&gt;next;
		cnt++;
	}
	if(p == NULL || p-&gt;next == NULL) {
		throw "位置";
	} else {
		node&lt;T&gt;  *q = p-&gt;next;
		T x = q-&gt;data;
		p-&gt;next = q-&gt;next;
		delete q;
		return x;
	}
}

template &lt;class T&gt;
int LinkList&lt;T&gt;::Finddata(T fdata) {
	//按数据查找
	int cnt = 1;
	node&lt;T&gt; *p = first-&gt;next;//工作指针
	while(p) {
		if(p-&gt;data == fdata){
			return cnt; 
		}
		cnt++;
		p = p-&gt;next;
	}
	if(p == NULL) {
		throw "未查找到";
	} else {
		return cnt;
	}
}

template &lt;class T&gt;
T LinkList&lt;T&gt;::Findplace(int i) {
	//按位置查找
	int cnt = 0;
	node&lt;T&gt; *p = first-&gt;next;
	while(cnt &lt; i &amp;&amp; p) {
		p = p-&gt;next;
		cnt++;
	}
	if(p == NULL) {
		throw "超出";
	} else {
		return p-&gt;data;
	}
}

template &lt;class T&gt;
void LinkList&lt;T&gt;::printLinkList() {
	node&lt;T&gt; *p = first-&gt;next;
	if(Empty()) {
		cout &lt;&lt; "链表为空，没有可用元素输出" &lt;&lt; '\n';
	}
	while(p) {
		cout &lt;&lt; p-&gt;data &lt;&lt; '\n';
		p = p-&gt;next;
	}
	cout &lt;&lt; '\n';
	return ;
}

template &lt;class T&gt;
int LinkList&lt;T&gt;::length()const {
	int cnt = 0;
	node&lt;T&gt; *p = first-&gt;next;
	while(p) {
		p = p-&gt;next;
		cnt++;
	}
	return cnt;
}

template &lt;class T&gt;
LinkList&lt;T&gt;::~LinkList() {
	node&lt;T&gt; *p;
	while(first != NULL) {
		p = first;
		first = first-&gt;next;
		delete p;

	}
	cout &lt;&lt; "析构完成"  &lt;&lt; '\n';
}

template &lt;class T&gt;
bool LinkList&lt;T&gt;::IsIn(T item) const {
	node&lt;T&gt; *p = first-&gt;next;//工作指针
	while(p) {
		if(p-&gt;data == item)
			return true;
		p = p-&gt;next;
	}
	return false;
}

template &lt;class T&gt;
bool LinkList&lt;T&gt;::Full() const {
	return false;
	//判断空间是否已满
}

//重载赋值运算符

template&lt;class T&gt;
LinkList&lt;T&gt;&amp; LinkList&lt;T&gt;::operator = (const LinkList &amp; rlist) {
	if(first == rlist.first) {
		cout &lt;&lt; "同一个链表" ;
		return *this;
	}
	MakeEmpty();
	cout &lt;&lt; "开始复制" &lt;&lt; '\n';
	node&lt;T&gt; *p , *q;//工作指针
	q = first-&gt;next;
	p = rlist.first-&gt;next;
	REP(i, 0, rlist.length()) {
		T x = p-&gt;data;
		Insert(i+1, x);
		p = p-&gt;next;
	}
	return *this;
}

//重载中括号运算符实现按位查找
template&lt;class T&gt;
T LinkList&lt;T&gt;::operator[](int t) const {
	node&lt;T&gt; *p;
	p = first-&gt;next;
	int cnt = 1;
	while(p &amp;&amp; cnt &lt; t) {
		p = p-&gt;next;
		cnt++;
	}
	if(p == NULL) {
		return 0;
	} else {
		return p-&gt;data;
	}
}

template&lt;class T&gt;
void LinkList&lt;T&gt;::MakeEmpty() {
	node&lt;T&gt; *p, *q;
	p = first-&gt;next;
	while(p) {
		q = p-&gt;next;
		delete p;
		p = q;

	}
	first-&gt;next = NULL;
}

template&lt;class T&gt;
bool LinkList&lt;T&gt;:: Empty() const {                        //判空
	if(first-&gt;next == NULL)
		return true;
	else
		return false;
}

int main() {
	printf("链表功能测试，请输入 n = ");
	int n;
	cin &gt;&gt; n;
	int *a = new int [n];
	sort(a, a+n); 
	cout &lt;&lt; "请输入n个数字";
	for(int i = 0; i &lt; n; i++) {
		cin &gt;&gt; a[i];
	}
	cout &lt;&lt; "---------测试一： 用数组对链表进行初始化---------" &lt;&lt; '\n';
	LinkList&lt;int&gt; l(a, n);
	l.printLinkList();
	cout &lt;&lt; "---------测试一结束---------" &lt;&lt; '\n';
	cout &lt;&lt; "---------测试二：在x位置差入数字 item \n请输入x" &lt;&lt; endl;
	int x;
	cin &gt;&gt; x;
	cout &lt;&lt; "请输入item__" ;
	int item;
	cin &gt;&gt; item; 
	l.Insert(x, item);
	l.printLinkList();
	cout &lt;&lt; "---------测试二结束---------" &lt;&lt; '\n';
		cout &lt;&lt; "---------测试三：测试按位查找以及按值查找 ---------" &lt;&lt; '\n';
	l.printLinkList();
	int i;
	cout &lt;&lt; "请输入位置i";
	cin  &gt;&gt; i;
	cout &lt;&lt; " 查找结果：" &lt;&lt; l[i] &lt;&lt; endl; 
	int fdata;
	cout &lt;&lt; "请输入数据fdata" &lt;&lt; '\n';
	cin  &gt;&gt; fdata;
	cout &lt;&lt; fdata &lt;&lt; "所在位置查找结果为 " &lt;&lt; l.Finddata(fdata) &lt;&lt; endl; 
	cout &lt;&lt; "---------测试三结束---------" &lt;&lt; '\n';
	
}</pre>
主要实现思想参考与王红梅、胡明、王涛编著的《数据结构c++》（第二版）

以及参考与博客：<a href="https://blog.csdn.net/qq_37934101/article/details/80747366">https://blog.csdn.net/qq_37934101/article/details/80747366</a>

有什么不正确的地方或者不合适的地方欢迎指出

邮箱：22494749@qq.com]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>779</wp:post_id>
		<wp:post_date><![CDATA[2019-09-16 01:12:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-16 01:12:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e9%93%be%e8%a1%a8%e5%ad%a6%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
		<category domain="category" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a54b37998b90d9067cdef16fd7ee6f0c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a7dd6685fefb370df46b6ba0da0ebfc4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_48ed80f526fbc3109ad2ec5b2e8420e8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b888e49796e22146d49dfeda51e6929a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>微信小程序《pocket learning》</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/16/%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e3%80%8apocket-learning%e3%80%8b/</link>
		<pubDate>Mon, 16 Sep 2019 11:19:37 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=783</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>一·软件体验二维码</h1>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/二维码.jpg"><img class="alignnone size-full wp-image-784" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/二维码.jpg" alt="" width="175" height="168" /></a>

&nbsp;
<h1>二·作品简介</h1>
<h2><strong><b>1</b></strong><strong><b>. </b></strong><strong><b>产品介绍</b></strong></h2>
（1）本产品名称Pocket Learning，

（2）产品用途：是解决学生学习、阅读方面的问题，培养学生文化素质。

（3）开发背景：随着网络的不断发展，学生的学习慢慢地网络化，为了优化学生的学习方式，让所有学习者轻松学习，故开发本程序。
<h2><strong><b>2.</b></strong><strong><b> </b></strong><strong><b>产品面向的用户群体</b></strong></h2>
<h3><strong><b>2.1用户特点：</b></strong></h3>
A.针对中小学生：
<ol>
 	<li>a. 中小学生注意水平有限。</li>
 	<li>b.学习压力大。</li>
 	<li>c. 自我意识明确。</li>
 	<li>d.情绪稳定。</li>
</ol>
B.针对其他用户：
<ol>
 	<li>a.学习不方便。</li>
 	<li>b.学习没有计划</li>
</ol>
<h1><a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/图片2.png"><img class="alignnone size-full wp-image-785" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/图片2.png" alt="" width="418" height="740" /></a></h1>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>783</wp:post_id>
		<wp:post_date><![CDATA[2019-09-16 11:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-16 11:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e3%80%8apocket-learning%e3%80%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%af%94%e8%b5%9b"><![CDATA[比赛]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[785]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Educational Codeforces Round 73 Editorial 补题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/22/educational-codeforces-round-73-editorial-%e8%a1%a5%e9%a2%98/</link>
		<pubDate>Sun, 22 Sep 2019 15:15:29 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=796</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1221A - 2048 Game</h2>
<h3>题目链接：</h3>
<a href="https://codeforces.com/contest/1221/problem/A">https://codeforces.com/contest/1221/problem/A</a>
<h3>题目大意：</h3>
<blockquote>注意：Every integer in this multiset is a power of two.也就是说该集合内的每一个元素都是2^n
<pre class="line-numbers language-cpp"><code class=" language-cpp">2的幂次方表
2^0=1
2^1=2
2^2=4
2^3=8
2^4=16
2^5=32
2^6=64
2^7=128
2^8=256
2^9=512
2^10=1024
2^11=2048
2^12=4096</code></pre>
</blockquote>
在做题的时候漏了上述的这个关键的条件

每次操作选取的是两个相等的数字进行合并，如果经过多次操作后可以得到2048则输出"YES"否则输出"NO"
<h3>解题思路：</h3>
其实求的是2^n的和，n的值飘忽不定，那其实如果我所有的数都是2的幂那么相加一定会经过2048，只需要判断是否能大于就可以了，如果输入的数字是大于2048的2的幂那么直接忽视就好了，无论怎么加也不可能使得数值变小了。

2^3 可以分解成

2^2+2^2 还可以继续分解

2^1+2^1   2^1+2^1 同理还可以分解

由于2048是2的幂次方，可以如上方法分解，故将数组内所有小于2048的2的幂相加，如果大于等于2048的说明能组成，否则不能组成
<h3>解题代码：</h3>
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int main(){
    int t;
    cin &gt;&gt; t;
    while(t--)
    {
    int n;
    cin &gt;&gt; n;
    int a;
    ll sum = 0;
    for(int i = 0; i &lt; n; i++){
        cin &gt;&gt; a;
        if(a &lt;= 2048)
            sum += a;
    }
    if(sum &gt;= 2048){
        cout &lt;&lt; "YES" &lt;&lt; '\n';
    }
    else{
        cout &lt;&lt; "NO" &lt;&lt; '\n';
    }
}
}
</pre>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>796</wp:post_id>
		<wp:post_date><![CDATA[2019-09-22 15:15:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-22 15:15:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[educational-codeforces-round-73-editorial-%e8%a1%a5%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[66]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2eb23bfcedeb8288896e5ed8dd16b276]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Codeforces Round #587 (Div. 3)</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/22/codeforces-round-587-div-3/</link>
		<pubDate>Sun, 22 Sep 2019 15:50:07 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=801</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>A. Prefixes</h2>
<h3>题目链接：<a href="https://codeforces.com/contest/1216/problem/A">https://codeforces.com/contest/1216/problem/A</a></h3>
<h3>题目大意：</h3>
（input）输入n，表示下一行输入的字符串的长度，输入str

通过最少的操作数来达到每偶数段（1~2*n）a的个数和b的个数是相等
<h3>解题思路：</h3>
简单的模拟，每次维护长度为2的区间，如果在这区间中，两个相同那么必定要进行一次操作cnt++，改s[i]或s[i+1]无区别，故所有偶数区间都能满足
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int main(){
    ll n, cnt = 0;
    sl(n);
    string s;
    cin &gt;&gt; s;
    for(int i = 0; i &lt; s.size() -  1; i+=2){
        //每两位每两位的检查
        if(s[i] == s[i + 1]){
            cnt++;
            s[i + 1] == 'a' ? s[i+1] = 'b' : s[i+1] = 'a';
        }
    }
    cout &lt;&lt; cnt &lt;&lt; '\n' &lt;&lt; s &lt;&lt; endl;
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>801</wp:post_id>
		<wp:post_date><![CDATA[2019-09-22 15:50:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-22 15:50:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codeforces-round-587-div-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019.9.21个人赛</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/23/2019-9-21%e4%b8%aa%e4%ba%ba%e8%b5%9b/</link>
		<pubDate>Mon, 23 Sep 2019 15:14:33 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=813</guid>
		<description></description>
		<content:encoded><![CDATA[<table id="contest-problems" class="table table-striped table-bordered table-responsive" style="height: 249px;" width="997" cellspacing="0">
<thead>
<tr>
<th class="my-stat"></th>
<th class="all-stat">Stat</th>
<th class="prob-num">#</th>
<th>Origin</th>
<th class="prob-title text-xl-left">Title</th>
</tr>
</thead>
<tbody>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//A/1/">26</a> / <a href="https://vjudge.net/contest/327736#status//A/0/">36</a></td>
<td class="prob-num text-xs-center">A</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2684466/origin" target="_blank" rel="noopener noreferrer">AtCoder 4822</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/A">Alchemist</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//B/1/">21</a> / <a href="https://vjudge.net/contest/327736#status//B/0/">54</a></td>
<td class="prob-num text-xs-center">B</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2637540/origin" target="_blank" rel="noopener noreferrer">AtCoder 4894</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/B">Build Stairs</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//C/1/">26</a> / <a href="https://vjudge.net/contest/327736#status//C/0/">28</a></td>
<td class="prob-num text-xs-center">C</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2660130/origin" target="_blank" rel="noopener noreferrer">AtCoder 4858</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/C">One Clue</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//D/1/">9</a> / <a href="https://vjudge.net/contest/327736#status//D/0/">28</a></td>
<td class="prob-num text-xs-center">D</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2660131/origin" target="_blank" rel="noopener noreferrer">AtCoder 4862</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/D">Green Bin</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//E/1/">27</a> / <a href="https://vjudge.net/contest/327736#status//E/0/">31</a></td>
<td class="prob-num text-xs-center">E</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2684464/origin" target="_blank" rel="noopener noreferrer">AtCoder 4887</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/E">Red or Not</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//F/1/">18</a> / <a href="https://vjudge.net/contest/327736#status//F/0/">36</a></td>
<td class="prob-num text-xs-center">F</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2609044/origin" target="_blank" rel="noopener noreferrer">AtCoder 4891</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/F">City Savers</a></td>
</tr>
<tr>
<td class="my-stat"><span class="tag tag-success">Solved</span></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//G/1/">19</a> / <a href="https://vjudge.net/contest/327736#status//G/0/">37</a></td>
<td class="prob-num text-xs-center">G</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2721613/origin" target="_blank" rel="noopener noreferrer">AtCoder 4873</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/G">ModSum</a></td>
</tr>
<tr>
<td class="my-stat"></td>
<td class="all-stat"><a href="https://vjudge.net/contest/327736#status//H/1/">3</a> / <a href="https://vjudge.net/contest/327736#status//H/0/">9</a></td>
<td class="prob-num text-xs-center">H</td>
<td class="prob-origin text-xs-center"><a href="https://vjudge.net/problem/2660132/origin" target="_blank" rel="noopener noreferrer">AtCoder 4877</a></td>
<td class="prob-title"><a href="https://vjudge.net/contest/327736#problem/H">Summer Vacation</a></td>
</tr>
</tbody>
</table>
<h2>A - Alchemist</h2>
<h3>题目大意：</h3>
对n堆成分进行处理，每两堆混合后只会剩下两堆质量的1/2，混合后的质量再与其他堆进行混合，求解怎么混合使得剩下的质量是最多，求最多剩余质量
<h3>解题思路：</h3>
通过样例很清楚质量越多越排后进行混合处理，那么就可以使得最后剩余的质量最多，简单排序模拟即可
<h3>通过代码：</h3>
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
double a[10010];
using namespace std;
int main(){
    int n;
    cin &gt;&gt; n;

    REP(i, 0, n){
        cin &gt;&gt; a[i];
    }
    sort(a, a+n);
    double sum = 0;
    REP(i, 1, n){
        a[i] = (double)(a[i-1] + a[i])/2;
    }
    //cout &lt;&lt; a[n - 1] &lt;&lt; '\n';
    printf("%.5f\n", a[n - 1]);
}
</pre>
<h2>B - Build Stairs</h2>
<h3>题目大意</h3>
有n个正方形，且已知高度，对于每个正方形，您将执行一次以下任一操作：
<ul>
 	<li>将正方形的高度减少<var>1</var>。</li>
 	<li>没做什么。</li>
</ul>
如果可以执行使正方形的高度从左到右不减小的操作，请打印<code>Yes</code>；否则，打印<code>No</code>。
<h3>解题思路：</h3>
每次输入的时候判断一下就好了，，一旦输入的高度本来就小于上一回的高度的话，那么直接输出“No”就好了
<h3>解题代码：</h3>
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int main()
{

    int n, h, m=0;
    cin &gt;&gt; n;
    for(int i = 1; i &lt;= n; i++)
    {
        cin &gt;&gt; h;
        if(h&lt;m)
        {
            cout&lt;&lt;"No";
            return 0;
        }
        m=max(m,h-1);
    }
    cout&lt;&lt;"Yes";
}</pre>
<h2 id="problem-title">C - One Clue</h2>
<h3>题目大意：</h3>
给石头涂色
<h3>解题思路：</h3>
注意数据范围和例子即可，所涂的石头可能在三个位置，所以不妨从最右考虑起，先输出最左边的
<h3>解题代码</h3>
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int main(){
	int k,x;
	cin &gt;&gt; k &gt;&gt; x;
	for(int i=x-k+1;i&lt;=x+k-1;i++)
        cout&lt;&lt;i&lt;&lt;endl;
}</pre>
<h2 id="problem-title">D - Green Bin</h2>
<h2>题目大意：</h2>
给你n个字符串，判断这n个字符串能配成几对字谜，当字符串中字母出现的个数以及出现的字母相同时即互为字谜
<h2>解题思路：</h2>
当你排序之后，按字典序互为字谜的字符串是一定相同的，那么在用map存一下出现个数即可，后自增保证每次增加的是对数（如果用for循环比较的话会答案错误，因为只能算出相同字符串而不能直接得到对数，所以用map显然更加合适）
<h2>解题代码：</h2>
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
using namespace std;
map &lt;string,int&gt; m;
string s;
long long ans=0;
using namespace std;
int main()
{
    int n;
    cin &gt;&gt; n;
    while ( n--)
    {
        cin &gt;&gt; s;
        sort(s.begin(), s.end());
        //cout &lt;&lt; m[s];
        ans += m[s]++;
    }
    cout &lt;&lt; ans;
}
</pre>
<h2>E - Red or Not</h2>
题目大意：
<h2></h2>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>813</wp:post_id>
		<wp:post_date><![CDATA[2019-09-23 15:14:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-23 15:14:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2019-9-21%e4%b8%aa%e4%ba%ba%e8%b5%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>从BF算法到kmp算法详解</title>
		<link>http://yx.telstudy.xyz/index.php/2019/09/30/%e4%bb%8ebf%e7%ae%97%e6%b3%95%e5%88%b0kmp%e7%ae%97%e6%b3%95%e8%af%a6%e8%a7%a3/</link>
		<pubDate>Mon, 30 Sep 2019 06:01:53 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=828</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>一、KMP介绍</h3>
KMP算法是一种改进的字符串匹配算法（有BF算法改进而来，BF算法是暴利搜索匹配的方式，而KMP则是对BF算法的回溯过程进行改进，从而大幅度降低了时间复杂度），能够很好地处理子串与母串的匹配
<h3>二、例子：子串匹配母串</h3>
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：a b a b c</li>
</ul>
要求子串与母串进行匹配，求解在哪一个位置匹配上了。
<h4>1.BF算法的解决方法</h4>
关键词：逐一匹配 暴力搜索

第一步匹配
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：a b a b c</li>
 	<li>匹配结果：第四个位置匹配失败</li>
</ul>
第二步匹配
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：   a b a b c</li>
 	<li>匹配结果：第一个匹配位置失败</li>
</ul>
第三步匹配
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：       a b a b c</li>
 	<li>匹配结果：第二个位置匹配失败</li>
</ul>
第四个位置
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：         a b a b c</li>
 	<li>匹配结果：第二个位置匹配失败</li>
</ul>
第五个位置
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：             a b a b c</li>
 	<li>匹配结果：第一个位置匹配失败</li>
</ul>
第六个位置
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：               a b a b c</li>
 	<li>匹配结果：匹配成功，返回位置6</li>
</ul>
以上就是BF算法的匹配过程，逐一移动，每个位置都尝试一遍

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/66ZLO_VN3H91PO9G9.png"><img class="alignnone size-full wp-image-830" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/66ZLO_VN3H91PO9G9.png" alt="" width="748" height="178" /></a>

（算法图解，注意回溯位置）

<strong>i 回溯到开始位置+1</strong>

j 回溯到子串的0位置

推理过程：j的长度实际上等于i向左移动的位置，那么要返回开始的位置再加1就可以表示成 i - j + 1
<pre class="lang:c++ decode:true " title="依靠string实现的BF代码">int BFstring(string MotherStr, string SonStr){
    int i = 0, j = 0;
    for(;(i != MotherStr.size()) &amp;&amp; (j != SonStr.size());){
        if(MotherStr[i] == SonStr[j]){
            i++, j++;
        }
        else{
            i = i - j + 1;
            j = 0;
        }
        if(j == SonStr.size()){
            return i - j + 1;
        }

    }
    return 0;
}</pre>
<pre class="lang:c++ decode:true " title="依靠char实现的代码">int BFchar(char MotherStr[],char SonStr[]){
    int i, j;
	i = 0;//主串指针
	j = 0;//子串指针
	while (MotherStr[i] != '\0' &amp;&amp; SonStr[j]!='\0')   //两个都没到尾部
	{
		if (MotherStr[i] == SonStr[j])   //如果相等两个指针都递增
		{
			i++;
			j++;
		}
		else
		{
			i = i - j + 1;   //回溯
			j = 0;
		}
	}
	if (SonStr[j] == '\0')
	{
		//如果子串指针指向了'\0'，表示匹配完成
		return i - strlen(SonStr) + 1;
	}
	return -1;

}</pre>
<h3>三、kmp算法的实现</h3>
<h4>（1）为什么已经有BF算法了还要有KMP算法呢？</h4>
可以看一下下面这个例子
<ul>
 	<li>a a a a a a a a a a a a a a a a a a a b</li>
 	<li>a a a a b</li>
</ul>
如果是使用BF匹配的话，每次都是在最后一个位置才发现本趟匹配失败，于是每次匹配都是最大的时间复杂度，这也就是BF算法的最坏情况。

<strong>算法发明者：knuth-morris-pratt</strong>
<h4>（2）发明的算法基本思想</h4>
是当出现不匹配时，我们已经能知晓一部分文本的内容（因为在匹配失败之前它们已经和模式相匹配）。我们可以利用这些信息避免将指针回退到所有这些已知的字符之前。
<h4>（3）具体实现</h4>
用的还是这个例子
<ul>
 	<li>母串：a b a a c a b a b c a c</li>
 	<li>子串：a b a b c</li>
</ul>
&nbsp;
<h5>prefix table</h5>
找出最长前缀和最长后缀，并且最长前后缀相同，那么我们可以计算出下面子串的<strong>最长公共前后缀</strong>（不能是子串本身哦）

a                         -1（第一个最长公共前后缀是定义的特殊值-1和字符串本身无太大关系）

a b                      0

a b a                   1

a b a b                2

a b a b c             0

得到最长公共前后缀表
<ul>
 	<li>子串：a    b   a   b   c</li>
 	<li>            -1   0   1   2   0</li>
</ul>
这回我们BF中的i和j,i返回的值就不需要是i - j + 1而可以直接返回next数组值从而减少回溯的距离

（回溯距离越短，时间降低的越多）
<pre class="lang:c++ decode:true ">#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

void prefix_table(char pattern[],int prefix[],int n){
    prefix[0] = 0;
    int len    = 0;
    int i = 1;
    while(i &lt; n){
        if(pattern[i] == pattern[len] ) {
            len++;
            prefix[i] = len;
            i++;
        }
        else {
                if(len &gt; 0)
                    len = prefix[len - 1];
                else
                    prefix[i] = len, i++;
        }
    }
}
void move_prefix_table(int prefix[], int n){
    for(int i = n-1; i &gt; 0; i--){
        prefix[i] = prefix[i - 1];

    }
    prefix[0] = -1;
}
void kmp_search(char MotherStr[], char SonStr[]){
    int n = strlen(SonStr);
    int m = strlen(MotherStr);
    int *prefix = new int [n];
    prefix_table(SonStr, prefix, n);
    move_prefix_table(prefix, n);
    //MotherStr[i] len(MotherStr) = m;
    //SonStr[j]    len(SonStr0    = n;
    int i = 0, j = 0;
    while(i &lt; m){
        if (j == n - 1&amp;&amp; MotherStr[i] == SonStr[j]){
            printf("Found pattern %d\n", i - j);
            j = prefix[j];
        }
        if (MotherStr[i] == SonStr[j]){
            i++, j++;
        }
        else {
            j = prefix[j];//回溯
            if(j == -1){
                //特殊点
                i++, j++;

            }
        }
    }

}
int main(){
    char pattern[] = "ababcabaa";
    int prefix[9];
    int n = 9;
    prefix_table(pattern, prefix, n);
    move_prefix_table(prefix, n);
    cout &lt;&lt; "prefix table:" &lt;&lt; '\n';
    for(int i = 0; i &lt; n; i++){
        //看一下prefixtable是否正确
        cout &lt;&lt; prefix[i] &lt;&lt; '\n';

    }
    char text[] = "abababcabaabababab";
    kmp_search(text, pattern);
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>828</wp:post_id>
		<wp:post_date><![CDATA[2019-09-30 06:01:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-30 06:01:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%8ebf%e7%ae%97%e6%b3%95%e5%88%b0kmp%e7%ae%97%e6%b3%95%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="kmp"><![CDATA[KMP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[830]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[41]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>二分查找算法（递归与非递归）</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/07/%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95%ef%bc%88%e9%80%92%e5%bd%92%e4%b8%8e%e9%9d%9e%e9%80%92%e5%bd%92%ef%bc%89/</link>
		<pubDate>Mon, 07 Oct 2019 12:32:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=835</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>递归二分与非递归二分之间的差别

递归算法写起来简单，但是有两个不足，一个是调用接口的开销，函数调用本身是有开销的。
另一个是堆栈内存比较小，递归调用层次深，容易引起堆栈溢出错误（著名的stack overflow）。非递归没有这个问题。
还有就是一些编程语言（很久很久以前，在你出生的年代之前），是没有函数调用的，那么就不能递归了。</blockquote>
以上文段摘自csdn某大佬的回答中，个人觉得参考价值大，故放在文章首段
<h3>一、递归方式的二分查找算法</h3>
<h4>（1）介绍</h4>
二分算法通常是在一段有序序列中高效查找key值的查找算法
<h4>（2）注意</h4>
1.前提是在一段有序的序列中，如果不是可以考虑使用sort函数对容器进行一下排序
<h4>（3）代码</h4>
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

using namespace std;

const int maxn = 10010;
int key, a[maxn];//查找的值
int HalfSearch(int start, int _end){
    //引入区间
    int mid = (start + _end) &gt;&gt; 1;

    if(_end &lt; start){
        //throw "error";
        cout &lt;&lt; -1 &lt;&lt; '\n';
        return 0;
    }
    else{
        if(a[mid] == key) { cout &lt;&lt; mid+1 &lt;&lt; '\n'; return 0;}
        else if (key &lt; a[mid]) {HalfSearch(start, mid);}
        else {HalfSearch(mid, _end);}
    }

}
int main()
{
    int n;scanf("%d %d", &amp;n, &amp;key);
    for(int i = 0; i &lt; n; i++){scanf("%d", &amp;a[i]);}
    HalfSearch(0, n-1);
    return 0;
}
</pre>
&nbsp;
<h3>二、非递归方式的二分查找</h3>
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
//默认是在升序序列中查找
const int maxn = 100010;
int a[maxn], key;
void HalfSearch(int start, int _end){
    int  mid;
    while(start &lt;= _end) {
        mid = (start + _end) &gt;&gt; 1;
        if(key == a[mid]){
            cout &lt;&lt; mid &lt;&lt; '\n';
            return ;
        }
        else if(key &lt; a[mid]){
            _end = mid - 1;
        }
        else {
            start = mid + 1;
        }
    }
    return ;
}
int main(){
    int n;scanf("%d %d", &amp;n, &amp;key);
    for(int i = 0; i &lt; n; i++){scanf("%d", &amp;a[i]);}
    HalfSearch(0, n-1);
    return 0;
}
</pre>
&nbsp;
<h3>三.测试数据</h3>
输入

6 2

1 2 3 4 5 6

输出

1（or 2）

&nbsp;

暗示：元素所在位数或者是元素对应数组位置的下标]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>835</wp:post_id>
		<wp:post_date><![CDATA[2019-10-07 12:32:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-07 12:32:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e7%ae%97%e6%b3%95%ef%bc%88%e9%80%92%e5%bd%92%e4%b8%8e%e9%9d%9e%e9%80%92%e5%bd%92%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%88%86%e6%b2%bb"><![CDATA[分治]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>快速幂</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/09/%e5%bf%ab%e9%80%9f%e5%b9%82/</link>
		<pubDate>Wed, 09 Oct 2019 06:42:06 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=841</guid>
		<description></description>
		<content:encoded><![CDATA[a^b %mod
a*a* ... *a
偶数时
2^6 = 2 * 2 * 2 * 2 * 2 * 2;
2^6 = (2 * 2 * 2)^2
2^6 = 2^3)^2;
a^b = a^(b/2) * a^(b/2)

奇数时

2^5 = 2 * 2 * 2 * 2 * 2
2^5 = 2 * (2^2 * 2^2)
a^b = a * a ^ (b-1)
a^b = a * a ^ b

&nbsp;
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;
//快速幂
using namespace std;
typedef long long ll;
ll npow(ll a, ll b,ll mod)
{
    //a^b %mod
    ll ans = 1;
    if(b == 0){return 1;}
    for(int i = 1; i &lt;= b; i++)
    {
        ans *= a;
        ans %= mod;
    }
    return ans;
}
ll qpow (ll a, ll b, ll mod)
{
    ll ans = 1;
    while(b &gt; 0)
    {
        if(b &amp; 1)
        {
            ans = ans * a % mod;
        }
        a = a * a % mod;
        b &gt;&gt;= 1;
    }
    return ans;

}
int main()
{
    ll a, b, mod;
    scanf("%lld %lld %lld", &amp;a, &amp;b, &amp;mod);
    cout &lt;&lt; "npow的结果如下：" &lt;&lt; '\n';
    printf("%lld\n",npow(a, b, mod));
    cout &lt;&lt; "qpow的结果如下：" &lt;&lt; '\n';
    printf("%lld\n", qpow(a, b, mod));
}</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date><![CDATA[2019-10-09 06:42:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-09 06:42:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bf%ab%e9%80%9f%e5%b9%82]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%bf%ab%e9%80%9f%e5%b9%82"><![CDATA[快速幂]]></category>
		<category domain="category" nicename="%e6%95%b0%e8%ae%ba"><![CDATA[数论]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【转载】c++中去重的方法</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/09/%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91c%e4%b8%ad%e5%8e%bb%e9%87%8d%e7%9a%84%e6%96%b9%e6%b3%95/</link>
		<pubDate>Wed, 09 Oct 2019 07:56:03 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=843</guid>
		<description></description>
		<content:encoded><![CDATA[<pre class="lang:c++ decode:true ">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;set&gt;

using namespace std;


int main()
{
    int myints[] = {1,2,3,1,1};
    int len = sizeof(myints)/sizeof(int);
    vector&lt;int&gt; vec(myints, myints + len);
    set&lt;int&gt;s(vec.begin(), vec.end());
    vec.assign(s.begin(), s.end());
    for(int x : vec)
        cout &lt;&lt; x &lt;&lt; ",";
    return 0;
}


</pre>
&nbsp;

&nbsp;
<pre class="lang:c++ decode:true ">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;


int main()
{
    int myints[] = {1,2,3,1,1};
    int len = sizeof(myints)/sizeof(int);
    vector&lt;int&gt; vec(myints, myints + len);
    sort(vec.begin(), vec.end());
    vec.erase(unique(vec.begin(), vec.end()), vec.end());
    for(int x : vec)
        cout &lt;&lt; x &lt;&lt; ",";
    return 0;
}

</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>843</wp:post_id>
		<wp:post_date><![CDATA[2019-10-09 07:56:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-09 07:56:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%ac%e8%bd%bd%e3%80%91c%e4%b8%ad%e5%8e%bb%e9%87%8d%e7%9a%84%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="c%e8%89%b9stl%e5%87%bd%e6%95%b0%e5%ba%93"><![CDATA[stl]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>分型图类型问题</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/09/%e5%88%86%e5%9e%8b%e5%9b%be%e7%b1%bb%e5%9e%8b%e9%97%ae%e9%a2%98/</link>
		<pubDate>Wed, 09 Oct 2019 09:19:40 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=845</guid>
		<description></description>
		<content:encoded><![CDATA[算法竞赛宝典
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;

char map[731][731];
int qpow(int a, int b){
    int res = 1;
    while(b &gt; 0){
        if(b &amp; 1){
            res = res * a;

        }
        a = a * a;
        b &gt;&gt;= 1;
    }
    return res;
}
void dfs(int n, int x, int y){
    if(n == 1)
    {
        //当空间维度为1维时
        map[x][y] = 'X';
        return;
    }
    int size = qpow(3, n-2);
    dfs(n - 1, x, y); //左上角
    dfs(n - 1, x, y + 2 * size);//右上角
    dfs(n - 1, x + size, y + size);//中间
    dfs(n - 1, x + 2 * size, y);
    dfs(n - 1, x + 2 * size, y + 2 * size);

}
int main(){
    int n;
    while(scanf("%d", &amp;n)!= EOF){
        if(n == -1){
            break;
        }
        int size = qpow(3, n - 1);
        REP(i, 1, size){
            REP(j, 1, size){
                map[i][j] = ' ';
            }
        }
        dfs(n, 1, 1);
        for(int i = 1; i &lt;= size; i++){
            for(int j = 1; j &lt;= size; j++){
                cout &lt;&lt; map[i][j];
            }
            cout &lt;&lt; '\n';
        }
    }
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>845</wp:post_id>
		<wp:post_date><![CDATA[2019-10-09 09:19:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-09 09:19:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e5%9e%8b%e5%9b%be%e7%b1%bb%e5%9e%8b%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="dfs%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2"><![CDATA[深搜]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>数论学习</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/11/%e6%95%b0%e8%ae%ba%e5%ad%a6%e4%b9%a0/</link>
		<pubDate>Fri, 11 Oct 2019 05:09:10 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=847</guid>
		<description></description>
		<content:encoded><![CDATA[2019.10.11  - 2019 10.13 参加复旦大学吴永辉教授的数论讲座
<h1>一.素数运算的实验范例</h1>
<h2>1.素数介绍</h2>
素数又称质数，指的是在大于1的自然数中除了1和自身无法被其他自然数整除的数。
<h2>2.合数介绍</h2>
合数是相对于质数（素数）而存在的数，大于1而不是素数的数都被称为合数。
<h2>3.使用筛法生成素数的算法</h2>
（1）计算自然数区间[2 ,  n]之间的所有的素数

（2）大整数素数测试
<h3>第一种算法·埃拉托斯特尼筛法（埃氏筛法）</h3>
注意点 1.2也是素数，所以筛法的开始是以2为开始的
<pre class="lang:c++ decode:true">#include &lt;cstdio&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e6+10;
int u[maxn], prime[maxn];
using namespace std;
int Asieve(int n) {

    //埃氏筛法
    //首先定义一个筛子u[]，通过筛子来筛选素数
    for(int i = 2; i &lt;= n; i++) {
        //对筛子进行初始话
        u[i] = true;
    }
    int k = 0;
    for(int i = 2; i &lt;=  n; i++) {
        //开始进行筛选
        if(u[i]) prime[k++] = i;
        for(int j = 2; j * i &lt;= n; j++){
            u[i * j] = false;
            //将该i数的所有倍数都筛去,因为都不是素数

        }
    }
return k;
}
int main(){
    int n;
    while(scanf("%d", &amp;n)!= EOF){

        int size = Asieve(n);//最后返回筛选出的素数个数
        
        for(int i = 0; i &lt;= n; i++){
            printf("%d\n", prime[i]);
        }
    }
    return 0;
}
</pre>
&nbsp;

例题：

A - Goldbach's Conjecture
<h4>解法1、埃氏筛法</h4>
<pre class="lang:c++ decode:true">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e6+10;
int u[maxn], prime[maxn];
using namespace std;
int Asieve(int n)
{

    //埃氏筛法
    //首先定义一个筛子u[]，通过筛子来筛选素数
    for(int i = 2; i &lt;= n; i++)
    {
        //对筛子进行初始话
        u[i] = true;
    }
    int k = 0;
    for(int i = 2; i &lt;=  n; i++)
    {
        //开始进行筛选
        if(u[i])
        {
            //prime[k++] = i;
            for(int j = 2; j * i &lt;= n; j++)
            {
                u[i * j] = false;
                //将该i数的所有倍数都筛去,因为都不是素数

            }
        }
    }
    for(int i = 1; i &lt;= n; i++)
    {
        if(u[i])
        {
            prime[k++] = i;

        }

    }
    return k;
}
int main()
{
    int n;
    int size = Asieve(1000000);
    while(scanf("%d", &amp;n)!= EOF &amp;&amp; n)
    {

        //最后返回筛选出的素数个数
        bool flag = false;

        for(int i = 0; i &lt; n; i++)
        {
            if(prime[i] * 2 &gt; n)
            {
                break;
            }
            if(u[n - prime[i]])
            {
                cout &lt;&lt; n &lt;&lt; " = " &lt;&lt; prime[i] &lt;&lt; " + " &lt;&lt; n-prime[i] &lt;&lt; '\n';
                flag = true;
                break;
            }

        }
        if(flag == false)
        {
            cout &lt;&lt; "Goldbach's conjecture is wrong." &lt;&lt; '\n';
        }
    }
    return 0;
}</pre>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/10/T_SW350O7KB@XI62S.png"><img class="alignnone size-full wp-image-851" src="http://yx.telstudy.xyz/wp-content/uploads/2019/10/T_SW350O7KB@XI62S.png" alt="" width="529" height="88" /></a>
<h3>2.第二种筛法·欧拉筛法</h3>
介绍：其实欧拉筛法是在埃氏筛法上的改进。

（1）筛去所有超出范围的数字

（2）筛去素数的所有倍数，因为素数的倍数即不为素数（因为它不满足只被1和本身整数的定义）

（3）i % prime[j] == 0 时候筛去说明当前素数prime[i]是i的最小素因子，既然存在最小素因子所以就不是素数，筛去即可，这是欧拉筛法的最关键一点

（4）prime[0]在下面代码用来储存素数的个数了，如果coder愿意或者习惯，也可以再定义一个变量

（5）筛非素数和筛素数是差不多的
<h4>解法二、欧拉筛法</h4>
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e6 + 10;
//欧拉筛法
const int PrimeSize = 80000;
//素数的大小
int prime[PrimeSize];
bool noprime[maxn];
using namespace std;
void sieve(int n)
{
    //memset(u, true, sizeof(u));
    prime[0] = 0;
    noprime[0] = noprime[1] = true;
    for(int i = 2; i &lt;= n; i++)
    {
        if(noprime[i] == false)
        {
            prime[++prime[0]] = i;
        }
        for(int j = 1; j &lt;= prime[0] &amp;&amp; i * prime[j] &lt;= n; ++j)
        {
            noprime[i * prime[j]] = true;
            if((i % prime[j]) == 0)
            {
                break;
            }
        }
    }
}
int main()
{
    sieve(maxn);
    int n;//偶整数
    while(scanf("%d", &amp;n) != EOF &amp;&amp; n){
            for(int i = 1; i &lt;= prime[0] &amp;&amp; 2*prime[i] &lt;= n; ++i){
                if(noprime[n - prime[i]] == false){
                    printf("%d = %d + %d\n", n, prime[i], n - prime[i]);
                    break;
                }
            }

    }
}
</pre>
<h2>4.哥德巴赫猜想的一个扩展</h2>
Euler证明的经典定理之一是素数在数量上是无限的。但每个数字是否可以表示成4个输入？

相关例题：UVA 10168

题目
<blockquote>Euler proved in one of his classic theorems that prime numbers are infinite in number. But can every
number be expressed as a summation of four positive primes? I don’t know the answer. May be you
can help!!! I want your solution to be very efficient as I have a 386 machine at home. But the time limit
specified above is for a Pentium III 800 machine. The definition of prime number for this problem is
“A prime number is a positive number which has exactly two distinct integer factors”. As for example
37 is prime as it has exactly two distinct integer factors 37 and 1.
Input
The input contains one integer number N (N ≤ 10000000) in every line. This is the number you will
have to express as a summation of four primes. Input is terminated by end of file.
Output
For each line of input there is one line of output, which contains four prime numbers according to
the given condition. If the number cannot be expressed as a summation of four prime numbers print
the line ‘Impossible.’ in a single line. There can be multiple solutions. Any good solution will be
accepted.
<strong>Sample Input</strong>
24
36
46
<strong>Sample Output</strong>
3 11 3 7
3 7 13 13
11 11 17 7</blockquote>
&nbsp;
<h3>题目分析：</h3>
这题很有意思，是哥德巴赫的一个猜想的扩展，将一个数字n分解成四个素数，这四个素数之和为n（有多种分解方案）
<h3>解题分析：</h3>
分析了一下题目，这有两个硬性要求，第一、将数字分解成四个数字，第二、数字都是素数，那么很清楚的可以思考到，我们需要用到两个知识点

1.素数筛（这个上面写了很清楚，就不多说了）

2.分而治之（降低求解的规模）：我们要求解的是四个数字，那能不能缩小一下呢，先缩小到分解成三个数字，n -&gt; a 、 b 、 c (这里的c可以不是素数，因为还未分解到最低层次）c-&gt;d、e（这里必须都是素数，因为已经到最低规模了）

那么第一层有什么好的解决办法呢？

我们很熟知 2 是最小的素数，那 a 不妨多往2的方向考虑，b不妨往 2， 3的方向考虑，剩下一个c就是n - a - b所能求得的值了

（注意c分奇偶判断）
<pre class="lang:c++ decode:true">#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e7 + 10;
using namespace std;
bool isprime[maxn];//и╦вс
int prime[5000000], k, n;
void sieve(){
    memset(isprime, true, sizeof(isprime));
    for(int i = 2; i &lt;= 9999999; i++) {
        if(isprime[i]) prime[++k] = i;//记录下每个素数
        for(int j = 1; j &lt;= k; j++){
            if(i * prime[j] &gt; maxn){
                break;
                //所测定数超出所需要的范围了，直接跳出循环就可以了
            }
            isprime[i * prime[j]] = false;
            if(i % prime[j] == 0){
                break;
            }
        }
    }
}
int main(){
    sieve();
    while(scanf("%d", &amp;n) &gt; 0){
        if(n == 8){puts("2 2 2 2");continue;}
        if(n == 9){puts("2 2 2 3");continue;}
        if(n == 10){puts("2 2 3 3");continue;}
        if(n == 11){puts("2 3 3 3");continue;}
        if(n == 12){puts("3 3 3 3");continue;}
        if(n &lt; 8){puts("Impossible.");continue;}
        if(!(n % 2)) printf("2 2 "), n-=4;
        else {
        printf("2 3 ");
        n -= 5;
        }
        for(int i = 1; i &lt;= k; i++){
            if(prime[i] * 2 &gt; n){
                //超出数据范围了
                break;

            }
            if(isprime[n - prime[i]]){
                printf("%d %d\n", prime[i], n - prime[i]);
                break;
            }

        }
    }
}
</pre>
<h2></h2>
<h2>5.素数相关题目</h2>
<h3>题目来源：UVA10533</h3>
<h3>介绍：这是一个分解数的问题</h3>
A prime number is a positive number, which is divisible by exactly two different integers. A digit prime
is a prime number whose sum of digits is also prime. For example the prime number 41 is a digit prime
because 4 + 1 = 5 and 5 is a prime number. 17 is not a digit prime because 1 + 7 = 8, and 8 is not
a prime number. In this problem your job is to find out the number of digit primes within a certain
range less than 1000000.
Input
First line of the input file contains a single integer N (0 &lt; N ≤ 500000) that indicates the total number
of inputs. Each of the next N lines contains two integers t1 and t2 (0 &lt; t1 ≤ t2 &lt; 1000000).
Output
For each line of input except the first line produce one line of output containing a single integer that
indicates the number of digit primes between t1 and t2 (inclusive).
<strong>Sample Input</strong>
3
10 20
10 100
100 10000
<strong>Sample Output</strong>
1
10
576
Note: You should at least use scanf() and printf() to take input and produce output for this
problem. cin and cout is too slow for this problem to get it within time limit.
<h3>题目分析：判断一个数字是不是位素数</h3>
这里提出了一个位素数的概念，即该数所有位数相加的总和也是素数的素数。

例子：41 =&gt;&gt; 4+1 = 5所以是位素数
<h3>解题分析：</h3>
（1）求解每位数相加就好了

（2）素数筛

代码如下
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
bool isprime[1000010];
int prime[1000010];
int s[1000010];
void add(int x)
{
    while(x &lt;= 1000000)
    {
        s[x]++;
        x+=x&amp;(-x);
    }
}
int sum(int x)
{
    int ans=0;
    while(x &gt; 0)
    {
        ans += s[x];
        x-=x&amp;(-x);
    }
    return ans;
}
int get(int x)
{
    return sum(x)-sum(x-1);
}
void getprime()
{
    int num=0;
    /*memset(isprime, true, sizeof(isprime));
    for(int i = 2;i &lt;= 1000000; i++){//素数筛
    	if(isprime[i]){
    		prime[num++] = i;
    		for(int j = 1;j &lt;= num &amp;&amp; i * prime[j] &lt; 1000000; j++){
    			isprime[i * prime[j]] = false;
                if(i % prime[j] == 0){
                    break;
                }
    		}
    	}
    }*/
    for(int i = 2; i &lt;= 1000000; i++) //素数筛
    {
        if(!isprime[i])
        {
            prime[num++] = i;
            for(int j = i+i; j &lt;= 1000000; j+=i)
                isprime[j] = true;
        }
    }
        for(int i = 0; i &lt; num; i++)
        {
            int check = 0, temp = prime[i];
            while(temp)
            {
                check += temp%10;
                temp /= 10;
            }
            if(!isprime[check])
                add(prime[i]);
        }
    }
    int main()
    {
        getprime();
        int t;
        scanf("%d",&amp;t);
        while(t--)
        {
            int a,b;
            scanf("%d %d",&amp;a,&amp;b);
            printf("%d\n",sum(b)-sum(a-1));
        }
        return 0;
    }
</pre>
&nbsp;
<h2>6.测试素数Miller-Rabin素数测试算法</h2>
文章链接：<a href="http://yx.telstudy.xyz/index.php/2019/07/21/miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95/">http://yx.telstudy.xyz/index.php/2019/07/21/miller-rabin%e7%b4%a0%e6%95%b0%e6%b5%8b%e8%af%95%e7%ae%97%e6%b3%95/</a>

&nbsp;

介绍：解决素数判定问题的常用方法是试除法，即试用[ 2, √n ] 中每个数去除 n 。n 是素数当且仅当只能被 1 和它本身整除。

n在低规模的时候，很快就能得出结果，<strong>当 n 十分大的时候，所需要试除的数据则会大很多，导致试除法算法所需要花费的时间变得很长</strong>

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/07/IMG_2928.jpg"><img class="alignnone size-full wp-image-635" src="http://yx.telstudy.xyz/wp-content/uploads/2019/07/IMG_2928.jpg" alt="" width="3024" height="4032" /></a>
<h3 class="has-large-font-size">【两个基础理论】</h3>
<h4>1.费马小定理：</h4>
费马小定理：当 p为质数时，有
<figure class="wp-block-image">
<div><a class="no-des" href="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" data-fancybox="gallery"><img src="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" alt="a^{p-1}\equiv 1(mod \: \, p)" /></a></div></figure>
，不过反过来不一定成立，也就是说，如果
<figure class="wp-block-image">
<div><a class="no-des" href="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" data-fancybox="gallery"><img src="https://private.codecogs.com/gif.latex?a%5E%7Bp-1%7D%5Cequiv%201%28mod%20%5C%3A%20%5C%2C%20p%29" alt="a^{p-1}\equiv 1(mod \: \, p)" /></a></div>
<figcaption>p不一定为质数</figcaption></figure>
什么数会这样呢？卡迈尔数，就像是561，用如上式子是成立的但是561并不是卡迈尔数，因为561可以分解为3*11*17（有兴趣的可以百度一下下哈哈）
<h3>2.二次探测</h3>
二次探测：如果 p 是一个素数 0 &lt; x &lt; p , 则方程 x^2 = 1(mod p) 的解为 x = 1或者 x = p -1
<h3>证明如下</h3>
<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/07/20180902152616155.jpg"><img class="alignnone size-full wp-image-636" src="http://yx.telstudy.xyz/wp-content/uploads/2019/07/20180902152616155.jpg" alt="" width="727" height="768" /></a>
<h3>实现代码：</h3>
<pre class="lang:c++ decode:true ">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
int prime[10]={2,3,5,7,11,13,17,19,23,29};
int Quick_Multiply(int a,int b,int c)  //快速积（和快速幂差不多） 
{
    long long ans=0,res=a;
    while(b)
    {
        if(b&amp;1)
          ans=(ans+res)%c;
        res=(res+res)%c;
        b&gt;&gt;=1;
    }
    return (int)ans;
}
int Quick_Power(int a,int b,int c)     //快速幂，这里就不赘述了 
{
    int ans=1,res=a;
    while(b)
    {
        if(b&amp;1)
          ans=Quick_Multiply(ans,res,c);
        res=Quick_Multiply(res,res,c);
        b&gt;&gt;=1;
    }
    return ans;
}
bool Miller_Rabin(int x)     //判断素数 
{
    int i,j,k;
    int s=0,t=x-1;
    if(x==2)  return true;   //2是素数 
    if(x&lt;2||!(x&amp;1))  return false;     //如果x是偶数或者是0,1，那它不是素数 
    while(!(t&amp;1))  //将x分解成(2^s)*t的样子 
    {
        s++;
        t&gt;&gt;=1;
    }
    for(i=0;i&lt;10&amp;&amp;prime[i]&lt;x;++i)      //随便选一个素数进行测试 
    {
        int a=prime[i];
        int b=Quick_Power(a,t,x);      //先算出a^t
        for(j=1;j&lt;=s;++j)    //然后进行s次平方 
        {
            k=Quick_Multiply(b,b,x);   //求b的平方 
            if(k==1&amp;&amp;b!=1&amp;&amp;b!=x-1)     //用二次探测判断 
              return false;
            b=k;
        }
        if(b!=1)  return false;   //用费马小定律判断 
    }
    return true;   //如果进行多次测试都是对的，那么x就很有可能是素数 
}
int main()
{
    int x;
    scanf("%d",&amp;x);
    if(Miller_Rabin(x))  printf("Yes");
    else  printf("No");
    return 0;
}</pre>
&nbsp;
<h1>2.求解不定方程和同余的实验范例</h1>
<h2>1.计算最大公约数和不定方程</h2>
介绍：欧几里得算法是适用于计算整数a和b的最大公约数（GCD）。整数a和b的最大公约数通过反复应用除运算直到余数为0，最后非0的余数就是最大公约数
<h3></h3>
<h3>递归的gcd</h3>
<pre class="lang:c++ decode:true">inline int gcd1(int a, int b){return b == 0 ? a : gcd(b , a%b); }</pre>
<h3></h3>
<h3>循环的gcd</h3>
<pre class="lang:c++ decode:true ">inline int gcd2(int a, int b){
    int t;
    while(b){
        t = b;
        b = a % b;
        a = t;
    }
    return a;
}</pre>
<h3></h3>
<h3>快速gcd（辗转相减法的优化）</h3>
(1)若x,y相等：gcd(x,y)=x

(2)若x为偶数，y为奇数:gcd(x,y)=gcd(x/2,y)

(3)若x为奇数，y为偶数:gcd(x,y)=gcd(x,y/2)

(4)若x,y都是偶数：gcd(x,y)=2*gcd(x/2,y/2)

(5)若x,y都是奇数：gcd(x,y)=gcd(x-y,y)(x&gt;=y)
<pre class="lang:c++ decode:true ">typedef long long ll;
ll gcd(ll x,ll y)
{
    if(x==y)
        return x;
    bool fgx=(x&amp;1);
    bool fgy=(y&amp;1);
    if(fgx&amp;&amp;fgy)
    {
        if(x&gt;y)
        return gcd(x-y,y);
    else
        return gcd(y-x,x);
    }
    if(!fgx&amp;&amp;!fgy)
        return 2*gcd(x&gt;&gt;1,y&gt;&gt;1);
    if(!fgx&amp;&amp;fgy)
        return gcd(x&gt;&gt;1,y);
    if(fgx&amp;&amp;!fgy)
        return gcd(x,y&gt;&gt;1);
}</pre>
&nbsp;
<h3>2.欧几里得算法的证明</h3>
<ul>
 	<li>GCD(a , b) 与GCD（b mod a , a）可以互相整除</li>
 	<li>证明如下</li>
 	<li>不妨将b mod a 表示为 a 与 b 所构成的线性组合 b - ⌊b/a⌋ * a</li>
 	<li>b mod a == b - ⌊b/a⌋ * a</li>
 	<li>由于GCD返回的是a和b的最大公约数，</li>
 	<li>所以a和b能被GCD（a, b）</li>
 	<li>b mod a == b - ⌊b/a⌋ * a == b * (1 - ⌊1/a⌋*a)</li>
 	<li>GCD(b * (1 - ⌊1/a⌋*a) , a)</li>
 	<li>所以GCD（b mod a, a）能被GCD（a, b）整除</li>
 	<li>同理可知，</li>
 	<li>GCD（a, b）能被GCD（b mod a, a）整除</li>
 	<li>综上GCD（b mod a, a）和 GCD（a, b）可互相整除</li>
 	<li>所以GCD（b mod a, a） =   GCD（a, b）</li>
</ul>
<h3>例题</h3>
F - Happy 2006

来源 poj 2773

&nbsp;
<div class="ptx" lang="en-US">

Two positive integers are said to be relatively prime to each other if the Great Common Divisor (GCD) is 1. For instance, 1, 3, 5, 7, 9...are all relatively prime to 2006.

Now your job is easy: for the given integer m, find the K-th element which is relatively prime to m when these elements are sorted in ascending order.

</div>
Input
<div class="ptx" lang="en-US">The input contains multiple test cases. For each test case, it contains two integers m (1 &lt;= m &lt;= 1000000), K (1 &lt;= K &lt;= 100000000).</div>
Output
<div class="ptx" lang="en-US">Output the K-th element in a single line.</div>
Sample Input
<pre class="sio">2006 1
2006 2
2006 3
</pre>
Sample Output
<pre class="sio">1
3
5</pre>
&nbsp;

&nbsp;
<h4>题目分析：</h4>
<h4>这是根据欧几里得所出的一题较为简单的数学题。如果两个数字的最大公约数是1的话，则称这两个正数是互素的。</h4>
<h4>题目求解是和m互素的第k大的数字。</h4>
<h4>解题思路：</h4>
（1）一般的欧几里得我们是正推的，也就是 使用这个GCD（b mod a, a） =   GCD（a, b），但本题逆向了一下思维，当GCD(b mod a, a) = GCD(a, b)时这时候的 GCD（a, b）就会变成 GCD（b ， b*t + a），这里的t是我们所设的一个参数而 b*t + a mod b的结果就是 a

（2）第 m * j + i 个和m互素的数字是 m * j + a

<strong>（3）判断互素一定要循环到m，不能m-1不然会run_error其实我觉得应该报wa而不是re（这里标记疑问）</strong>
<h4>代码如下：</h4>
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e6 + 10;
using namespace std;
inline int gcd(int a, int b)
{
    return b == 0 ? a : gcd(b, a%b);
}
int pri[maxn];//将互素的数都存入
int main()
{
    int m, k;
    while(scanf("%d%d", &amp;m, &amp;k)!=EOF)
    {
        int cnt = 0;
        for(int i = 1; i &lt;= m; i++)
        {
            if( gcd(m, i) == 1)
            {
                pri[cnt++] = i;
            }

        }
        k--;
        printf("%d\n", pri[k % cnt] + m *(k/cnt));
    }
}
</pre>
&nbsp;
<h3>3.线性组合</h3>
<h4>定理1：</h4>
如果a和b都是整数，则ax+by是a和b的线性组合，其中x和y都是整数
<h4> 定理2：</h4>
<strong>如果a和b都是整数，且a和b不全为0， 则GCD（a, b）是a和b线性组合中最小的正整数。</strong>

证明过程如下：
<blockquote>关于带余除法：顾名思义是带有余数的除法</blockquote>
<ul>
 	<li>证明：设c是a和b的线性组合中最小正整数</li>
 	<li>ax+by=c其中数x和y是整数。</li>
 	<li>由带余除法，a=cq+r，其中0&lt;r&lt;c。由此可得r=a-cq=a-q(ax+by)=a(1-qx)-bqy。</li>
 	<li>所以，整数r是a和b的线性组合。</li>
 	<li>因为c是a和b的线性组合中最小正整数，0&lt;=r&lt;c，</li>
 	<li>所以r=0，则c是a的约数。同理可证，c是b的约数。</li>
 	<li>因此，c是a和b的公约数。</li>
 	<li>对于a和b的所有约数d，因为ax+by=c，</li>
 	<li>所以d是c的约数，c&gt;=d。</li>
 	<li>所以c是a和b的最大公约数GCD(a, b)</li>
</ul>
<h4>定理3：</h4>
如果a和b都是整数，则存在有整数x和y使得ax+by==GCD（a, b）
<h4>定理3的推论：</h4>
<strong>当a和b都是素数时，他们的公因数只有1，那么当且仅当存在整数x和y使得ax+by = 1</strong>

（素数理论和线性组合的结合）

&nbsp;

<span style="color: #3366ff;"><strong>证明如下（可以不记，结论简单好记，当然也很好推，注意mod变化线性函数即可）</strong></span>

<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/10/图片1.png"><img class="alignnone size-full wp-image-867" src="http://yx.telstudy.xyz/wp-content/uploads/2019/10/图片1.png" alt="" width="843" height="341" /></a>

&nbsp;
<h4><strong>扩展欧几里得算法</strong></h4>
ax+by = GCD(a, b);

<strong>扩展欧几里得算法是欧几里得算法（又叫辗转相除法）的扩展。除了计算a、b两个整数的最大公约数，此算法还能找到整数x、y（其中一个很可能是负数）。</strong>

（可以理解为利用线性组合求解a和b的最大公约数）

代码如下
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;

#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;

using namespace std;
int exgcd(int a, int b,int &amp;x, int &amp;y){
    if(b == 0){x = 1; y = 0; return a;}
    int t = exgcd(b, a%b, x, y);
    int x0 = x;
    int y0 = y;
    x = y0;
    y = x0 - (a/b) * y0;
    return t;
}
int main(){

}
</pre>
&nbsp;
<h4>定理4:</h4>
<ul>
 	<li>设a, b和c都是整数。</li>
 	<li>如果c不是GCD(a, b)的倍数，</li>
 	<li>则不定方程ax+by=c没有整数解；</li>
 	<li>如果c是GCD(a, b)的倍数，</li>
 	<li>则不定方程ax+by=c有无穷多整数解。</li>
 	<li>如果(x0, y0)是ax+by=c的一个整数解，</li>
 	<li>则ax+by=c的所有整数解是x= x0+ k *(b DIV GCD(a, b))，y= y0-k *(a DIV GCD(a, b))，其中k是整数。</li>
</ul>
<blockquote>可以概括为：如果存在（x0, y0）使得ax+by = t * gcd(a, b) 那么可以知道所有的整数解

x= x0+ k *(b DIV GCD(a, b))

y= y0-k *(a DIV GCD(a, b))</blockquote>
<strong>代入可知，令x= x0+ k *(b DIV GCD(a, b))，y= y0-k *(a DIV GCD(a, b))，其中k是整数。则ax+by= ax0+a*k*(b DIV GCD(a, b))+by0-b*k*(a DIV GCD(a, b))=ax0+by0=c</strong>
<h4>例题：</h4>
来源：poj2142

G - The Balance

&nbsp;
<div class="ptx" lang="en-US">Ms. Iyo Kiffa-Australis has a balance and only two kinds of weights to measure a dose of medicine. For example, to measure 200mg of aspirin using 300mg weights and 700mg weights, she can put one 700mg weight on the side of the medicine and three 300mg weights on the opposite side (Figure 1). Although she could put four 300mg weights on the medicine side and two 700mg weights on the other (Figure 2), she would not choose this solution because it is less convenient to use more weights.
You are asked to help her by calculating how many weights are required.
<center><img src="https://vj.z180.cn/003493347ef2af1800a5c47e3f5ef5ef?v=1570569668" width="733" height="430" /></center></div>
Input
<div class="ptx" lang="en-US">The input is a sequence of datasets. A dataset is a line containing three positive integers a, b, and d separated by a space. The following relations hold: a != b, a &lt;= 10000, b &lt;= 10000, and d &lt;= 50000. You may assume that it is possible to measure d mg using a combination of a mg and b mg weights. In other words, you need not consider "no solution" cases.
The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.</div>
Output
<div class="ptx" lang="en-US">The output should be composed of lines, each corresponding to an input dataset (a, b, d). An output line should contain two nonnegative integers x and y separated by a space. They should satisfy the following three conditions.
<ul>
 	<li>You can measure dmg using x many amg weights and y many bmg weights.</li>
 	<li>The total number of weights (x + y) is the smallest among those pairs of nonnegative integers satisfying the previous condition.</li>
 	<li>The total mass of weights (ax + by) is the smallest among those pairs of nonnegative integers satisfying the previous two conditions.</li>
</ul>
No extra characters (e.g. extra spaces) should appear in the output.</div>
Sample Input
<pre class="sio">700 300 200
500 200 300
500 200 500
275 110 330
275 110 385
648 375 4002
3 1 10000
0 0 0</pre>
Sample Output
<pre class="sio">1 3
1 1
1 0
0 3
1 1
49 74
3333 1</pre>
&nbsp;

&nbsp;
<h5>题目分析：</h5>
砝码平衡的数学问题，涉及欧几里得算法
<h5>解题思路：</h5>
可以转化为输入a b d求解x和y满足ax+by = d(题目中说了，本题不需要考虑无解的情况）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date><![CDATA[2019-10-11 05:09:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-11 05:09:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e8%ae%ba%e5%ad%a6%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e8%ae%ba"><![CDATA[数论]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[851]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[giligili_post_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>怎么样算精通java</title>
		<link>http://yx.telstudy.xyz/index.php/shuoshuo/%e6%80%8e%e4%b9%88%e6%a0%b7%e7%ae%97%e7%b2%be%e9%80%9ajava/</link>
		<pubDate>Mon, 09 Sep 2019 09:35:00 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?post_type=shuoshuo&#038;p=766</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://yx.telstudy.xyz/wp-content/uploads/2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg"><img class="alignnone size-full wp-image-767" src="http://yx.telstudy.xyz/wp-content/uploads/2019/09/33CD4630-401C-4506-A5BA-2C7FEA339538.jpeg" alt="" width="1920" height="3128" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date><![CDATA[2019-09-09 09:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-09 09:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%80%8e%e4%b9%88%e6%a0%b7%e7%ae%97%e7%b2%be%e9%80%9ajava]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[shuoshuo]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[767]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>洛谷P1015 回文数【模拟、字符串】</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/14/%e6%b4%9b%e8%b0%b7p1015-%e5%9b%9e%e6%96%87%e6%95%b0%e3%80%90%e6%a8%a1%e6%8b%9f%e3%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2%e3%80%91/</link>
		<pubDate>Mon, 14 Oct 2019 15:30:56 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=875</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;
<h2 class="lfe-h2" data-v-af321868="">题目描述</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。

例如：给定一个十进制数<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">5</span><span class="mord">6</span></span></span></span>，将<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">5</span><span class="mord">6</span></span></span></span>加<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">6</span><span class="mord">5</span></span></span></span>（即把<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">5</span><span class="mord">6</span></span></span></span>从右向左读），得到<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">1</span><span class="mord">2</span><span class="mord">1</span></span></span></span>是一个回文数。

又如：对于十进制数<span class="katex"><span class="katex-mathml">87</span></span>：

STEP1：<span class="katex"><span class="katex-mathml">87</span></span>+<span class="katex"><span class="katex-mathml">78</span></span> = <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">1</span><span class="mord">6</span><span class="mord">5</span></span></span></span>
STEP2：<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">1</span><span class="mord">6</span><span class="mord">5</span></span></span></span>+<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">5</span><span class="mord">6</span><span class="mord">1</span></span></span></span> = <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">7</span><span class="mord">2</span><span class="mord">6</span></span></span></span>
STEP3：<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">7</span><span class="mord">2</span><span class="mord">6</span></span></span></span>+<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">6</span><span class="mord">2</span><span class="mord">7</span></span></span></span> = <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">1</span><span class="mord">3</span><span class="mord">5</span><span class="mord">3</span></span></span></span>
STEP4：<span class="katex"><span class="katex-mathml">1353</span></span>+<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">3</span><span class="mord">5</span><span class="mord">3</span><span class="mord">1</span></span></span></span> = <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">4</span><span class="mord">8</span><span class="mord">8</span><span class="mord">4</span></span></span></span>

在这里的一步是指进行了一次<span class="katex"><span class="katex-mathml">N</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord mathit">N</span></span></span></span>进制的加法，上例最少用了<span class="katex"><span class="katex-mathml">4</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">4</span></span></span></span>步得到回文数<span class="katex"><span class="katex-mathml">4884</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">4</span><span class="mord">8</span><span class="mord">8</span><span class="mord">4</span></span></span></span>。

写一个程序，给定一个<span class="katex"><span class="katex-mathml">N</span></span>(<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">2</span><span class="mrel">≤</span><span class="mord mathit">N</span><span class="mrel">≤</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord mathit">N</span><span class="mrel">=</span><span class="mord">1</span><span class="mord">6</span></span></span></span>)进制数<span class="katex"><span class="katex-mathml">M</span></span>(<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>位之内)，求最少经过几步可以得到回文数。如果在<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">3</span><span class="mord">0</span></span></span></span>步以内（包含<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">3</span><span class="mord">0</span></span></span></span>步）不可能得到回文数，则输出<code>Impossible!</code>

</div>
<h2 class="lfe-h2" data-v-af321868="">输入格式</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

两行，分别是<span class="katex"><span class="katex-mathml">N</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord mathit">N</span></span></span></span>，<span class="katex"><span class="katex-mathml">M</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord mathit">M</span></span></span></span>。

</div>
<h2 class="lfe-h2" data-v-af321868="">输出格式</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

STEP=ans

</div>
<h2 class="lfe-h2" data-v-af321868="">输入输出样例</h2>
<div class="sample-wrap sample" data-v-36768c72="" data-v-af321868="">
<div class="input" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输入 #1</strong>
<pre data-v-89a1e792="" class="">10
87
</pre>
</div>
<div class="output" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输出 #1</strong>
<pre data-v-89a1e792="" class="">STEP=4</pre>
</div>
</div>
解题思路：注意到进制数就应该思考对数取余，看到数据范围和回文数就需要考虑到字符串的应用
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;

#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 10010;
using namespace std;
int n; char m[maxn]; vector &lt;int&gt; a, b;




int main(){
        //如何将m转换为string
    scanf("%d%s", &amp;n, m);
    for(int i = 0, len = strlen(m); i &lt; len; i++){
        (m[i] &gt;= '0' &amp;&amp; m[i] &lt;= '9') ? a.push_back(m[i] - '0') : a.push_back(islower(m[i]) ? m[i] - 'a' + 10 : m[i] - 'A' + 10);
    }
    b = a;
    reverse(a.begin(), a.end()); // 翻转
    if(a == b) return puts("STEP=0"), 0; //反转后相等即为回文
    //30步以内
    for(int step = 1; step &lt;= 30; step++) {
        for(int i = 0, len = a.size(); i &lt; len; i++) {
            a[i] += b[i]; // 加法
            if(i != len - 1) a[i + 1] += a[i] / n; // 处理进位,如果小于0就不会有进位了
            else if(a[i] &gt;= n) a.push_back(a[i] / n); //当i == len - 1时就是在首部要再加一位
            a[i] %= n; //按n取余
        }
        b = a;
        reverse(b.begin(), b.end());
        if(a == b) return printf("STEP=%d", step), 0; // 判回文
    }
    return puts("Impossible!"), 0;
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>875</wp:post_id>
		<wp:post_date><![CDATA[2019-10-14 15:30:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-14 15:30:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b4%9b%e8%b0%b7p1015-%e5%9b%9e%e6%96%87%e6%95%b0%e3%80%90%e6%a8%a1%e6%8b%9f%e3%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2%e3%80%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【小数据、高思维的贪心】洛谷P1016 旅行家的预算</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/15/%e3%80%90%e5%b0%8f%e6%95%b0%e6%8d%ae%e3%80%81%e9%ab%98%e6%80%9d%e7%bb%b4%e7%9a%84%e8%b4%aa%e5%bf%83%e3%80%91%e6%b4%9b%e8%b0%b7p1016-%e6%97%85%e8%a1%8c%e5%ae%b6%e7%9a%84%e9%a2%84%e7%ae%97/</link>
		<pubDate>Tue, 15 Oct 2019 03:16:09 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=878</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 class="lfe-h2" data-v-af321868="">题目描述</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

一个旅行家想驾驶汽车以最少的费用从一个城市到另一个城市（假设出发时油箱是空的）。给定两个城市之间的距离<span class="katex"><span class="katex-mathml">D1</span></span>、汽车油箱的容量<span class="katex"><span class="katex-mathml">C</span></span>（以升为单位）、每升汽油能行驶的距离<span class="katex"><span class="katex-mathml">D2</span></span>、出发点每升汽油价格<span class="katex"><span class="katex-mathml">P</span></span>和沿途油站数<span class="katex"><span class="katex-mathml">N</span></span>（<span class="katex"><span class="katex-mathml">N</span></span>可以为零），油站<span class="katex"><span class="katex-mathml">i</span></span>离出发点的距离<span class="katex"><span class="katex-mathml">Di</span></span>、每升汽油价格<span class="katex"><span class="katex-mathml">Pi</span></span>（<span class="katex"><span class="katex-mathml">i=1,2,…,N; i=1,2,…,N ;</span></span>）。计算结果四舍五入至小数点后两位。如果无法到达目的地，则输出“No Solution”。

</div>
<h2 class="lfe-h2" data-v-af321868="">输入格式</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

第一行，<span class="katex"><span class="katex-mathml">D1</span></span>，<span class="katex"><span class="katex-mathml">C</span></span>，<span class="katex"><span class="katex-mathml">D2</span></span>，<span class="katex"><span class="katex-mathml">P</span></span>，<span class="katex"><span class="katex-mathml">N</span></span>。

接下来有<span class="katex"><span class="katex-mathml">N</span></span>行。

第<span class="katex"><span class="katex-mathml">i+1</span></span>行，两个数字，油站i离出发点的距离<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord mathit">D</span><span class="mord mathit">i</span></span></span></span>和每升汽油价格<span class="katex"><span class="katex-mathml">Pi</span></span>。

</div>
<h2 class="lfe-h2" data-v-af321868="">输出格式</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">

所需最小费用，计算结果四舍五入至小数点后两位。如果无法到达目的地，则输出“No Solution”。

</div>
<h2 class="lfe-h2" data-v-af321868="">输入输出样例</h2>
<div class="sample-wrap sample" data-v-36768c72="" data-v-af321868="">
<div class="input" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输入 #1</strong></div>
</div>
<div class="input" data-v-89a1e792="" data-v-36768c72="">
<pre data-v-89a1e792="" class="">275.6 11.9 27.4 2.8 2
102.0 2.9
220.0 2.2
</pre>
</div>
<div class="output" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输出 #1</strong></div>
<div class="sample-wrap sample" data-v-36768c72="" data-v-af321868="">
<div class="output" data-v-89a1e792="" data-v-36768c72="">
<pre data-v-89a1e792="" class="">26.95
</pre>
</div>
</div>
<h2 class="lfe-h3" data-v-af321868="">说明/提示</h2>
<div class="marked" data-v-6156e5d2="" data-v-af321868=""><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord mathit">N</span><span class="mrel">≤</span><span class="mord">6</span></span></span></span>,其余数字<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mrel">≤</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span></span></span></span>
<h2><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="mord">解题思路：</span></span></span></span></h2>
通过题目我们很清楚的知道，我们需要寻找每一个低油价的地方加满油，去寻找下一处低油价的地方。

也就是与当前油价相比较，如果某站点比当前油价低同同时距离能够达到，那么我们下一步就移动到该站点，这个过程我们就需要减去移动到这个所需要的油量，同时更新当前距离，和当前油量的价格，接着再寻找下一处，如果当前的距离已经大于等于两个城市之间的距离了，那么我们可以直接输出当前一共花费的金钱

在寻找之前需要判断一个条件就是每个油站之间的距离如果大于c * p就是装满一箱油所能走的距离的话，那么直接输出no solution 因为你不管怎么装都无法超出他的容积，就没办法到达下一个油站。
<h2>代码如下：</h2>
<pre class="lang:c++ decode:true ">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int N = 16;
double pi[N], di[N];
double AnsMoney = 0;
int DFS(int j,int i) {

}

using namespace std;
int main() {
	double d1, c, d2, p, reoil = 0;
	int n;
	//reoil 指的是剩余的油量

	scanf("%lf%lf%lf%lf%d", &amp;d1, &amp;c, &amp;d2, &amp;p, &amp;n);
	//d1 是总路程
	double maxlen = c * d2;//加满油最多能走的路程，如果 di+1 - di  &gt; maxlen 的话就直接 puts no solution，油箱体积是有限的改变的只有油价而已
	 
	//不妨将起始位置的油价加入到pi当中
	pi[0] = p, di[0] = 0;

	for(int i = 1; i &lt;= n; i++) {
		cin &gt;&gt; di[i] &gt;&gt; pi[i];
	}
	for(int i = 0; i &lt;= n; i++) {
		if(di[i + 1] - di[i]  &gt; maxlen) {
			return puts("No Solution"), 0;
		}
	}
	double MovableDistance = 0;//能够移动的距离
	int t = 0;
	double pimin = 501;
	while(d1 - MovableDistance) {
//不遍历起始位置，因为起始位置是一定要加油的 
		for(int i = t + 1; di[i] - MovableDistance &lt;= maxlen &amp;&amp;  i &lt;= n; i++) {
			if(pi[i] &lt; pimin) {
				//寻找最小的油价地点，因为是通过i循环所以直接找离得近，切小于当前最小值的地点 
				pimin = pi[i];
				t = i;//确保下一次就不会找本次使用的站点 
			}
		}
		if(pimin &lt;= p) {
			AnsMoney += ((di[t] - MovableDistance)/d2 - reoil) * p, reoil = (di[t] - MovableDistance)/d2;
		} 
		else if(d1 - MovableDistance &gt; maxlen) {
			AnsMoney += (c - reoil) * p;
			reoil = c;//剩余油量已经装满 
		} 
		else {
			AnsMoney += ((d1 - MovableDistance)/d2 - reoil) * p ;
			break;
		}
		reoil = reoil - (di[t] - MovableDistance)/d2; //减去走MovableDistance所需花费的油量，更新剩余的reoil 
		MovableDistance = di[t];                              //更新当前的距离，当MovableDistance超过maxlen时就说明已经可以到达第二座城市了 
		p = pimin;                                            //更新当前p，寻找下一处比当前油价低的地方 
		pimin = 501;                                          //更新pmin，以便下次搜索最小值
	}
	return printf("%.2lf\n", AnsMoney), 0;
}
</pre>
&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>878</wp:post_id>
		<wp:post_date><![CDATA[2019-10-15 03:16:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-15 03:16:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%b0%8f%e6%95%b0%e6%8d%ae%e3%80%81%e9%ab%98%e6%80%9d%e7%bb%b4%e7%9a%84%e8%b4%aa%e5%bf%83%e3%80%91%e6%b4%9b%e8%b0%b7p1016-%e6%97%85%e8%a1%8c%e5%ae%b6%e7%9a%84%e9%a2%84%e7%ae%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>顺序表的实现</title>
		<link>http://yx.telstudy.xyz/index.php/2019/10/21/%e9%a1%ba%e5%ba%8f%e8%a1%a8%e7%9a%84%e5%ae%9e%e7%8e%b0/</link>
		<pubDate>Mon, 21 Oct 2019 01:02:30 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=884</guid>
		<description></description>
		<content:encoded><![CDATA[<pre class="lang:c++ decode:true ">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;bits/stdc++.h&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;
const int maxn = 1e5 + 10; 
/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:2019.10.21 
 *    顺序表的实现
 */
using namespace std;

template &lt;class T&gt;
class SeqList{
	private:
		T data[maxn];//顺序表元素
		int length;            //顺序表当前长度
	public:
	 	/* 
	 	 * 声明及定义SeqList模板类；
		 * 初始化空的顺序表；
		 * 使用一维数组初始化顺序表；
		 * 返回顺序表的长度；
		 * 在顺序表中按位查找元素；
		 * 在顺序表中按值查找元素；
		 * 在顺序表中插入元素；
		 * 在顺序表中删除元素；
		 * 遍历顺序表。
		 */ 
		 //清 0初始化 
		 SeqList(){
		 	memset(data, 0, sizeof(data));
			length = 0; 
		 }
		 
		 //一维数组初始化 
		 SeqList(T *rdata, int size){
		 	length = 0; 
		 	if(size &gt;= maxn - 2||size &lt; 0){
			 	throw "error"; 
			 }
			else
		 	for(int i = 0; i &lt; size; i++) { 
		 		length++;
				data[i] = rdata[i]; 
			} 
		 }
		 
		 //返回长度
		 int GetLength(){
		 	return length; 
		 }
		//按位置查找 
		T Floc(int i){
			if(i &gt;= length || i &lt; 0){throw "error";} 
			else
			return data[i]; 
		}
		//按值查找 
		int Fval(T rdata){
			for(int i = 0; i &lt; length; i++){
				if(data[i] == rdata){
					return i; 
				} 
			}
			return -1; 
		}
		//插入 
		int Ins(T InsData,int InsPla){
			if(InsPla &lt; length &amp;&amp; InsPla &gt;= 0 &amp;&amp; length &lt; maxn - 2){
				for(int i = length; i - 1 &gt;= InsPla; --i){
					data[i] = data[i - 1];
				}
				length++; 
			}
			else if(length &gt;= maxn - 2){
				return printf("can no ins anything") * 0; 
			} 
			else{
				return printf("error, check again") * 0; 
			}
		}
		//删除p位置上的元素 
		void Delp(int p){
			if(p &lt; length &amp;&amp; p &gt;= 0){
				for(int i = p; i+1 &lt; length; i++){
					data[i] = data[i+1]; 
				} 
			length--; 
			return ; 
			}
			else{
				printf("error, check again"); 
				return ; 
			}
		}
		//删除所有值为d的
		void Dald(T d){
			int Tmplen = length; 
			REP(i, 0, length){
				if(data[i] == d){
					for(int j = i ; j+1 &lt; length; j++){
						data[j] = data[j+1]; 
					} 
					length--; 
				} 
			}
			printf("%d delements deleted\n",Tmplen - length);
			printf("now len = %d", length); 
			return ; 
		}
		//遍历顺序表输出
		 void Pri(){
		 	for(int i = 0; i &lt; length; i++){
				i == 0 ? cout &lt;&lt; data[i] : cout &lt;&lt; " " &lt;&lt; data[i]; 
			}
			cout &lt;&lt; '\n'; 
			return ; 
		 }
		
}; 
int main(){

	int n;
	cout &lt;&lt; "please input n\n"; 
	scanf("%d", &amp;n);
	int *inp = new int [n + 1];
	cout &lt;&lt; "please input n ele\n"; 
	for(int i = 0; i &lt; n; i++){
		cin &gt;&gt; inp[i]; 
	}
	cout &lt;&lt; "使用一维数组赋值\n";
	
	SeqList&lt;int&gt; first(inp, n);
	cout &lt;&lt; "输出测试" &lt;&lt; '\n'; 
	first.Pri();
	cout &lt;&lt; "输出长度"  &lt;&lt; '\n' &lt;&lt; first.GetLength() &lt;&lt; '\n';
	cout &lt;&lt; "输入i值， 插入到j位置上" &lt;&lt; '\n';
	int i, j; 
	cin &gt;&gt; i &gt;&gt; j; 
	first.Ins(i, j);
	cout &lt;&lt; "输出测试" &lt;&lt; '\n'; 
	first.Pri();
	int k; 
	cout &lt;&lt; "输入k进行按位置查找(0 &lt;= k &lt;= " &lt;&lt; first.GetLength() &lt;&lt;")" &lt;&lt; '\n';
	cin &gt;&gt; k;
	cout &lt;&lt; "查找到 ： " &lt;&lt; first.Floc(k) &lt;&lt; '\n';
	
}
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date><![CDATA[2019-10-21 01:02:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-21 01:02:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a1%ba%e5%ba%8f%e8%a1%a8%e7%9a%84%e5%ae%9e%e7%8e%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a1%ba%e5%ba%8f%e8%a1%a8"><![CDATA[顺序表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【模拟、搜索、剪枝】P1120 小木棍 ［数据加强版]</title>
		<link>http://yx.telstudy.xyz/index.php/2019/11/03/%e3%80%90%e6%a8%a1%e6%8b%9f%e3%80%81%e6%90%9c%e7%b4%a2%e3%80%81%e5%89%aa%e6%9e%9d%e3%80%91p1120-%e5%b0%8f%e6%9c%a8%e6%a3%8d-%ef%bc%bb%e6%95%b0%e6%8d%ae%e5%8a%a0%e5%bc%ba%e7%89%88/</link>
		<pubDate>Sun, 03 Nov 2019 08:39:31 +0000</pubDate>
		<dc:creator><![CDATA[cmmmmmm]]></dc:creator>
		<guid isPermaLink="false">http://yx.telstudy.xyz/?p=894</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="marked" data-v-6156e5d2="" data-v-af321868="">

题目链接：<a href="https://www.luogu.org/problem/P1120">https://www.luogu.org/problem/P1120</a>

题目大意：原来有几段长度相同的木棍，，进行了切割，切割成了几段长度不同的木棍，现在给你这些切割后的木棍的长度，求解原始木棍可能的最小长度

</div>
<h2 class="lfe-h2" data-v-af321868="">输入输出样例</h2>
<div class="sample-wrap sample" data-v-36768c72="" data-v-af321868="">
<div class="input" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输入</strong>
<pre data-v-89a1e792="">9
5 2 1 5 2 1 5 2 1
</pre>
</div>
<div class="output" data-v-89a1e792="" data-v-36768c72=""><strong data-v-89a1e792="">输出</strong>
<pre data-v-89a1e792="">6</pre>
</div>
</div>
<div class="marked" data-v-6156e5d2="" data-v-af321868="">
<pre class="pure-highlightjs"><code class="cpp">/**
 *    This code has been written by YueGuang, feel free to ask me question. Blog: http://www.yx.telstudy.xyz
 *    created:
 */
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#define REP(i, a, b) for(int i = a; i &lt; b; i++)
#define REP_(i, a, b) for(int i = a; i &lt;= b; i++)
#define sl(n) scanf("%lld", &amp;n);
#define si(n) scanf("%d", &amp;n);
#define RepAll(a) for(auto x: a)
#define cout(ans) cout &lt;&lt; ans &lt;&lt; endl;
typedef long long ll;


using namespace std;
const int maxn = 256;

int n; //现在有n个木棍
int a[66];//木棍现在的长度
int nex[66];
bool used[66];//统计已经使用过的木棍
bool flag;//判断是否已经找到答案
int m;
int cnt = 0;
int len; //原始长度
int sum;//总共长度

//快速输入
inline int read(){
    int x = 0; bool f = 1; char c = getchar();
    for(; !isdigit(c); c = getchar()) if (c == '-') f = 0;
    for(;  isdigit(c); c = getchar()) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + c - '0';
    if (f) return x;
    return 0-x;
}
bool cmp(int a, int b ){ return a &gt; b;}

//搜索程序
void dfs(int k, int last,int rest){
    /*
     * k为正在拼的木棍的编号
     * last前一个的编号
     * rest为该木棍还未拼的长度
     *
     */
    int i;
    if (!rest){
       //这根原始木棍长度拼完了
        if(k == m) {flag = true; return ;}
        for(i = 1; i &lt;= cnt; i++)
            if (!used[i]) break;
        //找一个还没用的木棍大头即可
        used[i] = 1;
        dfs(k + 1, i, len - a[i]); //木棍未拼接的长度减少
        used[i] = 0;
        //找到答案就直接退出
        if (flag){return ;}
    }

    //二分查找第一个木棍长度不大于未拼长度rest的位置
    int l = last + 1, r = cnt, mid;
    while(l &lt; r){
        mid = (l+r) &gt;&gt; 1;
        if (a[mid] &lt;= rest) r = mid;
        else l = mid + 1;
    }
    for(i = l; i &lt;= cnt; i++){
        //判断木棍是否使用过
        if (!used[i]){
            used[i] = 1;
            dfs(k, i, rest - a[i]);
            used[i] = 0;
            if (flag) return ;

        if (rest == a[i] || rest == len) return ;
        i = nex[i];
        if (i == cnt) return ;
        }
    }
}
int main(){
    n = read(); //输入n
    int d;
    for(int i = 1; i &lt;= n; i++){
        d = read();
        if (d &gt; 50) continue;//长度如果超过50就不用再拼了
        a[++cnt] = d;
        sum += d;
    }
    sort(a+1, a+cnt+1, cmp); //对每段木棍进行一下排序，从大到小，先将长度长的木棍拼进去
    nex[cnt] = cnt;
    for(int i = cnt - 1; i &gt; 0; i--){
       if (a[i] == a[i+1]) nex[i] = nex[i + 1];
       else nex[i] = i;
    }
    //枚举所有有可能的原始长度
    for(len = a[1]; len &lt;= sum/2; len++){
        if (sum % len != 0){
            //如果不能拼整数存在余数的话，就直接进行下一次循环
            continue;
        }
        m = sum/len;
        flag = false;
        used[1] = 1;
        dfs(1, 1, len - a[1]);
        used[1] = 0;
        if (flag) return printf("%d\n", len) * 0;
    }
    printf("%d\n",sum);
    //cout &lt;&lt; sum &lt;&lt; endl;
    return 0;
}
</code></pre>
&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>894</wp:post_id>
		<wp:post_date><![CDATA[2019-11-03 08:39:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-03 08:39:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%a8%a1%e6%8b%9f%e3%80%81%e6%90%9c%e7%b4%a2%e3%80%81%e5%89%aa%e6%9e%9d%e3%80%91p1120-%e5%b0%8f%e6%9c%a8%e6%a3%8d-%ef%bc%bb%e6%95%b0%e6%8d%ae%e5%8a%a0%e5%bc%ba%e7%89%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[解题报告]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_giligili_post_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:3:{s:12:"post_preface";s:0:"";s:16:"post_description";s:0:"";s:13:"post_keywords";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	